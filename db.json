{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1701941402676},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1701941508308},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1701941508342},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1701941508152},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1701941508345},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1701941508341},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1701941508309},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1701941508345},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1701941508346},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1701941508343},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1701941508347},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1701941508346},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1701941508347},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1701941508349},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1701941508352},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1701941508353},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1701941508353},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1701941508351},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1701941508355},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1701941508354},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1701941508357},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1701941508356},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1701941508357},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1701941508358},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1701941508367},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1701941508363},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1701941508369},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1701941508367},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1701941508368},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1701941508370},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1701941508371},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1701941508372},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1701941508372},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1701941508373},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1701941508374},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1701941508376},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1701941508375},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1701941508163},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1701941508167},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1701941508174},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1701941508179},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1701941508251},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1701941508184},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1701941508180},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1701941508159},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1701941508174},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1701941508158},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1701941508160},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1701941508169},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1701941508164},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1701941508171},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1701941508172},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1701941508175},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1701941508173},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1701941508173},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1701941508182},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1701941508162},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1701941508166},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1701941508181},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1701941508185},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1701941508311},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1701941508184},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1701941508340},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1701941508155},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1701941508312},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1701941508166},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1701941508307},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1701941508168},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1701941508176},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1701941508170},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1701941508185},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1701941508319},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1701941508183},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1701941508322},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1701941508333},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1701941508321},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1701941508336},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1701941508324},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1701941508334},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1701941508337},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1701941508338},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1701941508339},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1701941508304},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1701941508289},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1701941508335},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1701941508326},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1701941508232},{"_id":"source/_posts/这是我的第一篇博客.md","hash":"2c104a82b19de359338aad9e343c24b770b62d90","modified":1701952107157},{"_id":"source/Downloads/index.md","hash":"16ea06cf9301775283b4ebb6cee68b040660baa6","modified":1701952445794},{"_id":"themes/ayer/.npmignore","hash":"13239db7290ce1d6dfc62fb60191a8048c6e5781","modified":1701954297948},{"_id":"themes/ayer/.gitignore","hash":"8faed9be54528620a8da662ad9f242e7305d6757","modified":1701954297948},{"_id":"themes/ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1701954297945},{"_id":"themes/ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1701954297948},{"_id":"themes/ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1701954297949},{"_id":"themes/ayer/_config.yml","hash":"74769fd1f0f3dced4bdeae950af14b0ba3b3acc8","modified":1702005578372},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1701954297962},{"_id":"themes/ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1701954297949},{"_id":"themes/ayer/README.md","hash":"df98c8af4a4412483800a8f945e62ece4caa074c","modified":1701954297949},{"_id":"themes/ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1701954297950},{"_id":"themes/ayer/package.json","hash":"f171e4375353a66c8b609b3bc8aece58e8b7cd01","modified":1701954297962},{"_id":"themes/ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1701954297962},{"_id":"themes/ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1701954297962},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"56f5ebae29b5bd4551df79f38c09ab452e0ab28f","modified":1701954297946},{"_id":"themes/ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1701954297950},{"_id":"themes/ayer/.github/config.yml","hash":"d786334df2ea7feca64d07e573055c3452843f8a","modified":1701954297947},{"_id":"themes/ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1701954297950},{"_id":"themes/ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1701954297950},{"_id":"themes/ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1701954297950},{"_id":"themes/ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1701954297951},{"_id":"themes/ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1701954297951},{"_id":"themes/ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1701954297951},{"_id":"themes/ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1701954297952},{"_id":"themes/ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1701954297951},{"_id":"themes/ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1701954297952},{"_id":"themes/ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1701954297952},{"_id":"themes/ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1701954297952},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1701954297953},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1701954297953},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1701954297960},{"_id":"themes/ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1701954297961},{"_id":"themes/ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1701954297960},{"_id":"themes/ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1701954297961},{"_id":"themes/ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1701954297961},{"_id":"themes/ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1701954297961},{"_id":"themes/ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1701954297962},{"_id":"themes/ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1701954297961},{"_id":"themes/ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1701954297975},{"_id":"themes/ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1701954297964},{"_id":"themes/ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1701954297975},{"_id":"themes/ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1701954297960},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1701954297987},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"109c742a5829ca6c9a39d9df5023f6ecc6ff886e","modified":1701954297946},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ca76e0709f2e97edfa004922da78599ef35eb039","modified":1701954297946},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/other.md","hash":"e4c347d70c3b8044eec656e8cfb78cfd49f2d991","modified":1701954297947},{"_id":"themes/ayer/.github/workflows/npmpublish.yml","hash":"6a748fbb9f13da90a00e35d1e8f54bbe71a14571","modified":1701954297948},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/question.md","hash":"20a7174d36e8f090ba7800c08b0c44b15b753736","modified":1701954297947},{"_id":"themes/ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1701954297953},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"ec2dd8a5e55b99350d7606a4f4ba0918fd656116","modified":1701954297953},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1701954297953},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"84f5c967f5019f4964711f3edd408a7503702e58","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"9ef0ed563dd6e3277534f9601ab290b72b3dc42b","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"1a9b8574d4341354ed00127ffb873c80ac1beee9","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1701954297956},{"_id":"themes/ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1701954297956},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1701954297956},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1701954297960},{"_id":"themes/ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1701954297976},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1701954297956},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1701954297976},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1701954297960},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1701954297988},{"_id":"themes/ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1701954297987},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1701954297989},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1701954297990},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1701954297989},{"_id":"themes/ayer/source/dist/main.js","hash":"4338ca7a7bc35ee139016c91d4746643a3ee01c8","modified":1701954297987},{"_id":"themes/ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1701954297990},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1701954298005},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1701954298005},{"_id":"themes/ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1701954298005},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1701954298006},{"_id":"themes/ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1701954298005},{"_id":"themes/ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1701954298006},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1701954298006},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1701954298006},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1701954298008},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1701954298008},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1701954298008},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1701954298007},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1701954298008},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1701954298009},{"_id":"themes/ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1701954298009},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1701954297967},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1701954297967},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1701954297968},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1701954298010},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1701954297974},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1701954297968},{"_id":"themes/ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1701954297974},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1701954297974},{"_id":"themes/ayer/scripts/events/index.js","hash":"f3a5d9bda901565e3c302bcb5ed716b6d006089e","modified":1701954297965},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1701954297966},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1701954297965},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1701954297966},{"_id":"themes/ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1701954297966},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1701954297966},{"_id":"themes/ayer/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1701954297967},{"_id":"themes/ayer/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1701954297967},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1701954297975},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1701954297956},{"_id":"themes/ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1701954297975},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1701954297959},{"_id":"themes/ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1701954297968},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1701954297969},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1701954297969},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1701954297969},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1701954297970},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1701954297969},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1701954297970},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1701954297970},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1701954297970},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1701954297973},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1701954297973},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1701954297973},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1701954297973},{"_id":"themes/ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1701954297965},{"_id":"themes/ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1701954297965},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1701954297989},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1701954297993},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1701954297973},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1701954297974},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1701954298007},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1701954298009},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1701954297986},{"_id":"themes/ayer/source/css/fonts/remixicon.css","hash":"8b54eed3270fae6d5bde5b0a6b522a32b5bd39a0","modified":1701954297976},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1701954297985},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1701954297974},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1701954298004},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1701954297964},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1701954297992},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1701954297994},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1701954297979},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1701954297985},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1701954297998},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1701954298004},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1701954297983},{"_id":"source/_posts/demo.md","hash":"ff43cfc7fa9ae5ddbf9a0ab8b13f42f8ade833e4","modified":1701999776897},{"_id":"public/Downloads/index.html","hash":"16ecc2302a1d42f3cd1d2dc54fae4416f9743710","modified":1702002319890},{"_id":"public/2023/12/08/demo/index.html","hash":"ae92de9d5ea082626c312acbda2aee7d36c26e45","modified":1702003871067},{"_id":"public/2023/12/07/这是我的第一篇博客/index.html","hash":"0275283305ffc439405f5c4ae3f9e6a187d8d3d6","modified":1702017454346},{"_id":"public/2023/12/07/hello-world/index.html","hash":"e05690b629a046caee29b0b7d2c0c66a9bf372e4","modified":1702002319890},{"_id":"public/archives/index.html","hash":"c01079c55cc3075e367c975ac3e5e81b9895c77a","modified":1702021885997},{"_id":"public/index.html","hash":"b45cb09c4be4bc46e2f82d749b497d96f5346133","modified":1702021885997},{"_id":"public/archives/2023/index.html","hash":"08a48329cdd8f019490406dbbf47cd91229f7a9c","modified":1702021885997},{"_id":"public/archives/2023/12/index.html","hash":"ac60595ff5e00a9dfa2523956e97588035fba98c","modified":1702021885997},{"_id":"public/tags/he/index.html","hash":"fd4fc23fa2f73a3641c555c13d42f6111d4537a8","modified":1702002319890},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1702000381697},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1702000381697},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1702000381697},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1702000381697},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1702000381697},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1702000381697},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1702000381697},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1702000381697},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1702000381697},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1702000381697},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1702002319890},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1702000381697},{"_id":"public/css/style.css","hash":"dd73aa06b48cc31fbd05a487e5d0c588e5a036d6","modified":1702000381697},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1702000381697},{"_id":"public/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1702000381697},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1702000381697},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1702000381697},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1702000381697},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1702000381697},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1702000381697},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1702000381697},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1702000381697},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1702000381697},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1702000381697},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1702000381697},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1702000381697},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1702000381697},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1702000381697},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1702000381697},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1702000381697},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1702000381697},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1702000381697},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1702000381697},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1702000381697},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1702000381697},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1702000381697},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1702000381697},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1702000381697},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1702000381697},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1702000381697},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1702000381697},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1702000381697},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1702000381697},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1702000381697},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1702000381697},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1702000381697},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1702000381697},{"_id":"public/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1702000381697},{"_id":"source/categories/index.md","hash":"bb0fb82264ce93c61aa9e055bd881d0a5c011452","modified":1702001116697},{"_id":"source/tags/index.md","hash":"98601dd6d242958adea1aff1bf1e6aa7a6d79909","modified":1702001178161},{"_id":"themes/ayer/_config - 副本.yml","hash":"7929a90648ab341f592b38232fa70a4a77fd4909","modified":1702000680226},{"_id":"public/atom.xml","hash":"6afebdc4c48d3d4249e574943d452ace875af549","modified":1702021885997},{"_id":"public/search.xml","hash":"5177603d404fe55b9be751c5c5defc9f10fde72a","modified":1702021885997},{"_id":"public/categories/index.html","hash":"cfc4aa4ba7d8b5100a21f4eee74353c3c55c4077","modified":1702021885997},{"_id":"public/tags/index.html","hash":"9646e38973a84892cd8d485b14ec3e2daf59571d","modified":1702021885997},{"_id":"source/_posts/Spring-ResponseEntity-详解.md","hash":"dae3ea35515bc9cc572162e0589f4ae6294381bb","modified":1702006233879},{"_id":"source/_posts/详解.md","hash":"1a7050a9194dd42d1e74a98f1e298050b9750ca8","modified":1702003067624},{"_id":"public/2023/12/08/Spring-ResponseEntity-详解/index.html","hash":"907a612e85ea1201df47e28f6bd020188117f692","modified":1702017454346},{"_id":"public/2023/12/08/详解/index.html","hash":"c6993c30bebf751ceccbb698f80b5cfed6a34f2e","modified":1702003871067},{"_id":"public/tags/Spring/index.html","hash":"c893d188d17371466c7400f12149e384205cee83","modified":1702017454346},{"_id":"source/_posts/Spring-Web工具类.md","hash":"96da17bdc669421f8eab65a4fa018557cd54b9a7","modified":1702006181896},{"_id":"public/2023/12/08/Spring-Web工具类/index.html","hash":"d4d678f8bf144ae8ca7ac98008bd043def617524","modified":1702017454346},{"_id":"public/categories/技术/index.html","hash":"cb8b0989a78bb3ee1c01fa5d8eeffd3f14848c32","modified":1702021885997},{"_id":"public/tags/Spring，JAVA/index.html","hash":"016e683fe39f6697322cdb5b93d06b63f1a8e76b","modified":1702005728356},{"_id":"public/tags/Spring-JAVA/index.html","hash":"a05aa99132fb5da5eadf0fad4650c6cb7b578bd3","modified":1702005784825},{"_id":"source/_posts/hutool工具类.md","hash":"fe8fcb3c66be041cdae6760322d4fe2ffc6e7a18","modified":1702006941880},{"_id":"source/_posts/工具类常用.md","hash":"b2a7298da274bb3ef901a691dd160d1a22e0ac7e","modified":1702017440339},{"_id":"public/2023/12/08/工具类常用/index.html","hash":"224b9de9391e51c8aecc15e16e99b5c3ce1de98b","modified":1702021885997},{"_id":"public/2023/12/08/hutool工具类/index.html","hash":"199c13858deb270b702faaf8dcafdb2e6667343d","modified":1702017454346},{"_id":"public/categories/技术/JAVA/index.html","hash":"d2ad9b9442b8ae163f105f34cc4363260b1241a4","modified":1702021885997},{"_id":"public/tags/JAVA/index.html","hash":"241e82b0ccfc29477d81c951292c47c4a349adcc","modified":1702021885997},{"_id":"public/tags/hutool/index.html","hash":"a410c0759cc62f5dabba115afb127794a4db9937","modified":1702017454346},{"_id":"public/tags/工具类/index.html","hash":"8e9c08815277f8e4db4ab5a45c2bf3fdc202b217","modified":1702017454346},{"_id":"public/tags/fastjson/index.html","hash":"c9fb3e29a48078861002f4719368fef79ded36d2","modified":1702017454346},{"_id":"source/_posts/maven初级.md","hash":"f9bbdf771f5c08664c656cdceba17cce742665cf","modified":1702020981369},{"_id":"source/_posts/maven高级.md","hash":"2a67d4b5a8ab8c9ef7bc786fe5be641e9bec96d1","modified":1702021658254},{"_id":"source/_posts/请求头信息.md","hash":"f1db9c7a4a18c67d4262cbecad3b76a3217d831f","modified":1702021869766},{"_id":"public/2023/12/08/请求头信息/index.html","hash":"d124b3377cc1a7601472ef07dc90dc998c2ec986","modified":1702021885997},{"_id":"public/2023/12/08/maven高级/index.html","hash":"bb7e0447ed6a03f9c19c08b63b0248c37a109fb2","modified":1702021885997},{"_id":"public/2023/12/08/maven初级/index.html","hash":"6d46f50defd8b2e356db3d48a2272f678bd2daea","modified":1702021885997},{"_id":"public/categories/技术/前端/index.html","hash":"851d695b708f36d18b35a968bb3384ae4f8e9df5","modified":1702021885997},{"_id":"public/tags/maven/index.html","hash":"eecefdac16b096918857372af4181c93d11a31da","modified":1702021885997},{"_id":"public/tags/项目管理/index.html","hash":"023e360cc6065c75741f7908c51710cf4ba3e3eb","modified":1702021885997},{"_id":"public/tags/请求头/index.html","hash":"766ec3fac8ceeb639827c41c62eae1e7b120f525","modified":1702021885997},{"_id":"public/tags/request/index.html","hash":"9771b0f219e37a04725165b1f55b722893228528","modified":1702021885997},{"_id":"public/tags/前端/index.html","hash":"22b28a9a18c1c64d1e49e7c418eabfc60ca0c32c","modified":1702021885997}],"Category":[{"name":"技术","_id":"clpw220bl0000csapc98m2wdc"},{"name":"JAVA","_id":"clpw284q30001rgap2gwxdg1r"},{"name":"JAVA","parent":"clpw220bl0000csapc98m2wdc","_id":"clpw2jb320004x0apf0am8b8u"},{"name":"前端","parent":"clpw220bl0000csapc98m2wdc","_id":"clpwbvwjj0004uoapcx0qgsqw"}],"Data":[],"Page":[{"title":"Downloads","date":"2023-12-07T12:34:05.000Z","_content":"","source":"Downloads/index.md","raw":"---\ntitle: Downloads\ndate: 2023-12-07 20:34:05\n---\n","updated":"2023-12-07T12:34:05.794Z","path":"Downloads/index.html","comments":1,"layout":"page","_id":"clpv6kxwg0000m8ap7ieig6dn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-12-08T02:03:10.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-12-08 10:03:10\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-12-08T02:05:16.697Z","path":"categories/index.html","comments":1,"_id":"clpvzm0wj0000ioapd5a9ebch","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-12-08T02:03:10.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-12-08 10:03:10\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-12-08T02:06:18.161Z","path":"tags/index.html","comments":1,"_id":"clpvzm0wl0001ioapgqvje543","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-12-07T09:31:33.271Z","updated":"2023-12-07T09:30:02.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpv02f3200004sap2h79fsrt","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"这是我的第一篇博客","date":"2023-12-07T11:56:31.000Z","_content":"\n简介\n\n这\n\n是\n\n我的\n\n第一篇\n\n# 博客\n\nmybatispuls\n\n","source":"_posts/这是我的第一篇博客.md","raw":"---\ntitle: 这是我的第一篇博客\ndate: 2023-12-07 19:56:31\ntags: he\n---\n\n简介\n\n这\n\n是\n\n我的\n\n第一篇\n\n# 博客\n\nmybatispuls\n\n","slug":"这是我的第一篇博客","published":1,"updated":"2023-12-07T12:28:27.157Z","_id":"clpv5xn740000z4ap9ye6a2nm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>简介</p>\n<p>这</p>\n<p>是</p>\n<p>我的</p>\n<p>第一篇</p>\n<h1 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h1><p>mybatispuls</p>\n","site":{"data":{}},"excerpt":"","more":"<p>简介</p>\n<p>这</p>\n<p>是</p>\n<p>我的</p>\n<p>第一篇</p>\n<h1 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h1><p>mybatispuls</p>\n"},{"title":"Spring ResponseEntity 详解","date":"2023-12-08T02:38:06.000Z","_content":"\nSpring ResponseEntity 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。\n\nResponseEntity 继承了 HttpEntity 类，HttpEntity 代表一个 HTTP 请求或者响应实体，其内部有两个成员变量：header 和 body，代表 HTTP 请求或响应的 header 和 body，其中的 body 是泛型的。\n\nResponseEntity 扩展了 HttpEntity 类，新增了 status 成员变量，这样，一个 ResponseEntity 基本可以代表完整的 HTTP 的请求或响应了。我们可以使用它来完全配置 HTTP 响应，包括状态码，标头和正文。\n\n当我们在控制器层返回 ResponseEntity 对象时，Spring MVC 框架会使用 **HttpEntityMethodProcessor** 类来处理它。**HttpEntityMethodProcessor** 是 AbstractMessageConverterMethodProcessor 的一个子类，它专门处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法。\n\nHttpEntityMethodProcessor 的处理过程如下：\n\n- 首先，检查返回值是否为空，如果为空，就直接返回。\n- 然后，创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应。\n- 接着，断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity 或 ResponseEntity 对象。\n- 然后，获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。\n- 接着，判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中。\n- 最后，调用父类的 writeWithMessageConverters 方法，根据实体类型和请求内容协商选择合适的消息转换器，并将实体内容写入到输出消息中。\n\nhandleReturnValue 是HttpEntityMethodProcessor类的一部分，用来处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法，源码说明如下：\n\n```\npublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n        // 设置 mavContainer 的 requestHandled 属性为 true，表示请求已经被处理，不需要再渲染视图。\n        mavContainer.setRequestHandled(true);\n        if (returnValue != null) {\n            // 创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应\n            ServletServerHttpRequest inputMessage = this.createInputMessage(webRequest);\n            ServletServerHttpResponse outputMessage = this.createOutputMessage(webRequest);\n            // 断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity对象\n            Assert.isInstanceOf(HttpEntity.class, returnValue);\n            HttpEntity<?> responseEntity = (HttpEntity)returnValue;\n            HttpHeaders outputHeaders = outputMessage.getHeaders();\n            HttpHeaders entityHeaders = responseEntity.getHeaders();\n            if (!entityHeaders.isEmpty()) {\n                // 获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。\n                // 如果有 Vary 标头，它会特殊处理，避免重复或冲突\n                entityHeaders.forEach((key, value) -> {\n                    if (\"Vary\".equals(key) && outputHeaders.containsKey(\"Vary\")) {\n                        List<String> values = this.getVaryRequestHeadersToAdd(outputHeaders, entityHeaders);\n                        if (!values.isEmpty()) {\n                            outputHeaders.setVary(values);\n                        }\n                    } else {\n                        outputHeaders.put(key, value);\n                    }\n\n                });\n            }\n\n            // 判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中\n            if (responseEntity instanceof ResponseEntity) {\n                int returnStatus = ((ResponseEntity)responseEntity).getStatusCodeValue();\n                outputMessage.getServletResponse().setStatus(returnStatus);\n                // 根据状态码和请求方法进行一些判断。\n                // 如果状态码是 200，并且请求方法是 GET 或 HEAD，并且资源没有被修改（根据 ETag 或 Last-Modified 标头），那么它会直接返回空响应。\n                if (returnStatus == 200) {\n                    HttpMethod method = inputMessage.getMethod();\n                    if ((HttpMethod.GET.equals(method) || HttpMethod.HEAD.equals(method)) && this.isResourceNotModified(inputMessage, outputMessage)) {\n                        outputMessage.flush();\n                        return;\n                    }\n                } else if (returnStatus / 100 == 3) {\n                    // 如果状态码是 3xx，并且有 location 标头，那么它会重定向到 location 的地址。\n                    String location = outputHeaders.getFirst(\"location\");\n                    if (location != null) {\n                        this.saveFlashAttributes(mavContainer, webRequest, location);\n                    }\n                }\n            }\n\n            this.writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage);\n            outputMessage.flush();\n        }\n    }\n```\n\n**那么我们要如何使用ResponseEntity**？\n\nSpring ResponseEntity 是一个泛型类型。因此，我们可以使用任何类型作为响应正文：\n\n```\n@GetMapping (\"/hello\")\nResponseEntity<String> hello() {\n  return new ResponseEntity <> (\"Hello World!\", HttpStatus.OK);\n}\n```\n\n由于我们以编程方式指定响应状态，因此我们可以根据不同的情况返回不同的状态码：\n\n```\n@GetMapping (\"/age\")\nResponseEntity<String> age(\n  @RequestParam (\"yearOfBirth\") int yearOfBirth) {\n  if (isInFuture (yearOfBirth)) {\n    return new ResponseEntity <> (\"年份不正确\", HttpStatus.BAD_REQUEST);\n  }\n  return new ResponseEntity <> (\"你的年龄是\" + calculateAge (yearOfBirth), HttpStatus.OK);\n}\n```\n\n此外，我们还可以设置 HTTP 标头：\n\n```\n@GetMapping (\"/customHeader\")\nResponseEntity<String> customHeader() {\n  HttpHeaders headers = new HttpHeaders ();\n  headers.add (\"Custom-Header\", \"foo\");\n  return new ResponseEntity <> (\"自定义头部\", headers, HttpStatus.OK);\n}\n```\n\n此外，ResponseEntity 还提供了两个嵌套的构建器接口：HeadersBuilder 和它的子接口 BodyBuilder。因此，我们可以通过 ResponseEntity 的静态方法访问它们的功能。\n\n最简单的情况是具有正文和 HTTP 200 响应码的响应：\n\n```\n@GetMapping (\"/hello\")\nResponseEntity<String> hello() {\n  return ResponseEntity.ok (\"Hello World!\");\n}\n```\n\n对于最常见的 HTTP 状态码，我们得到静态方法：\n\n```\nBodyBuilder accepted();\nBodyBuilder badRequest();\nBodyBuilder created(java.net.URI location);\nHeadersBuilder<?> noContent();\nHeadersBuilder<?> notFound();\nBodyBuilder ok();\n```\n\n另外，我们可以使用 BodyBuilder status(HttpStatus status) 和 BodyBuilder status(int status) 方法来设置任何 HTTP 状态。最后，使用 ResponseEntity BodyBuilder.body(T body) 我们可以设置 HTTP 响应正文：\n\n```\n@GetMapping (\"/age\")\nResponseEntity<String> age(@RequestParam (\"yearOfBirth\") int yearOfBirth) {\n  if (isInFuture (yearOfBirth)) {\n    return ResponseEntity.badRequest()\n      .body(\"年份不正确\");\n  }\n  return ResponseEntity.status(HttpStatus.OK)\n    .body(\"你的年龄是 \" + calculateAge (yearOfBirth));\n}\n```\n\n### **ResponseEntity替代方案**\n\n虽然ResponseEntity很强大，但我们不应该滥用它。在简单的情况下，有其他的选项可以满足我们的需求，而且它们会产生更清晰的代码。\n\n### **@ResponseBody**\n\n在传统的Spring MVC应用中，端点通常返回渲染的HTML页面。如果我们想要返回JSON或XML格式的数据，我们可以使用@ResponseBody注解：\n\n```\n@GetMapping(\"/hello\")\n@ResponseBody\npublic String hello() {\n    return \"Hello World!\";\n}\n```\n\n这样，Spring会自动将返回值转换为JSON或XML，并将其写入响应正文。\n\n我们也可以使用@ResponseStatus注解来设置响应状态码：\n\n```\n@GetMapping(\"/age\")\n@ResponseBody\n@ResponseStatus(HttpStatus.OK)\npublic String age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n    if (isInFuture(yearOfBirth)) {\n        throw new IllegalArgumentException(\"年份不正确\");\n    }\n    return \"你的年龄是\" + calculateAge(yearOfBirth);\n}\n```\n\n如果我们想要处理异常并返回不同的状态码，我们可以使用@ControllerAdvice和@ExceptionHandler注解：\n\n```text\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ResponseBody\n    public String handleIllegalArgumentException(IllegalArgumentException ex) {\n        return ex.getMessage();\n    }\n}\n```\n\n### **@RestController**\n\n如果我们的控制器类只返回数据而不是视图，我们可以使用@RestController注解来替代@Controller注解。这样，我们就不需要在每个方法上添加@ResponseBody注解了：\n\n```text\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @GetMapping(\"/age\")\n    @ResponseStatus(HttpStatus.OK)\n    public String age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n        if (isInFuture(yearOfBirth)) {\n            throw new IllegalArgumentException(\"年份不正确\");\n        }\n        return \"你的年龄是 \" + calculateAge(yearOfBirth);\n    }\n}\n```\n\n## **ResponseEntity 和 @ResponseBody 的区别**\n\nResponseEntity 和 @ResponseBody 都是用于处理 HTTP 响应的，但是有一些不同点：\n\n- **ResponseEntity** 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。\n- **@ResponseBody** 是一个注解，它告诉 Spring 将返回值转换为 JSON 并写入到响应体中。我们可以在方法或类上使用它，Spring 会自动选择合适的转换器。\n- **ResponseEntity** 的优点是可以灵活地控制响应的各个方面，比如设置不同的状态码，标头和正文。它也可以用于一些特殊的场景，比如下载文件，需要设置 content-type 和特殊的状态（比如 206）。\n- **@ResponseBody** 的优点是可以简化代码，让方法直接返回 JSON 结果，不需要构造 ResponseEntity 对象。它也可以和 @ResponseStatus 注解配合使用，来设置响应状态码。\n- **ResponseEntity 的优先级高于 @ResponseBody**。如果返回值是 ResponseEntity 类型，那么 Spring 会直接使用它，不会检查有没有 @ResponseBody 注解。如果返回值不是 ResponseEntity 类型，那么 Spring 会检查有没有 @ResponseBody 注解，如果有就转换为 JSON。\n\n因此，我们可以根据不同的需求和场景选择使用 ResponseEntity 或者 @ResponseBody。\n\n对于大多数情况，我们可以使用 @ResponseBody 注解来直接返回 JSON 结果，或者使用 @ResponseStatus 注解来设置响应状态码。对于一些需要更多定制的情况，我们可以使用 ResponseEntity 来完全控制 HTTP 响应。\n\n### **结语**\n\n这篇文章我们主要介绍了Spring ResponseEntity的原理、使用及其替代方案，并对比了ResponseEntity 和 @ResponseBody。\n","source":"_posts/Spring-ResponseEntity-详解.md","raw":"---\ntitle: Spring ResponseEntity 详解\ndate: 2023-12-08 10:38:06\ntags: [Spring, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\nSpring ResponseEntity 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。\n\nResponseEntity 继承了 HttpEntity 类，HttpEntity 代表一个 HTTP 请求或者响应实体，其内部有两个成员变量：header 和 body，代表 HTTP 请求或响应的 header 和 body，其中的 body 是泛型的。\n\nResponseEntity 扩展了 HttpEntity 类，新增了 status 成员变量，这样，一个 ResponseEntity 基本可以代表完整的 HTTP 的请求或响应了。我们可以使用它来完全配置 HTTP 响应，包括状态码，标头和正文。\n\n当我们在控制器层返回 ResponseEntity 对象时，Spring MVC 框架会使用 **HttpEntityMethodProcessor** 类来处理它。**HttpEntityMethodProcessor** 是 AbstractMessageConverterMethodProcessor 的一个子类，它专门处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法。\n\nHttpEntityMethodProcessor 的处理过程如下：\n\n- 首先，检查返回值是否为空，如果为空，就直接返回。\n- 然后，创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应。\n- 接着，断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity 或 ResponseEntity 对象。\n- 然后，获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。\n- 接着，判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中。\n- 最后，调用父类的 writeWithMessageConverters 方法，根据实体类型和请求内容协商选择合适的消息转换器，并将实体内容写入到输出消息中。\n\nhandleReturnValue 是HttpEntityMethodProcessor类的一部分，用来处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法，源码说明如下：\n\n```\npublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n        // 设置 mavContainer 的 requestHandled 属性为 true，表示请求已经被处理，不需要再渲染视图。\n        mavContainer.setRequestHandled(true);\n        if (returnValue != null) {\n            // 创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应\n            ServletServerHttpRequest inputMessage = this.createInputMessage(webRequest);\n            ServletServerHttpResponse outputMessage = this.createOutputMessage(webRequest);\n            // 断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity对象\n            Assert.isInstanceOf(HttpEntity.class, returnValue);\n            HttpEntity<?> responseEntity = (HttpEntity)returnValue;\n            HttpHeaders outputHeaders = outputMessage.getHeaders();\n            HttpHeaders entityHeaders = responseEntity.getHeaders();\n            if (!entityHeaders.isEmpty()) {\n                // 获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。\n                // 如果有 Vary 标头，它会特殊处理，避免重复或冲突\n                entityHeaders.forEach((key, value) -> {\n                    if (\"Vary\".equals(key) && outputHeaders.containsKey(\"Vary\")) {\n                        List<String> values = this.getVaryRequestHeadersToAdd(outputHeaders, entityHeaders);\n                        if (!values.isEmpty()) {\n                            outputHeaders.setVary(values);\n                        }\n                    } else {\n                        outputHeaders.put(key, value);\n                    }\n\n                });\n            }\n\n            // 判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中\n            if (responseEntity instanceof ResponseEntity) {\n                int returnStatus = ((ResponseEntity)responseEntity).getStatusCodeValue();\n                outputMessage.getServletResponse().setStatus(returnStatus);\n                // 根据状态码和请求方法进行一些判断。\n                // 如果状态码是 200，并且请求方法是 GET 或 HEAD，并且资源没有被修改（根据 ETag 或 Last-Modified 标头），那么它会直接返回空响应。\n                if (returnStatus == 200) {\n                    HttpMethod method = inputMessage.getMethod();\n                    if ((HttpMethod.GET.equals(method) || HttpMethod.HEAD.equals(method)) && this.isResourceNotModified(inputMessage, outputMessage)) {\n                        outputMessage.flush();\n                        return;\n                    }\n                } else if (returnStatus / 100 == 3) {\n                    // 如果状态码是 3xx，并且有 location 标头，那么它会重定向到 location 的地址。\n                    String location = outputHeaders.getFirst(\"location\");\n                    if (location != null) {\n                        this.saveFlashAttributes(mavContainer, webRequest, location);\n                    }\n                }\n            }\n\n            this.writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage);\n            outputMessage.flush();\n        }\n    }\n```\n\n**那么我们要如何使用ResponseEntity**？\n\nSpring ResponseEntity 是一个泛型类型。因此，我们可以使用任何类型作为响应正文：\n\n```\n@GetMapping (\"/hello\")\nResponseEntity<String> hello() {\n  return new ResponseEntity <> (\"Hello World!\", HttpStatus.OK);\n}\n```\n\n由于我们以编程方式指定响应状态，因此我们可以根据不同的情况返回不同的状态码：\n\n```\n@GetMapping (\"/age\")\nResponseEntity<String> age(\n  @RequestParam (\"yearOfBirth\") int yearOfBirth) {\n  if (isInFuture (yearOfBirth)) {\n    return new ResponseEntity <> (\"年份不正确\", HttpStatus.BAD_REQUEST);\n  }\n  return new ResponseEntity <> (\"你的年龄是\" + calculateAge (yearOfBirth), HttpStatus.OK);\n}\n```\n\n此外，我们还可以设置 HTTP 标头：\n\n```\n@GetMapping (\"/customHeader\")\nResponseEntity<String> customHeader() {\n  HttpHeaders headers = new HttpHeaders ();\n  headers.add (\"Custom-Header\", \"foo\");\n  return new ResponseEntity <> (\"自定义头部\", headers, HttpStatus.OK);\n}\n```\n\n此外，ResponseEntity 还提供了两个嵌套的构建器接口：HeadersBuilder 和它的子接口 BodyBuilder。因此，我们可以通过 ResponseEntity 的静态方法访问它们的功能。\n\n最简单的情况是具有正文和 HTTP 200 响应码的响应：\n\n```\n@GetMapping (\"/hello\")\nResponseEntity<String> hello() {\n  return ResponseEntity.ok (\"Hello World!\");\n}\n```\n\n对于最常见的 HTTP 状态码，我们得到静态方法：\n\n```\nBodyBuilder accepted();\nBodyBuilder badRequest();\nBodyBuilder created(java.net.URI location);\nHeadersBuilder<?> noContent();\nHeadersBuilder<?> notFound();\nBodyBuilder ok();\n```\n\n另外，我们可以使用 BodyBuilder status(HttpStatus status) 和 BodyBuilder status(int status) 方法来设置任何 HTTP 状态。最后，使用 ResponseEntity BodyBuilder.body(T body) 我们可以设置 HTTP 响应正文：\n\n```\n@GetMapping (\"/age\")\nResponseEntity<String> age(@RequestParam (\"yearOfBirth\") int yearOfBirth) {\n  if (isInFuture (yearOfBirth)) {\n    return ResponseEntity.badRequest()\n      .body(\"年份不正确\");\n  }\n  return ResponseEntity.status(HttpStatus.OK)\n    .body(\"你的年龄是 \" + calculateAge (yearOfBirth));\n}\n```\n\n### **ResponseEntity替代方案**\n\n虽然ResponseEntity很强大，但我们不应该滥用它。在简单的情况下，有其他的选项可以满足我们的需求，而且它们会产生更清晰的代码。\n\n### **@ResponseBody**\n\n在传统的Spring MVC应用中，端点通常返回渲染的HTML页面。如果我们想要返回JSON或XML格式的数据，我们可以使用@ResponseBody注解：\n\n```\n@GetMapping(\"/hello\")\n@ResponseBody\npublic String hello() {\n    return \"Hello World!\";\n}\n```\n\n这样，Spring会自动将返回值转换为JSON或XML，并将其写入响应正文。\n\n我们也可以使用@ResponseStatus注解来设置响应状态码：\n\n```\n@GetMapping(\"/age\")\n@ResponseBody\n@ResponseStatus(HttpStatus.OK)\npublic String age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n    if (isInFuture(yearOfBirth)) {\n        throw new IllegalArgumentException(\"年份不正确\");\n    }\n    return \"你的年龄是\" + calculateAge(yearOfBirth);\n}\n```\n\n如果我们想要处理异常并返回不同的状态码，我们可以使用@ControllerAdvice和@ExceptionHandler注解：\n\n```text\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ResponseBody\n    public String handleIllegalArgumentException(IllegalArgumentException ex) {\n        return ex.getMessage();\n    }\n}\n```\n\n### **@RestController**\n\n如果我们的控制器类只返回数据而不是视图，我们可以使用@RestController注解来替代@Controller注解。这样，我们就不需要在每个方法上添加@ResponseBody注解了：\n\n```text\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @GetMapping(\"/age\")\n    @ResponseStatus(HttpStatus.OK)\n    public String age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n        if (isInFuture(yearOfBirth)) {\n            throw new IllegalArgumentException(\"年份不正确\");\n        }\n        return \"你的年龄是 \" + calculateAge(yearOfBirth);\n    }\n}\n```\n\n## **ResponseEntity 和 @ResponseBody 的区别**\n\nResponseEntity 和 @ResponseBody 都是用于处理 HTTP 响应的，但是有一些不同点：\n\n- **ResponseEntity** 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。\n- **@ResponseBody** 是一个注解，它告诉 Spring 将返回值转换为 JSON 并写入到响应体中。我们可以在方法或类上使用它，Spring 会自动选择合适的转换器。\n- **ResponseEntity** 的优点是可以灵活地控制响应的各个方面，比如设置不同的状态码，标头和正文。它也可以用于一些特殊的场景，比如下载文件，需要设置 content-type 和特殊的状态（比如 206）。\n- **@ResponseBody** 的优点是可以简化代码，让方法直接返回 JSON 结果，不需要构造 ResponseEntity 对象。它也可以和 @ResponseStatus 注解配合使用，来设置响应状态码。\n- **ResponseEntity 的优先级高于 @ResponseBody**。如果返回值是 ResponseEntity 类型，那么 Spring 会直接使用它，不会检查有没有 @ResponseBody 注解。如果返回值不是 ResponseEntity 类型，那么 Spring 会检查有没有 @ResponseBody 注解，如果有就转换为 JSON。\n\n因此，我们可以根据不同的需求和场景选择使用 ResponseEntity 或者 @ResponseBody。\n\n对于大多数情况，我们可以使用 @ResponseBody 注解来直接返回 JSON 结果，或者使用 @ResponseStatus 注解来设置响应状态码。对于一些需要更多定制的情况，我们可以使用 ResponseEntity 来完全控制 HTTP 响应。\n\n### **结语**\n\n这篇文章我们主要介绍了Spring ResponseEntity的原理、使用及其替代方案，并对比了ResponseEntity 和 @ResponseBody。\n","slug":"Spring-ResponseEntity-详解","published":1,"updated":"2023-12-08T03:30:33.879Z","_id":"clpw15s53000148apc27tb714","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Spring ResponseEntity 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。</p>\n<p>ResponseEntity 继承了 HttpEntity 类，HttpEntity 代表一个 HTTP 请求或者响应实体，其内部有两个成员变量：header 和 body，代表 HTTP 请求或响应的 header 和 body，其中的 body 是泛型的。</p>\n<p>ResponseEntity 扩展了 HttpEntity 类，新增了 status 成员变量，这样，一个 ResponseEntity 基本可以代表完整的 HTTP 的请求或响应了。我们可以使用它来完全配置 HTTP 响应，包括状态码，标头和正文。</p>\n<p>当我们在控制器层返回 ResponseEntity 对象时，Spring MVC 框架会使用 <strong>HttpEntityMethodProcessor</strong> 类来处理它。<strong>HttpEntityMethodProcessor</strong> 是 AbstractMessageConverterMethodProcessor 的一个子类，它专门处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法。</p>\n<p>HttpEntityMethodProcessor 的处理过程如下：</p>\n<ul>\n<li>首先，检查返回值是否为空，如果为空，就直接返回。</li>\n<li>然后，创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应。</li>\n<li>接着，断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity 或 ResponseEntity 对象。</li>\n<li>然后，获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。</li>\n<li>接着，判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中。</li>\n<li>最后，调用父类的 writeWithMessageConverters 方法，根据实体类型和请求内容协商选择合适的消息转换器，并将实体内容写入到输出消息中。</li>\n</ul>\n<p>handleReturnValue 是HttpEntityMethodProcessor类的一部分，用来处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法，源码说明如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class=\"line\">        // 设置 mavContainer 的 requestHandled 属性为 true，表示请求已经被处理，不需要再渲染视图。</span><br><span class=\"line\">        mavContainer.setRequestHandled(true);</span><br><span class=\"line\">        if (returnValue != null) &#123;</span><br><span class=\"line\">            // 创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应</span><br><span class=\"line\">            ServletServerHttpRequest inputMessage = this.createInputMessage(webRequest);</span><br><span class=\"line\">            ServletServerHttpResponse outputMessage = this.createOutputMessage(webRequest);</span><br><span class=\"line\">            // 断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity对象</span><br><span class=\"line\">            Assert.isInstanceOf(HttpEntity.class, returnValue);</span><br><span class=\"line\">            HttpEntity&lt;?&gt; responseEntity = (HttpEntity)returnValue;</span><br><span class=\"line\">            HttpHeaders outputHeaders = outputMessage.getHeaders();</span><br><span class=\"line\">            HttpHeaders entityHeaders = responseEntity.getHeaders();</span><br><span class=\"line\">            if (!entityHeaders.isEmpty()) &#123;</span><br><span class=\"line\">                // 获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。</span><br><span class=\"line\">                // 如果有 Vary 标头，它会特殊处理，避免重复或冲突</span><br><span class=\"line\">                entityHeaders.forEach((key, value) -&gt; &#123;</span><br><span class=\"line\">                    if (&quot;Vary&quot;.equals(key) &amp;&amp; outputHeaders.containsKey(&quot;Vary&quot;)) &#123;</span><br><span class=\"line\">                        List&lt;String&gt; values = this.getVaryRequestHeadersToAdd(outputHeaders, entityHeaders);</span><br><span class=\"line\">                        if (!values.isEmpty()) &#123;</span><br><span class=\"line\">                            outputHeaders.setVary(values);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        outputHeaders.put(key, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中</span><br><span class=\"line\">            if (responseEntity instanceof ResponseEntity) &#123;</span><br><span class=\"line\">                int returnStatus = ((ResponseEntity)responseEntity).getStatusCodeValue();</span><br><span class=\"line\">                outputMessage.getServletResponse().setStatus(returnStatus);</span><br><span class=\"line\">                // 根据状态码和请求方法进行一些判断。</span><br><span class=\"line\">                // 如果状态码是 200，并且请求方法是 GET 或 HEAD，并且资源没有被修改（根据 ETag 或 Last-Modified 标头），那么它会直接返回空响应。</span><br><span class=\"line\">                if (returnStatus == 200) &#123;</span><br><span class=\"line\">                    HttpMethod method = inputMessage.getMethod();</span><br><span class=\"line\">                    if ((HttpMethod.GET.equals(method) || HttpMethod.HEAD.equals(method)) &amp;&amp; this.isResourceNotModified(inputMessage, outputMessage)) &#123;</span><br><span class=\"line\">                        outputMessage.flush();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else if (returnStatus / 100 == 3) &#123;</span><br><span class=\"line\">                    // 如果状态码是 3xx，并且有 location 标头，那么它会重定向到 location 的地址。</span><br><span class=\"line\">                    String location = outputHeaders.getFirst(&quot;location&quot;);</span><br><span class=\"line\">                    if (location != null) &#123;</span><br><span class=\"line\">                        this.saveFlashAttributes(mavContainer, webRequest, location);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            this.writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage);</span><br><span class=\"line\">            outputMessage.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>那么我们要如何使用ResponseEntity</strong>？</p>\n<p>Spring ResponseEntity 是一个泛型类型。因此，我们可以使用任何类型作为响应正文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/hello&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; hello() &#123;</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;Hello World!&quot;, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们以编程方式指定响应状态，因此我们可以根据不同的情况返回不同的状态码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/age&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; age(</span><br><span class=\"line\">  @RequestParam (&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">  if (isInFuture (yearOfBirth)) &#123;</span><br><span class=\"line\">    return new ResponseEntity &lt;&gt; (&quot;年份不正确&quot;, HttpStatus.BAD_REQUEST);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;你的年龄是&quot; + calculateAge (yearOfBirth), HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，我们还可以设置 HTTP 标头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/customHeader&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; customHeader() &#123;</span><br><span class=\"line\">  HttpHeaders headers = new HttpHeaders ();</span><br><span class=\"line\">  headers.add (&quot;Custom-Header&quot;, &quot;foo&quot;);</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;自定义头部&quot;, headers, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，ResponseEntity 还提供了两个嵌套的构建器接口：HeadersBuilder 和它的子接口 BodyBuilder。因此，我们可以通过 ResponseEntity 的静态方法访问它们的功能。</p>\n<p>最简单的情况是具有正文和 HTTP 200 响应码的响应：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/hello&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; hello() &#123;</span><br><span class=\"line\">  return ResponseEntity.ok (&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于最常见的 HTTP 状态码，我们得到静态方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BodyBuilder accepted();</span><br><span class=\"line\">BodyBuilder badRequest();</span><br><span class=\"line\">BodyBuilder created(java.net.URI location);</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; noContent();</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; notFound();</span><br><span class=\"line\">BodyBuilder ok();</span><br></pre></td></tr></table></figure>\n\n<p>另外，我们可以使用 BodyBuilder status(HttpStatus status) 和 BodyBuilder status(int status) 方法来设置任何 HTTP 状态。最后，使用 ResponseEntity BodyBuilder.body(T body) 我们可以设置 HTTP 响应正文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/age&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; age(@RequestParam (&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">  if (isInFuture (yearOfBirth)) &#123;</span><br><span class=\"line\">    return ResponseEntity.badRequest()</span><br><span class=\"line\">      .body(&quot;年份不正确&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return ResponseEntity.status(HttpStatus.OK)</span><br><span class=\"line\">    .body(&quot;你的年龄是 &quot; + calculateAge (yearOfBirth));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ResponseEntity替代方案\"><a href=\"#ResponseEntity替代方案\" class=\"headerlink\" title=\"ResponseEntity替代方案\"></a><strong>ResponseEntity替代方案</strong></h3><p>虽然ResponseEntity很强大，但我们不应该滥用它。在简单的情况下，有其他的选项可以满足我们的需求，而且它们会产生更清晰的代码。</p>\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a><strong>@ResponseBody</strong></h3><p>在传统的Spring MVC应用中，端点通常返回渲染的HTML页面。如果我们想要返回JSON或XML格式的数据，我们可以使用@ResponseBody注解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public String hello() &#123;</span><br><span class=\"line\">    return &quot;Hello World!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，Spring会自动将返回值转换为JSON或XML，并将其写入响应正文。</p>\n<p>我们也可以使用@ResponseStatus注解来设置响应状态码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/age&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">public String age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">    if (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;年份不正确&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &quot;你的年龄是&quot; + calculateAge(yearOfBirth);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们想要处理异常并返回不同的状态码，我们可以使用@ControllerAdvice和@ExceptionHandler注解：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">public class GlobalExceptionHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ExceptionHandler(IllegalArgumentException.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String handleIllegalArgumentException(IllegalArgumentException ex) &#123;</span><br><span class=\"line\">        return ex.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a><strong>@RestController</strong></h3><p>如果我们的控制器类只返回数据而不是视图，我们可以使用@RestController注解来替代@Controller注解。这样，我们就不需要在每个方法上添加@ResponseBody注解了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">    public String hello() &#123;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/age&quot;)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    public String age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">        if (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;年份不正确&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &quot;你的年龄是 &quot; + calculateAge(yearOfBirth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ResponseEntity-和-ResponseBody-的区别\"><a href=\"#ResponseEntity-和-ResponseBody-的区别\" class=\"headerlink\" title=\"ResponseEntity 和 @ResponseBody 的区别\"></a><strong>ResponseEntity 和 @ResponseBody 的区别</strong></h2><p>ResponseEntity 和 @ResponseBody 都是用于处理 HTTP 响应的，但是有一些不同点：</p>\n<ul>\n<li><strong>ResponseEntity</strong> 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。</li>\n<li><strong>@ResponseBody</strong> 是一个注解，它告诉 Spring 将返回值转换为 JSON 并写入到响应体中。我们可以在方法或类上使用它，Spring 会自动选择合适的转换器。</li>\n<li><strong>ResponseEntity</strong> 的优点是可以灵活地控制响应的各个方面，比如设置不同的状态码，标头和正文。它也可以用于一些特殊的场景，比如下载文件，需要设置 content-type 和特殊的状态（比如 206）。</li>\n<li><strong>@ResponseBody</strong> 的优点是可以简化代码，让方法直接返回 JSON 结果，不需要构造 ResponseEntity 对象。它也可以和 @ResponseStatus 注解配合使用，来设置响应状态码。</li>\n<li><strong>ResponseEntity 的优先级高于 @ResponseBody</strong>。如果返回值是 ResponseEntity 类型，那么 Spring 会直接使用它，不会检查有没有 @ResponseBody 注解。如果返回值不是 ResponseEntity 类型，那么 Spring 会检查有没有 @ResponseBody 注解，如果有就转换为 JSON。</li>\n</ul>\n<p>因此，我们可以根据不同的需求和场景选择使用 ResponseEntity 或者 @ResponseBody。</p>\n<p>对于大多数情况，我们可以使用 @ResponseBody 注解来直接返回 JSON 结果，或者使用 @ResponseStatus 注解来设置响应状态码。对于一些需要更多定制的情况，我们可以使用 ResponseEntity 来完全控制 HTTP 响应。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><strong>结语</strong></h3><p>这篇文章我们主要介绍了Spring ResponseEntity的原理、使用及其替代方案，并对比了ResponseEntity 和 @ResponseBody。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Spring ResponseEntity 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。</p>\n<p>ResponseEntity 继承了 HttpEntity 类，HttpEntity 代表一个 HTTP 请求或者响应实体，其内部有两个成员变量：header 和 body，代表 HTTP 请求或响应的 header 和 body，其中的 body 是泛型的。</p>\n<p>ResponseEntity 扩展了 HttpEntity 类，新增了 status 成员变量，这样，一个 ResponseEntity 基本可以代表完整的 HTTP 的请求或响应了。我们可以使用它来完全配置 HTTP 响应，包括状态码，标头和正文。</p>\n<p>当我们在控制器层返回 ResponseEntity 对象时，Spring MVC 框架会使用 <strong>HttpEntityMethodProcessor</strong> 类来处理它。<strong>HttpEntityMethodProcessor</strong> 是 AbstractMessageConverterMethodProcessor 的一个子类，它专门处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法。</p>\n<p>HttpEntityMethodProcessor 的处理过程如下：</p>\n<ul>\n<li>首先，检查返回值是否为空，如果为空，就直接返回。</li>\n<li>然后，创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应。</li>\n<li>接着，断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity 或 ResponseEntity 对象。</li>\n<li>然后，获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。</li>\n<li>接着，判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中。</li>\n<li>最后，调用父类的 writeWithMessageConverters 方法，根据实体类型和请求内容协商选择合适的消息转换器，并将实体内容写入到输出消息中。</li>\n</ul>\n<p>handleReturnValue 是HttpEntityMethodProcessor类的一部分，用来处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法，源码说明如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class=\"line\">        // 设置 mavContainer 的 requestHandled 属性为 true，表示请求已经被处理，不需要再渲染视图。</span><br><span class=\"line\">        mavContainer.setRequestHandled(true);</span><br><span class=\"line\">        if (returnValue != null) &#123;</span><br><span class=\"line\">            // 创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应</span><br><span class=\"line\">            ServletServerHttpRequest inputMessage = this.createInputMessage(webRequest);</span><br><span class=\"line\">            ServletServerHttpResponse outputMessage = this.createOutputMessage(webRequest);</span><br><span class=\"line\">            // 断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity对象</span><br><span class=\"line\">            Assert.isInstanceOf(HttpEntity.class, returnValue);</span><br><span class=\"line\">            HttpEntity&lt;?&gt; responseEntity = (HttpEntity)returnValue;</span><br><span class=\"line\">            HttpHeaders outputHeaders = outputMessage.getHeaders();</span><br><span class=\"line\">            HttpHeaders entityHeaders = responseEntity.getHeaders();</span><br><span class=\"line\">            if (!entityHeaders.isEmpty()) &#123;</span><br><span class=\"line\">                // 获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。</span><br><span class=\"line\">                // 如果有 Vary 标头，它会特殊处理，避免重复或冲突</span><br><span class=\"line\">                entityHeaders.forEach((key, value) -&gt; &#123;</span><br><span class=\"line\">                    if (&quot;Vary&quot;.equals(key) &amp;&amp; outputHeaders.containsKey(&quot;Vary&quot;)) &#123;</span><br><span class=\"line\">                        List&lt;String&gt; values = this.getVaryRequestHeadersToAdd(outputHeaders, entityHeaders);</span><br><span class=\"line\">                        if (!values.isEmpty()) &#123;</span><br><span class=\"line\">                            outputHeaders.setVary(values);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        outputHeaders.put(key, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中</span><br><span class=\"line\">            if (responseEntity instanceof ResponseEntity) &#123;</span><br><span class=\"line\">                int returnStatus = ((ResponseEntity)responseEntity).getStatusCodeValue();</span><br><span class=\"line\">                outputMessage.getServletResponse().setStatus(returnStatus);</span><br><span class=\"line\">                // 根据状态码和请求方法进行一些判断。</span><br><span class=\"line\">                // 如果状态码是 200，并且请求方法是 GET 或 HEAD，并且资源没有被修改（根据 ETag 或 Last-Modified 标头），那么它会直接返回空响应。</span><br><span class=\"line\">                if (returnStatus == 200) &#123;</span><br><span class=\"line\">                    HttpMethod method = inputMessage.getMethod();</span><br><span class=\"line\">                    if ((HttpMethod.GET.equals(method) || HttpMethod.HEAD.equals(method)) &amp;&amp; this.isResourceNotModified(inputMessage, outputMessage)) &#123;</span><br><span class=\"line\">                        outputMessage.flush();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else if (returnStatus / 100 == 3) &#123;</span><br><span class=\"line\">                    // 如果状态码是 3xx，并且有 location 标头，那么它会重定向到 location 的地址。</span><br><span class=\"line\">                    String location = outputHeaders.getFirst(&quot;location&quot;);</span><br><span class=\"line\">                    if (location != null) &#123;</span><br><span class=\"line\">                        this.saveFlashAttributes(mavContainer, webRequest, location);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            this.writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage);</span><br><span class=\"line\">            outputMessage.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>那么我们要如何使用ResponseEntity</strong>？</p>\n<p>Spring ResponseEntity 是一个泛型类型。因此，我们可以使用任何类型作为响应正文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/hello&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; hello() &#123;</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;Hello World!&quot;, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们以编程方式指定响应状态，因此我们可以根据不同的情况返回不同的状态码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/age&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; age(</span><br><span class=\"line\">  @RequestParam (&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">  if (isInFuture (yearOfBirth)) &#123;</span><br><span class=\"line\">    return new ResponseEntity &lt;&gt; (&quot;年份不正确&quot;, HttpStatus.BAD_REQUEST);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;你的年龄是&quot; + calculateAge (yearOfBirth), HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，我们还可以设置 HTTP 标头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/customHeader&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; customHeader() &#123;</span><br><span class=\"line\">  HttpHeaders headers = new HttpHeaders ();</span><br><span class=\"line\">  headers.add (&quot;Custom-Header&quot;, &quot;foo&quot;);</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;自定义头部&quot;, headers, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，ResponseEntity 还提供了两个嵌套的构建器接口：HeadersBuilder 和它的子接口 BodyBuilder。因此，我们可以通过 ResponseEntity 的静态方法访问它们的功能。</p>\n<p>最简单的情况是具有正文和 HTTP 200 响应码的响应：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/hello&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; hello() &#123;</span><br><span class=\"line\">  return ResponseEntity.ok (&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于最常见的 HTTP 状态码，我们得到静态方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BodyBuilder accepted();</span><br><span class=\"line\">BodyBuilder badRequest();</span><br><span class=\"line\">BodyBuilder created(java.net.URI location);</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; noContent();</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; notFound();</span><br><span class=\"line\">BodyBuilder ok();</span><br></pre></td></tr></table></figure>\n\n<p>另外，我们可以使用 BodyBuilder status(HttpStatus status) 和 BodyBuilder status(int status) 方法来设置任何 HTTP 状态。最后，使用 ResponseEntity BodyBuilder.body(T body) 我们可以设置 HTTP 响应正文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/age&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; age(@RequestParam (&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">  if (isInFuture (yearOfBirth)) &#123;</span><br><span class=\"line\">    return ResponseEntity.badRequest()</span><br><span class=\"line\">      .body(&quot;年份不正确&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return ResponseEntity.status(HttpStatus.OK)</span><br><span class=\"line\">    .body(&quot;你的年龄是 &quot; + calculateAge (yearOfBirth));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ResponseEntity替代方案\"><a href=\"#ResponseEntity替代方案\" class=\"headerlink\" title=\"ResponseEntity替代方案\"></a><strong>ResponseEntity替代方案</strong></h3><p>虽然ResponseEntity很强大，但我们不应该滥用它。在简单的情况下，有其他的选项可以满足我们的需求，而且它们会产生更清晰的代码。</p>\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a><strong>@ResponseBody</strong></h3><p>在传统的Spring MVC应用中，端点通常返回渲染的HTML页面。如果我们想要返回JSON或XML格式的数据，我们可以使用@ResponseBody注解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public String hello() &#123;</span><br><span class=\"line\">    return &quot;Hello World!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，Spring会自动将返回值转换为JSON或XML，并将其写入响应正文。</p>\n<p>我们也可以使用@ResponseStatus注解来设置响应状态码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/age&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">public String age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">    if (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;年份不正确&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &quot;你的年龄是&quot; + calculateAge(yearOfBirth);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们想要处理异常并返回不同的状态码，我们可以使用@ControllerAdvice和@ExceptionHandler注解：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">public class GlobalExceptionHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ExceptionHandler(IllegalArgumentException.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String handleIllegalArgumentException(IllegalArgumentException ex) &#123;</span><br><span class=\"line\">        return ex.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a><strong>@RestController</strong></h3><p>如果我们的控制器类只返回数据而不是视图，我们可以使用@RestController注解来替代@Controller注解。这样，我们就不需要在每个方法上添加@ResponseBody注解了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">    public String hello() &#123;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/age&quot;)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    public String age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">        if (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;年份不正确&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &quot;你的年龄是 &quot; + calculateAge(yearOfBirth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ResponseEntity-和-ResponseBody-的区别\"><a href=\"#ResponseEntity-和-ResponseBody-的区别\" class=\"headerlink\" title=\"ResponseEntity 和 @ResponseBody 的区别\"></a><strong>ResponseEntity 和 @ResponseBody 的区别</strong></h2><p>ResponseEntity 和 @ResponseBody 都是用于处理 HTTP 响应的，但是有一些不同点：</p>\n<ul>\n<li><strong>ResponseEntity</strong> 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。</li>\n<li><strong>@ResponseBody</strong> 是一个注解，它告诉 Spring 将返回值转换为 JSON 并写入到响应体中。我们可以在方法或类上使用它，Spring 会自动选择合适的转换器。</li>\n<li><strong>ResponseEntity</strong> 的优点是可以灵活地控制响应的各个方面，比如设置不同的状态码，标头和正文。它也可以用于一些特殊的场景，比如下载文件，需要设置 content-type 和特殊的状态（比如 206）。</li>\n<li><strong>@ResponseBody</strong> 的优点是可以简化代码，让方法直接返回 JSON 结果，不需要构造 ResponseEntity 对象。它也可以和 @ResponseStatus 注解配合使用，来设置响应状态码。</li>\n<li><strong>ResponseEntity 的优先级高于 @ResponseBody</strong>。如果返回值是 ResponseEntity 类型，那么 Spring 会直接使用它，不会检查有没有 @ResponseBody 注解。如果返回值不是 ResponseEntity 类型，那么 Spring 会检查有没有 @ResponseBody 注解，如果有就转换为 JSON。</li>\n</ul>\n<p>因此，我们可以根据不同的需求和场景选择使用 ResponseEntity 或者 @ResponseBody。</p>\n<p>对于大多数情况，我们可以使用 @ResponseBody 注解来直接返回 JSON 结果，或者使用 @ResponseStatus 注解来设置响应状态码。对于一些需要更多定制的情况，我们可以使用 ResponseEntity 来完全控制 HTTP 响应。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><strong>结语</strong></h3><p>这篇文章我们主要介绍了Spring ResponseEntity的原理、使用及其替代方案，并对比了ResponseEntity 和 @ResponseBody。</p>\n"},{"title":"Spring Web工具类","date":"2023-12-08T02:53:06.000Z","_content":"\n继承WebUtils类 \n\n```\npackage com.example.common.utils;\n\nimport com.xoao.sms.common.exception.BusinessErrorEnum;\nimport com.xoao.sms.common.exception.BusinessException;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.experimental.UtilityClass;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport org.springframework.web.method.HandlerMethod;\n\nimport java.util.Optional;\n\n/**\n * Miscellaneous utilities for web applications.\n *\n * @author \n */\n@Slf4j\n@UtilityClass\npublic class WebUtils extends org.springframework.web.util.WebUtils {\n\n\t/**\n\t * 判断是否ajax请求 spring ajax 返回含有 ResponseBody 或者 RestController注解\n\t * @param handlerMethod HandlerMethod\n\t * @return 是否ajax请求\n\t */\n\tpublic boolean isBody(HandlerMethod handlerMethod) {\n\t\tResponseBody responseBody = ClassUtils.getAnnotation(handlerMethod, ResponseBody.class);\n\t\treturn responseBody != null;\n\t}\n\n\t/**\n\t * 读取cookie\n\t * @param name cookie name\n\t * @return cookie value\n\t */\n\tpublic String getCookieVal(String name) {\n\t\tif (WebUtils.getRequest().isPresent()) {\n\t\t\treturn getCookieVal(WebUtils.getRequest().get(), name);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 读取cookie\n\t * @param request HttpServletRequest\n\t * @param name cookie name\n\t * @return cookie value\n\t */\n\tpublic String getCookieVal(HttpServletRequest request, String name) {\n\t\tCookie cookie = getCookie(request, name);\n\t\treturn cookie != null ? cookie.getValue() : null;\n\t}\n\n\t/**\n\t * 清除 某个指定的cookie\n\t * @param response HttpServletResponse\n\t * @param key cookie key\n\t */\n\tpublic void removeCookie(HttpServletResponse response, String key) {\n\t\tsetCookie(response, key, null, 0);\n\t}\n\n\t/**\n\t * 设置cookie\n\t * @param response HttpServletResponse\n\t * @param name cookie name\n\t * @param value cookie value\n\t * @param maxAgeInSeconds maxage\n\t */\n\tpublic void setCookie(HttpServletResponse response, String name, String value, int maxAgeInSeconds) {\n\t\tCookie cookie = new Cookie(name, value);\n\t\tcookie.setPath(\"/\");\n\t\tcookie.setMaxAge(maxAgeInSeconds);\n\t\tcookie.setHttpOnly(true);\n\t\tresponse.addCookie(cookie);\n\t}\n\n\t/**\n\t * 获取 HttpServletRequest\n\t * @return {HttpServletRequest}\n\t */\n\tpublic Optional<HttpServletRequest> getRequest() {\n\t\treturn Optional\n\t\t\t.ofNullable(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest());\n\t}\n\n\tpublic HttpServletRequest getRequestOrElseThrow() {\n\t\treturn WebUtils.getRequest().orElseThrow(() -> new BusinessException(BusinessErrorEnum.SYSTEM_ERROR));\n\t}\n\n\t/**\n\t * 获取 HttpServletResponse\n\t * @return {HttpServletResponse}\n\t */\n\tpublic HttpServletResponse getResponse() {\n\t\treturn ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();\n\t}\n\n}\n\n```\n\n类工具类\n\n```\npackage com.xoao.sms.common.utils;\n\nimport lombok.experimental.UtilityClass;\nimport org.springframework.core.BridgeMethodResolver;\nimport org.springframework.core.DefaultParameterNameDiscoverer;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.ParameterNameDiscoverer;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.core.annotation.SynthesizingMethodParameter;\nimport org.springframework.web.method.HandlerMethod;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\n/**\n * 类工具类\n */\n@UtilityClass\npublic class ClassUtils extends org.springframework.util.ClassUtils {\n\n\tprivate final ParameterNameDiscoverer PARAMETERNAMEDISCOVERER = new DefaultParameterNameDiscoverer();\n\n\t/**\n\t * 获取方法参数信息\n\t * @param constructor 构造器\n\t * @param parameterIndex 参数序号\n\t * @return {MethodParameter}\n\t */\n\tpublic MethodParameter getMethodParameter(Constructor<?> constructor, int parameterIndex) {\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(constructor, parameterIndex);\n\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);\n\t\treturn methodParameter;\n\t}\n\n\t/**\n\t * 获取方法参数信息\n\t * @param method 方法\n\t * @param parameterIndex 参数序号\n\t * @return {MethodParameter}\n\t */\n\tpublic MethodParameter getMethodParameter(Method method, int parameterIndex) {\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, parameterIndex);\n\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);\n\t\treturn methodParameter;\n\t}\n\n\t/**\n\t * 获取Annotation\n\t * @param method Method\n\t * @param annotationType 注解类\n\t * @param <A> 泛型标记\n\t * @return {Annotation}\n\t */\n\tpublic <A extends Annotation> A getAnnotation(Method method, Class<A> annotationType) {\n\t\tClass<?> targetClass = method.getDeclaringClass();\n\t\t// The method may be on an interface, but we need attributes from the target\n\t\t// class.\n\t\t// If the target class is null, the method will be unchanged.\n\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n\t\t// If we are dealing with method with generic parameters, find the original\n\t\t// method.\n\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n\t\t// 先找方法，再找方法上的类\n\t\tA annotation = AnnotatedElementUtils.findMergedAnnotation(specificMethod, annotationType);\n\t\t;\n\t\tif (null != annotation) {\n\t\t\treturn annotation;\n\t\t}\n\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), annotationType);\n\t}\n\n\t/**\n\t * 获取Annotation\n\t * @param handlerMethod HandlerMethod\n\t * @param annotationType 注解类\n\t * @param <A> 泛型标记\n\t * @return {Annotation}\n\t */\n\tpublic <A extends Annotation> A getAnnotation(HandlerMethod handlerMethod, Class<A> annotationType) {\n\t\t// 先找方法，再找方法上的类\n\t\tA annotation = handlerMethod.getMethodAnnotation(annotationType);\n\t\tif (null != annotation) {\n\t\t\treturn annotation;\n\t\t}\n\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类\n\t\tClass<?> beanType = handlerMethod.getBeanType();\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(beanType, annotationType);\n\t}\n\n}\n\n```\n\nSpring 上下文工具类\n\n```\npackage com.xoao.sms.common.utils;\n\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationEvent;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author \n * @date 2019/2/1 Spring 工具类\n */\n@Slf4j\n@Service\n@Lazy(false)\npublic class SpringContextHolder implements ApplicationContextAware, DisposableBean {\n\n\tprivate static ApplicationContext applicationContext = null;\n\n\t/**\n\t * 取得存储在静态变量中的ApplicationContext.\n\t */\n\tpublic static ApplicationContext getApplicationContext() {\n\t\treturn applicationContext;\n\t}\n\n\t/**\n\t * 实现ApplicationContextAware接口, 注入Context到静态变量中.\n\t */\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\tSpringContextHolder.applicationContext = applicationContext;\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getBean(String name) {\n\t\treturn (T) applicationContext.getBean(name);\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\tpublic static <T> T getBean(Class<T> requiredType) {\n\t\treturn applicationContext.getBean(requiredType);\n\t}\n\n\t/**\n\t * 清除SpringContextHolder中的ApplicationContext为Null.\n\t */\n\tpublic static void clearHolder() {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"清除SpringContextHolder中的ApplicationContext:\" + applicationContext);\n\t\t}\n\t\tapplicationContext = null;\n\t}\n\n\t/**\n\t * 发布事件\n\t * @param event\n\t */\n\tpublic static void publishEvent(ApplicationEvent event) {\n\t\tif (applicationContext == null) {\n\t\t\treturn;\n\t\t}\n\t\tapplicationContext.publishEvent(event);\n\t}\n\n\t/**\n\t * 实现DisposableBean接口, 在Context关闭时清理静态变量.\n\t */\n\t@Override\n\t@SneakyThrows\n\tpublic void destroy() {\n\t\tSpringContextHolder.clearHolder();\n\t}\n\n}\n```\n\n具体使用\n\n```\nHttpServletResponse response = WebUtils.getResponse();\n        response.setStatus(HttpStatus.HTTP_OK);\n        response.setContentType(ContentType.OCTET_STREAM.toString());\n        response.setHeader(HeaderName.CONTENT_DISPOSITION.getValue(), CharSequenceUtil\n                .format(\"attachment;filename=\\\"{}.txt\\\"\", new String(fileName.getBytes(), StandardCharsets.ISO_8859_1)));\n        // 读取文件并写入响应输出流，IoUtil是hutool工具包下的类\n        IoUtil.write(response.getOutputStream(), content.getBytes());\n```\n\n","source":"_posts/Spring-Web工具类.md","raw":"---\ntitle: Spring Web工具类\ndate: 2023-12-08 10:53:06\ntags: [Spring, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n继承WebUtils类 \n\n```\npackage com.example.common.utils;\n\nimport com.xoao.sms.common.exception.BusinessErrorEnum;\nimport com.xoao.sms.common.exception.BusinessException;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.experimental.UtilityClass;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport org.springframework.web.method.HandlerMethod;\n\nimport java.util.Optional;\n\n/**\n * Miscellaneous utilities for web applications.\n *\n * @author \n */\n@Slf4j\n@UtilityClass\npublic class WebUtils extends org.springframework.web.util.WebUtils {\n\n\t/**\n\t * 判断是否ajax请求 spring ajax 返回含有 ResponseBody 或者 RestController注解\n\t * @param handlerMethod HandlerMethod\n\t * @return 是否ajax请求\n\t */\n\tpublic boolean isBody(HandlerMethod handlerMethod) {\n\t\tResponseBody responseBody = ClassUtils.getAnnotation(handlerMethod, ResponseBody.class);\n\t\treturn responseBody != null;\n\t}\n\n\t/**\n\t * 读取cookie\n\t * @param name cookie name\n\t * @return cookie value\n\t */\n\tpublic String getCookieVal(String name) {\n\t\tif (WebUtils.getRequest().isPresent()) {\n\t\t\treturn getCookieVal(WebUtils.getRequest().get(), name);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 读取cookie\n\t * @param request HttpServletRequest\n\t * @param name cookie name\n\t * @return cookie value\n\t */\n\tpublic String getCookieVal(HttpServletRequest request, String name) {\n\t\tCookie cookie = getCookie(request, name);\n\t\treturn cookie != null ? cookie.getValue() : null;\n\t}\n\n\t/**\n\t * 清除 某个指定的cookie\n\t * @param response HttpServletResponse\n\t * @param key cookie key\n\t */\n\tpublic void removeCookie(HttpServletResponse response, String key) {\n\t\tsetCookie(response, key, null, 0);\n\t}\n\n\t/**\n\t * 设置cookie\n\t * @param response HttpServletResponse\n\t * @param name cookie name\n\t * @param value cookie value\n\t * @param maxAgeInSeconds maxage\n\t */\n\tpublic void setCookie(HttpServletResponse response, String name, String value, int maxAgeInSeconds) {\n\t\tCookie cookie = new Cookie(name, value);\n\t\tcookie.setPath(\"/\");\n\t\tcookie.setMaxAge(maxAgeInSeconds);\n\t\tcookie.setHttpOnly(true);\n\t\tresponse.addCookie(cookie);\n\t}\n\n\t/**\n\t * 获取 HttpServletRequest\n\t * @return {HttpServletRequest}\n\t */\n\tpublic Optional<HttpServletRequest> getRequest() {\n\t\treturn Optional\n\t\t\t.ofNullable(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest());\n\t}\n\n\tpublic HttpServletRequest getRequestOrElseThrow() {\n\t\treturn WebUtils.getRequest().orElseThrow(() -> new BusinessException(BusinessErrorEnum.SYSTEM_ERROR));\n\t}\n\n\t/**\n\t * 获取 HttpServletResponse\n\t * @return {HttpServletResponse}\n\t */\n\tpublic HttpServletResponse getResponse() {\n\t\treturn ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();\n\t}\n\n}\n\n```\n\n类工具类\n\n```\npackage com.xoao.sms.common.utils;\n\nimport lombok.experimental.UtilityClass;\nimport org.springframework.core.BridgeMethodResolver;\nimport org.springframework.core.DefaultParameterNameDiscoverer;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.ParameterNameDiscoverer;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.core.annotation.SynthesizingMethodParameter;\nimport org.springframework.web.method.HandlerMethod;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\n/**\n * 类工具类\n */\n@UtilityClass\npublic class ClassUtils extends org.springframework.util.ClassUtils {\n\n\tprivate final ParameterNameDiscoverer PARAMETERNAMEDISCOVERER = new DefaultParameterNameDiscoverer();\n\n\t/**\n\t * 获取方法参数信息\n\t * @param constructor 构造器\n\t * @param parameterIndex 参数序号\n\t * @return {MethodParameter}\n\t */\n\tpublic MethodParameter getMethodParameter(Constructor<?> constructor, int parameterIndex) {\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(constructor, parameterIndex);\n\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);\n\t\treturn methodParameter;\n\t}\n\n\t/**\n\t * 获取方法参数信息\n\t * @param method 方法\n\t * @param parameterIndex 参数序号\n\t * @return {MethodParameter}\n\t */\n\tpublic MethodParameter getMethodParameter(Method method, int parameterIndex) {\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, parameterIndex);\n\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);\n\t\treturn methodParameter;\n\t}\n\n\t/**\n\t * 获取Annotation\n\t * @param method Method\n\t * @param annotationType 注解类\n\t * @param <A> 泛型标记\n\t * @return {Annotation}\n\t */\n\tpublic <A extends Annotation> A getAnnotation(Method method, Class<A> annotationType) {\n\t\tClass<?> targetClass = method.getDeclaringClass();\n\t\t// The method may be on an interface, but we need attributes from the target\n\t\t// class.\n\t\t// If the target class is null, the method will be unchanged.\n\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n\t\t// If we are dealing with method with generic parameters, find the original\n\t\t// method.\n\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n\t\t// 先找方法，再找方法上的类\n\t\tA annotation = AnnotatedElementUtils.findMergedAnnotation(specificMethod, annotationType);\n\t\t;\n\t\tif (null != annotation) {\n\t\t\treturn annotation;\n\t\t}\n\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), annotationType);\n\t}\n\n\t/**\n\t * 获取Annotation\n\t * @param handlerMethod HandlerMethod\n\t * @param annotationType 注解类\n\t * @param <A> 泛型标记\n\t * @return {Annotation}\n\t */\n\tpublic <A extends Annotation> A getAnnotation(HandlerMethod handlerMethod, Class<A> annotationType) {\n\t\t// 先找方法，再找方法上的类\n\t\tA annotation = handlerMethod.getMethodAnnotation(annotationType);\n\t\tif (null != annotation) {\n\t\t\treturn annotation;\n\t\t}\n\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类\n\t\tClass<?> beanType = handlerMethod.getBeanType();\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(beanType, annotationType);\n\t}\n\n}\n\n```\n\nSpring 上下文工具类\n\n```\npackage com.xoao.sms.common.utils;\n\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationEvent;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author \n * @date 2019/2/1 Spring 工具类\n */\n@Slf4j\n@Service\n@Lazy(false)\npublic class SpringContextHolder implements ApplicationContextAware, DisposableBean {\n\n\tprivate static ApplicationContext applicationContext = null;\n\n\t/**\n\t * 取得存储在静态变量中的ApplicationContext.\n\t */\n\tpublic static ApplicationContext getApplicationContext() {\n\t\treturn applicationContext;\n\t}\n\n\t/**\n\t * 实现ApplicationContextAware接口, 注入Context到静态变量中.\n\t */\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\tSpringContextHolder.applicationContext = applicationContext;\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getBean(String name) {\n\t\treturn (T) applicationContext.getBean(name);\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\tpublic static <T> T getBean(Class<T> requiredType) {\n\t\treturn applicationContext.getBean(requiredType);\n\t}\n\n\t/**\n\t * 清除SpringContextHolder中的ApplicationContext为Null.\n\t */\n\tpublic static void clearHolder() {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"清除SpringContextHolder中的ApplicationContext:\" + applicationContext);\n\t\t}\n\t\tapplicationContext = null;\n\t}\n\n\t/**\n\t * 发布事件\n\t * @param event\n\t */\n\tpublic static void publishEvent(ApplicationEvent event) {\n\t\tif (applicationContext == null) {\n\t\t\treturn;\n\t\t}\n\t\tapplicationContext.publishEvent(event);\n\t}\n\n\t/**\n\t * 实现DisposableBean接口, 在Context关闭时清理静态变量.\n\t */\n\t@Override\n\t@SneakyThrows\n\tpublic void destroy() {\n\t\tSpringContextHolder.clearHolder();\n\t}\n\n}\n```\n\n具体使用\n\n```\nHttpServletResponse response = WebUtils.getResponse();\n        response.setStatus(HttpStatus.HTTP_OK);\n        response.setContentType(ContentType.OCTET_STREAM.toString());\n        response.setHeader(HeaderName.CONTENT_DISPOSITION.getValue(), CharSequenceUtil\n                .format(\"attachment;filename=\\\"{}.txt\\\"\", new String(fileName.getBytes(), StandardCharsets.ISO_8859_1)));\n        // 读取文件并写入响应输出流，IoUtil是hutool工具包下的类\n        IoUtil.write(response.getOutputStream(), content.getBytes());\n```\n\n","slug":"Spring-Web工具类","published":1,"updated":"2023-12-08T03:29:41.896Z","_id":"clpw1tc5x0000z0ap1wzr26vf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>继承WebUtils类 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xoao.sms.common.exception.BusinessErrorEnum;</span><br><span class=\"line\">import com.xoao.sms.common.exception.BusinessException;</span><br><span class=\"line\">import jakarta.servlet.http.Cookie;</span><br><span class=\"line\">import jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import lombok.experimental.UtilityClass;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Miscellaneous utilities for web applications.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author </span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@UtilityClass</span><br><span class=\"line\">public class WebUtils extends org.springframework.web.util.WebUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 判断是否ajax请求 spring ajax 返回含有 ResponseBody 或者 RestController注解</span><br><span class=\"line\">\t * @param handlerMethod HandlerMethod</span><br><span class=\"line\">\t * @return 是否ajax请求</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic boolean isBody(HandlerMethod handlerMethod) &#123;</span><br><span class=\"line\">\t\tResponseBody responseBody = ClassUtils.getAnnotation(handlerMethod, ResponseBody.class);</span><br><span class=\"line\">\t\treturn responseBody != null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 读取cookie</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @return cookie value</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic String getCookieVal(String name) &#123;</span><br><span class=\"line\">\t\tif (WebUtils.getRequest().isPresent()) &#123;</span><br><span class=\"line\">\t\t\treturn getCookieVal(WebUtils.getRequest().get(), name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 读取cookie</span><br><span class=\"line\">\t * @param request HttpServletRequest</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @return cookie value</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic String getCookieVal(HttpServletRequest request, String name) &#123;</span><br><span class=\"line\">\t\tCookie cookie = getCookie(request, name);</span><br><span class=\"line\">\t\treturn cookie != null ? cookie.getValue() : null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 清除 某个指定的cookie</span><br><span class=\"line\">\t * @param response HttpServletResponse</span><br><span class=\"line\">\t * @param key cookie key</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void removeCookie(HttpServletResponse response, String key) &#123;</span><br><span class=\"line\">\t\tsetCookie(response, key, null, 0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 设置cookie</span><br><span class=\"line\">\t * @param response HttpServletResponse</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @param value cookie value</span><br><span class=\"line\">\t * @param maxAgeInSeconds maxage</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void setCookie(HttpServletResponse response, String name, String value, int maxAgeInSeconds) &#123;</span><br><span class=\"line\">\t\tCookie cookie = new Cookie(name, value);</span><br><span class=\"line\">\t\tcookie.setPath(&quot;/&quot;);</span><br><span class=\"line\">\t\tcookie.setMaxAge(maxAgeInSeconds);</span><br><span class=\"line\">\t\tcookie.setHttpOnly(true);</span><br><span class=\"line\">\t\tresponse.addCookie(cookie);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 HttpServletRequest</span><br><span class=\"line\">\t * @return &#123;HttpServletRequest&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic Optional&lt;HttpServletRequest&gt; getRequest() &#123;</span><br><span class=\"line\">\t\treturn Optional</span><br><span class=\"line\">\t\t\t.ofNullable(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic HttpServletRequest getRequestOrElseThrow() &#123;</span><br><span class=\"line\">\t\treturn WebUtils.getRequest().orElseThrow(() -&gt; new BusinessException(BusinessErrorEnum.SYSTEM_ERROR));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 HttpServletResponse</span><br><span class=\"line\">\t * @return &#123;HttpServletResponse&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic HttpServletResponse getResponse() &#123;</span><br><span class=\"line\">\t\treturn ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>类工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xoao.sms.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.experimental.UtilityClass;</span><br><span class=\"line\">import org.springframework.core.BridgeMethodResolver;</span><br><span class=\"line\">import org.springframework.core.DefaultParameterNameDiscoverer;</span><br><span class=\"line\">import org.springframework.core.MethodParameter;</span><br><span class=\"line\">import org.springframework.core.ParameterNameDiscoverer;</span><br><span class=\"line\">import org.springframework.core.annotation.AnnotatedElementUtils;</span><br><span class=\"line\">import org.springframework.core.annotation.SynthesizingMethodParameter;</span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.lang.reflect.Constructor;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 类工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@UtilityClass</span><br><span class=\"line\">public class ClassUtils extends org.springframework.util.ClassUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final ParameterNameDiscoverer PARAMETERNAMEDISCOVERER = new DefaultParameterNameDiscoverer();</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取方法参数信息</span><br><span class=\"line\">\t * @param constructor 构造器</span><br><span class=\"line\">\t * @param parameterIndex 参数序号</span><br><span class=\"line\">\t * @return &#123;MethodParameter&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic MethodParameter getMethodParameter(Constructor&lt;?&gt; constructor, int parameterIndex) &#123;</span><br><span class=\"line\">\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(constructor, parameterIndex);</span><br><span class=\"line\">\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);</span><br><span class=\"line\">\t\treturn methodParameter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取方法参数信息</span><br><span class=\"line\">\t * @param method 方法</span><br><span class=\"line\">\t * @param parameterIndex 参数序号</span><br><span class=\"line\">\t * @return &#123;MethodParameter&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic MethodParameter getMethodParameter(Method method, int parameterIndex) &#123;</span><br><span class=\"line\">\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, parameterIndex);</span><br><span class=\"line\">\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);</span><br><span class=\"line\">\t\treturn methodParameter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取Annotation</span><br><span class=\"line\">\t * @param method Method</span><br><span class=\"line\">\t * @param annotationType 注解类</span><br><span class=\"line\">\t * @param &lt;A&gt; 泛型标记</span><br><span class=\"line\">\t * @return &#123;Annotation&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;A extends Annotation&gt; A getAnnotation(Method method, Class&lt;A&gt; annotationType) &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; targetClass = method.getDeclaringClass();</span><br><span class=\"line\">\t\t// The method may be on an interface, but we need attributes from the target</span><br><span class=\"line\">\t\t// class.</span><br><span class=\"line\">\t\t// If the target class is null, the method will be unchanged.</span><br><span class=\"line\">\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);</span><br><span class=\"line\">\t\t// If we are dealing with method with generic parameters, find the original</span><br><span class=\"line\">\t\t// method.</span><br><span class=\"line\">\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);</span><br><span class=\"line\">\t\t// 先找方法，再找方法上的类</span><br><span class=\"line\">\t\tA annotation = AnnotatedElementUtils.findMergedAnnotation(specificMethod, annotationType);</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t\tif (null != annotation) &#123;</span><br><span class=\"line\">\t\t\treturn annotation;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类</span><br><span class=\"line\">\t\treturn AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), annotationType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取Annotation</span><br><span class=\"line\">\t * @param handlerMethod HandlerMethod</span><br><span class=\"line\">\t * @param annotationType 注解类</span><br><span class=\"line\">\t * @param &lt;A&gt; 泛型标记</span><br><span class=\"line\">\t * @return &#123;Annotation&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;A extends Annotation&gt; A getAnnotation(HandlerMethod handlerMethod, Class&lt;A&gt; annotationType) &#123;</span><br><span class=\"line\">\t\t// 先找方法，再找方法上的类</span><br><span class=\"line\">\t\tA annotation = handlerMethod.getMethodAnnotation(annotationType);</span><br><span class=\"line\">\t\tif (null != annotation) &#123;</span><br><span class=\"line\">\t\t\treturn annotation;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类</span><br><span class=\"line\">\t\tClass&lt;?&gt; beanType = handlerMethod.getBeanType();</span><br><span class=\"line\">\t\treturn AnnotatedElementUtils.findMergedAnnotation(beanType, annotationType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Spring 上下文工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xoao.sms.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.SneakyThrows;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.DisposableBean;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.context.ApplicationEvent;</span><br><span class=\"line\">import org.springframework.context.annotation.Lazy;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author </span><br><span class=\"line\"> * @date 2019/2/1 Spring 工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Lazy(false)</span><br><span class=\"line\">public class SpringContextHolder implements ApplicationContextAware, DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static ApplicationContext applicationContext = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 取得存储在静态变量中的ApplicationContext.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">\t\treturn applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 实现ApplicationContextAware接口, 注入Context到静态变量中.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class=\"line\">\t\tSpringContextHolder.applicationContext = applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(String name) &#123;</span><br><span class=\"line\">\t\treturn (T) applicationContext.getBean(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) &#123;</span><br><span class=\"line\">\t\treturn applicationContext.getBean(requiredType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 清除SpringContextHolder中的ApplicationContext为Null.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void clearHolder() &#123;</span><br><span class=\"line\">\t\tif (log.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlog.debug(&quot;清除SpringContextHolder中的ApplicationContext:&quot; + applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tapplicationContext = null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 发布事件</span><br><span class=\"line\">\t * @param event</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void publishEvent(ApplicationEvent event) &#123;</span><br><span class=\"line\">\t\tif (applicationContext == null) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tapplicationContext.publishEvent(event);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 实现DisposableBean接口, 在Context关闭时清理静态变量.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\t@SneakyThrows</span><br><span class=\"line\">\tpublic void destroy() &#123;</span><br><span class=\"line\">\t\tSpringContextHolder.clearHolder();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletResponse response = WebUtils.getResponse();</span><br><span class=\"line\">        response.setStatus(HttpStatus.HTTP_OK);</span><br><span class=\"line\">        response.setContentType(ContentType.OCTET_STREAM.toString());</span><br><span class=\"line\">        response.setHeader(HeaderName.CONTENT_DISPOSITION.getValue(), CharSequenceUtil</span><br><span class=\"line\">                .format(&quot;attachment;filename=\\&quot;&#123;&#125;.txt\\&quot;&quot;, new String(fileName.getBytes(), StandardCharsets.ISO_8859_1)));</span><br><span class=\"line\">        // 读取文件并写入响应输出流，IoUtil是hutool工具包下的类</span><br><span class=\"line\">        IoUtil.write(response.getOutputStream(), content.getBytes());</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>继承WebUtils类 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xoao.sms.common.exception.BusinessErrorEnum;</span><br><span class=\"line\">import com.xoao.sms.common.exception.BusinessException;</span><br><span class=\"line\">import jakarta.servlet.http.Cookie;</span><br><span class=\"line\">import jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import lombok.experimental.UtilityClass;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Miscellaneous utilities for web applications.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author </span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@UtilityClass</span><br><span class=\"line\">public class WebUtils extends org.springframework.web.util.WebUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 判断是否ajax请求 spring ajax 返回含有 ResponseBody 或者 RestController注解</span><br><span class=\"line\">\t * @param handlerMethod HandlerMethod</span><br><span class=\"line\">\t * @return 是否ajax请求</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic boolean isBody(HandlerMethod handlerMethod) &#123;</span><br><span class=\"line\">\t\tResponseBody responseBody = ClassUtils.getAnnotation(handlerMethod, ResponseBody.class);</span><br><span class=\"line\">\t\treturn responseBody != null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 读取cookie</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @return cookie value</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic String getCookieVal(String name) &#123;</span><br><span class=\"line\">\t\tif (WebUtils.getRequest().isPresent()) &#123;</span><br><span class=\"line\">\t\t\treturn getCookieVal(WebUtils.getRequest().get(), name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 读取cookie</span><br><span class=\"line\">\t * @param request HttpServletRequest</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @return cookie value</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic String getCookieVal(HttpServletRequest request, String name) &#123;</span><br><span class=\"line\">\t\tCookie cookie = getCookie(request, name);</span><br><span class=\"line\">\t\treturn cookie != null ? cookie.getValue() : null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 清除 某个指定的cookie</span><br><span class=\"line\">\t * @param response HttpServletResponse</span><br><span class=\"line\">\t * @param key cookie key</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void removeCookie(HttpServletResponse response, String key) &#123;</span><br><span class=\"line\">\t\tsetCookie(response, key, null, 0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 设置cookie</span><br><span class=\"line\">\t * @param response HttpServletResponse</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @param value cookie value</span><br><span class=\"line\">\t * @param maxAgeInSeconds maxage</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void setCookie(HttpServletResponse response, String name, String value, int maxAgeInSeconds) &#123;</span><br><span class=\"line\">\t\tCookie cookie = new Cookie(name, value);</span><br><span class=\"line\">\t\tcookie.setPath(&quot;/&quot;);</span><br><span class=\"line\">\t\tcookie.setMaxAge(maxAgeInSeconds);</span><br><span class=\"line\">\t\tcookie.setHttpOnly(true);</span><br><span class=\"line\">\t\tresponse.addCookie(cookie);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 HttpServletRequest</span><br><span class=\"line\">\t * @return &#123;HttpServletRequest&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic Optional&lt;HttpServletRequest&gt; getRequest() &#123;</span><br><span class=\"line\">\t\treturn Optional</span><br><span class=\"line\">\t\t\t.ofNullable(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic HttpServletRequest getRequestOrElseThrow() &#123;</span><br><span class=\"line\">\t\treturn WebUtils.getRequest().orElseThrow(() -&gt; new BusinessException(BusinessErrorEnum.SYSTEM_ERROR));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 HttpServletResponse</span><br><span class=\"line\">\t * @return &#123;HttpServletResponse&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic HttpServletResponse getResponse() &#123;</span><br><span class=\"line\">\t\treturn ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>类工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xoao.sms.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.experimental.UtilityClass;</span><br><span class=\"line\">import org.springframework.core.BridgeMethodResolver;</span><br><span class=\"line\">import org.springframework.core.DefaultParameterNameDiscoverer;</span><br><span class=\"line\">import org.springframework.core.MethodParameter;</span><br><span class=\"line\">import org.springframework.core.ParameterNameDiscoverer;</span><br><span class=\"line\">import org.springframework.core.annotation.AnnotatedElementUtils;</span><br><span class=\"line\">import org.springframework.core.annotation.SynthesizingMethodParameter;</span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.lang.reflect.Constructor;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 类工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@UtilityClass</span><br><span class=\"line\">public class ClassUtils extends org.springframework.util.ClassUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final ParameterNameDiscoverer PARAMETERNAMEDISCOVERER = new DefaultParameterNameDiscoverer();</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取方法参数信息</span><br><span class=\"line\">\t * @param constructor 构造器</span><br><span class=\"line\">\t * @param parameterIndex 参数序号</span><br><span class=\"line\">\t * @return &#123;MethodParameter&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic MethodParameter getMethodParameter(Constructor&lt;?&gt; constructor, int parameterIndex) &#123;</span><br><span class=\"line\">\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(constructor, parameterIndex);</span><br><span class=\"line\">\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);</span><br><span class=\"line\">\t\treturn methodParameter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取方法参数信息</span><br><span class=\"line\">\t * @param method 方法</span><br><span class=\"line\">\t * @param parameterIndex 参数序号</span><br><span class=\"line\">\t * @return &#123;MethodParameter&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic MethodParameter getMethodParameter(Method method, int parameterIndex) &#123;</span><br><span class=\"line\">\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, parameterIndex);</span><br><span class=\"line\">\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);</span><br><span class=\"line\">\t\treturn methodParameter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取Annotation</span><br><span class=\"line\">\t * @param method Method</span><br><span class=\"line\">\t * @param annotationType 注解类</span><br><span class=\"line\">\t * @param &lt;A&gt; 泛型标记</span><br><span class=\"line\">\t * @return &#123;Annotation&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;A extends Annotation&gt; A getAnnotation(Method method, Class&lt;A&gt; annotationType) &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; targetClass = method.getDeclaringClass();</span><br><span class=\"line\">\t\t// The method may be on an interface, but we need attributes from the target</span><br><span class=\"line\">\t\t// class.</span><br><span class=\"line\">\t\t// If the target class is null, the method will be unchanged.</span><br><span class=\"line\">\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);</span><br><span class=\"line\">\t\t// If we are dealing with method with generic parameters, find the original</span><br><span class=\"line\">\t\t// method.</span><br><span class=\"line\">\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);</span><br><span class=\"line\">\t\t// 先找方法，再找方法上的类</span><br><span class=\"line\">\t\tA annotation = AnnotatedElementUtils.findMergedAnnotation(specificMethod, annotationType);</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t\tif (null != annotation) &#123;</span><br><span class=\"line\">\t\t\treturn annotation;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类</span><br><span class=\"line\">\t\treturn AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), annotationType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取Annotation</span><br><span class=\"line\">\t * @param handlerMethod HandlerMethod</span><br><span class=\"line\">\t * @param annotationType 注解类</span><br><span class=\"line\">\t * @param &lt;A&gt; 泛型标记</span><br><span class=\"line\">\t * @return &#123;Annotation&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;A extends Annotation&gt; A getAnnotation(HandlerMethod handlerMethod, Class&lt;A&gt; annotationType) &#123;</span><br><span class=\"line\">\t\t// 先找方法，再找方法上的类</span><br><span class=\"line\">\t\tA annotation = handlerMethod.getMethodAnnotation(annotationType);</span><br><span class=\"line\">\t\tif (null != annotation) &#123;</span><br><span class=\"line\">\t\t\treturn annotation;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类</span><br><span class=\"line\">\t\tClass&lt;?&gt; beanType = handlerMethod.getBeanType();</span><br><span class=\"line\">\t\treturn AnnotatedElementUtils.findMergedAnnotation(beanType, annotationType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Spring 上下文工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xoao.sms.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.SneakyThrows;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.DisposableBean;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.context.ApplicationEvent;</span><br><span class=\"line\">import org.springframework.context.annotation.Lazy;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author </span><br><span class=\"line\"> * @date 2019/2/1 Spring 工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Lazy(false)</span><br><span class=\"line\">public class SpringContextHolder implements ApplicationContextAware, DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static ApplicationContext applicationContext = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 取得存储在静态变量中的ApplicationContext.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">\t\treturn applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 实现ApplicationContextAware接口, 注入Context到静态变量中.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class=\"line\">\t\tSpringContextHolder.applicationContext = applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(String name) &#123;</span><br><span class=\"line\">\t\treturn (T) applicationContext.getBean(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) &#123;</span><br><span class=\"line\">\t\treturn applicationContext.getBean(requiredType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 清除SpringContextHolder中的ApplicationContext为Null.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void clearHolder() &#123;</span><br><span class=\"line\">\t\tif (log.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlog.debug(&quot;清除SpringContextHolder中的ApplicationContext:&quot; + applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tapplicationContext = null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 发布事件</span><br><span class=\"line\">\t * @param event</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void publishEvent(ApplicationEvent event) &#123;</span><br><span class=\"line\">\t\tif (applicationContext == null) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tapplicationContext.publishEvent(event);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 实现DisposableBean接口, 在Context关闭时清理静态变量.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\t@SneakyThrows</span><br><span class=\"line\">\tpublic void destroy() &#123;</span><br><span class=\"line\">\t\tSpringContextHolder.clearHolder();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletResponse response = WebUtils.getResponse();</span><br><span class=\"line\">        response.setStatus(HttpStatus.HTTP_OK);</span><br><span class=\"line\">        response.setContentType(ContentType.OCTET_STREAM.toString());</span><br><span class=\"line\">        response.setHeader(HeaderName.CONTENT_DISPOSITION.getValue(), CharSequenceUtil</span><br><span class=\"line\">                .format(&quot;attachment;filename=\\&quot;&#123;&#125;.txt\\&quot;&quot;, new String(fileName.getBytes(), StandardCharsets.ISO_8859_1)));</span><br><span class=\"line\">        // 读取文件并写入响应输出流，IoUtil是hutool工具包下的类</span><br><span class=\"line\">        IoUtil.write(response.getOutputStream(), content.getBytes());</span><br></pre></td></tr></table></figure>\n\n"},{"title":"hutool工具类","date":"2023-12-08T03:31:58.000Z","_content":"\nhutool涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作，包含以下组件：\n\n![image-20231208113511979](C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231208113511979.png)\n\n可以根据需求对每个模块单独引入，也可以通过引入`hutool-all`方式引入所有模块。\n\n[中文文档](https://www.hutool.cn/docs/#/)\n\n[api文档](https://apidoc.gitee.com/dromara/hutool/)\n\n","source":"_posts/hutool工具类.md","raw":"---\ntitle: hutool工具类\ndate: 2023-12-08 11:31:58\ntags: [hutool, JAVA, 工具类]\ncategories:\n- [技术, JAVA]\n---\n\nhutool涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作，包含以下组件：\n\n![image-20231208113511979](C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231208113511979.png)\n\n可以根据需求对每个模块单独引入，也可以通过引入`hutool-all`方式引入所有模块。\n\n[中文文档](https://www.hutool.cn/docs/#/)\n\n[api文档](https://apidoc.gitee.com/dromara/hutool/)\n\n","slug":"hutool工具类","published":1,"updated":"2023-12-08T03:42:21.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpw98x200000cgap906u46l1","content":"<p>hutool涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作，包含以下组件：</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231208113511979.png\" alt=\"image-20231208113511979\"></p>\n<p>可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块。</p>\n<p><a href=\"https://www.hutool.cn/docs/#/\">中文文档</a></p>\n<p><a href=\"https://apidoc.gitee.com/dromara/hutool/\">api文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>hutool涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作，包含以下组件：</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231208113511979.png\" alt=\"image-20231208113511979\"></p>\n<p>可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块。</p>\n<p><a href=\"https://www.hutool.cn/docs/#/\">中文文档</a></p>\n<p><a href=\"https://apidoc.gitee.com/dromara/hutool/\">api文档</a></p>\n"},{"title":"工具类常用","date":"2023-12-08T03:43:09.000Z","_content":"\n# 一.集合\n\n##### 1.判空\n\n```\norg.dromara.hutool.core.collection.CollUtil.isNotEmpty(CollectionName)\n```\n\n##### 2.去重\n\n```\norg.dromara.hutool.core.collection.CollUtil.distinc(CollectionName)\n```\n\n\n\n\n\n# 二.IO流\n\n##### 1.写入\n\n```\norg.dromara.hutool.core.io.IoUtil.write(OutputStream out, byte[] content)\n```\n\n##### 2.写出\n\n```\norg.dromara.hutool.core.io.IoUtil.read(InputStream in, Charset charset)\n```\n\n\n\n\n\n# 三.Bean对象\n\n##### 1.属性复制\n\n```\norg.dromara.hutool.core.bean.BeanUtil.copyProperties(Object source, Object target, String... ignoreProperties)\n```\n\n\n\n\n\n# 四.String字符串\n\n## Lang\n\n##### 1.map转String\n\n```\nMap<String, String> map = new HashMap<String, String>();\nmap.put(\"key1\", \"value1\");\nmap.put(\"key2\", \"value2\");\nmap.put(\"key3\", \"value3\");\nSystem.out.println(map.toString());\n```\n\n##### 2.字符串拼接\n\n1）使用StringBuild.append()方法拼接，然后使用StringBuild.toSting()转成String\n\n2）\n\n\n\n## hutool\n\n##### 1.Object转String\n\n```\nJSONUtil.toJsonStr(params)\n```\n\n##### 2.组装String，params替换{}\n\n```\nCharSequenceUtil.format(CharSequence template, Object... params)\n```\n\n\n\n## fastjson\n\n阿里巴巴的开源JSON解析库fastjson，和Json相关首先考虑此包\n\n##### 1.Java对象转换为json字符串，object可以是实体类、list和map \n\n```\nJSON.toJSONString(object); \n```\n\n##### 2.json字符串转换为实体类 \n\n```\nUser user2 = JSON.parseObject(jsonString, User.class); \n```\n\n##### 3.json字符串转换为list集合 \n\n```\nList<T> ts = (List<T>) JSON.parseArray(jsonString, T.class); \nList<JSONObject> list1 = JSON.parseObject(jsonlist, List.class); \n```\n\n##### 4.json字符串转换为map集合 \n\n```\nMap<JSONObject, JSONArray> map1 = JSON.parseObject(jsonmap,Map.class); \n```\n\n\n\n# 五.发送请求\n\n##### 1.发送get请求\n\n```\norg.dromara.hutool.http.HttpUtil.get(String urlString)\n```\n\n##### 2.发送post请求\n\n```\norg.dromara.hutool.http.HttpUtil.post(String urlString, String body)\n```\n\n##### 3.发送其他请求\n\n```\norg.dromara.hutool.http.HttpUtil.send(Request request)\n```\n\n","source":"_posts/工具类常用.md","raw":"---\ntitle: 工具类常用\ndate: 2023-12-08 11:43:09\ntags: [hutool, fastjson, JAVA, 工具类]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.集合\n\n##### 1.判空\n\n```\norg.dromara.hutool.core.collection.CollUtil.isNotEmpty(CollectionName)\n```\n\n##### 2.去重\n\n```\norg.dromara.hutool.core.collection.CollUtil.distinc(CollectionName)\n```\n\n\n\n\n\n# 二.IO流\n\n##### 1.写入\n\n```\norg.dromara.hutool.core.io.IoUtil.write(OutputStream out, byte[] content)\n```\n\n##### 2.写出\n\n```\norg.dromara.hutool.core.io.IoUtil.read(InputStream in, Charset charset)\n```\n\n\n\n\n\n# 三.Bean对象\n\n##### 1.属性复制\n\n```\norg.dromara.hutool.core.bean.BeanUtil.copyProperties(Object source, Object target, String... ignoreProperties)\n```\n\n\n\n\n\n# 四.String字符串\n\n## Lang\n\n##### 1.map转String\n\n```\nMap<String, String> map = new HashMap<String, String>();\nmap.put(\"key1\", \"value1\");\nmap.put(\"key2\", \"value2\");\nmap.put(\"key3\", \"value3\");\nSystem.out.println(map.toString());\n```\n\n##### 2.字符串拼接\n\n1）使用StringBuild.append()方法拼接，然后使用StringBuild.toSting()转成String\n\n2）\n\n\n\n## hutool\n\n##### 1.Object转String\n\n```\nJSONUtil.toJsonStr(params)\n```\n\n##### 2.组装String，params替换{}\n\n```\nCharSequenceUtil.format(CharSequence template, Object... params)\n```\n\n\n\n## fastjson\n\n阿里巴巴的开源JSON解析库fastjson，和Json相关首先考虑此包\n\n##### 1.Java对象转换为json字符串，object可以是实体类、list和map \n\n```\nJSON.toJSONString(object); \n```\n\n##### 2.json字符串转换为实体类 \n\n```\nUser user2 = JSON.parseObject(jsonString, User.class); \n```\n\n##### 3.json字符串转换为list集合 \n\n```\nList<T> ts = (List<T>) JSON.parseArray(jsonString, T.class); \nList<JSONObject> list1 = JSON.parseObject(jsonlist, List.class); \n```\n\n##### 4.json字符串转换为map集合 \n\n```\nMap<JSONObject, JSONArray> map1 = JSON.parseObject(jsonmap,Map.class); \n```\n\n\n\n# 五.发送请求\n\n##### 1.发送get请求\n\n```\norg.dromara.hutool.http.HttpUtil.get(String urlString)\n```\n\n##### 2.发送post请求\n\n```\norg.dromara.hutool.http.HttpUtil.post(String urlString, String body)\n```\n\n##### 3.发送其他请求\n\n```\norg.dromara.hutool.http.HttpUtil.send(Request request)\n```\n\n","slug":"工具类常用","published":1,"updated":"2023-12-08T06:37:20.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpw98x210001cgapd9yz3p87","content":"<h1 id=\"一-集合\"><a href=\"#一-集合\" class=\"headerlink\" title=\"一.集合\"></a>一.集合</h1><h5 id=\"1-判空\"><a href=\"#1-判空\" class=\"headerlink\" title=\"1.判空\"></a>1.判空</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.collection.CollUtil.isNotEmpty(CollectionName)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-去重\"><a href=\"#2-去重\" class=\"headerlink\" title=\"2.去重\"></a>2.去重</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.collection.CollUtil.distinc(CollectionName)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"二-IO流\"><a href=\"#二-IO流\" class=\"headerlink\" title=\"二.IO流\"></a>二.IO流</h1><h5 id=\"1-写入\"><a href=\"#1-写入\" class=\"headerlink\" title=\"1.写入\"></a>1.写入</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.io.IoUtil.write(OutputStream out, byte[] content)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-写出\"><a href=\"#2-写出\" class=\"headerlink\" title=\"2.写出\"></a>2.写出</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.io.IoUtil.read(InputStream in, Charset charset)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"三-Bean对象\"><a href=\"#三-Bean对象\" class=\"headerlink\" title=\"三.Bean对象\"></a>三.Bean对象</h1><h5 id=\"1-属性复制\"><a href=\"#1-属性复制\" class=\"headerlink\" title=\"1.属性复制\"></a>1.属性复制</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.bean.BeanUtil.copyProperties(Object source, Object target, String... ignoreProperties)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"四-String字符串\"><a href=\"#四-String字符串\" class=\"headerlink\" title=\"四.String字符串\"></a>四.String字符串</h1><h2 id=\"Lang\"><a href=\"#Lang\" class=\"headerlink\" title=\"Lang\"></a>Lang</h2><h5 id=\"1-map转String\"><a href=\"#1-map转String\" class=\"headerlink\" title=\"1.map转String\"></a>1.map转String</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class=\"line\">map.put(&quot;key2&quot;, &quot;value2&quot;);</span><br><span class=\"line\">map.put(&quot;key3&quot;, &quot;value3&quot;);</span><br><span class=\"line\">System.out.println(map.toString());</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-字符串拼接\"><a href=\"#2-字符串拼接\" class=\"headerlink\" title=\"2.字符串拼接\"></a>2.字符串拼接</h5><p>1）使用StringBuild.append()方法拼接，然后使用StringBuild.toSting()转成String</p>\n<p>2）</p>\n<h2 id=\"hutool\"><a href=\"#hutool\" class=\"headerlink\" title=\"hutool\"></a>hutool</h2><h5 id=\"1-Object转String\"><a href=\"#1-Object转String\" class=\"headerlink\" title=\"1.Object转String\"></a>1.Object转String</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONUtil.toJsonStr(params)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-组装String，params替换\"><a href=\"#2-组装String，params替换\" class=\"headerlink\" title=\"2.组装String，params替换{}\"></a>2.组装String，params替换{}</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CharSequenceUtil.format(CharSequence template, Object... params)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h2><p>阿里巴巴的开源JSON解析库fastjson，和Json相关首先考虑此包</p>\n<h5 id=\"1-Java对象转换为json字符串，object可以是实体类、list和map\"><a href=\"#1-Java对象转换为json字符串，object可以是实体类、list和map\" class=\"headerlink\" title=\"1.Java对象转换为json字符串，object可以是实体类、list和map\"></a>1.Java对象转换为json字符串，object可以是实体类、list和map</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.toJSONString(object); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-json字符串转换为实体类\"><a href=\"#2-json字符串转换为实体类\" class=\"headerlink\" title=\"2.json字符串转换为实体类\"></a>2.json字符串转换为实体类</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user2 = JSON.parseObject(jsonString, User.class); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-json字符串转换为list集合\"><a href=\"#3-json字符串转换为list集合\" class=\"headerlink\" title=\"3.json字符串转换为list集合\"></a>3.json字符串转换为list集合</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt; ts = (List&lt;T&gt;) JSON.parseArray(jsonString, T.class); </span><br><span class=\"line\">List&lt;JSONObject&gt; list1 = JSON.parseObject(jsonlist, List.class); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-json字符串转换为map集合\"><a href=\"#4-json字符串转换为map集合\" class=\"headerlink\" title=\"4.json字符串转换为map集合\"></a>4.json字符串转换为map集合</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;JSONObject, JSONArray&gt; map1 = JSON.parseObject(jsonmap,Map.class); </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"五-发送请求\"><a href=\"#五-发送请求\" class=\"headerlink\" title=\"五.发送请求\"></a>五.发送请求</h1><h5 id=\"1-发送get请求\"><a href=\"#1-发送get请求\" class=\"headerlink\" title=\"1.发送get请求\"></a>1.发送get请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.get(String urlString)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-发送post请求\"><a href=\"#2-发送post请求\" class=\"headerlink\" title=\"2.发送post请求\"></a>2.发送post请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.post(String urlString, String body)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-发送其他请求\"><a href=\"#3-发送其他请求\" class=\"headerlink\" title=\"3.发送其他请求\"></a>3.发送其他请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.send(Request request)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-集合\"><a href=\"#一-集合\" class=\"headerlink\" title=\"一.集合\"></a>一.集合</h1><h5 id=\"1-判空\"><a href=\"#1-判空\" class=\"headerlink\" title=\"1.判空\"></a>1.判空</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.collection.CollUtil.isNotEmpty(CollectionName)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-去重\"><a href=\"#2-去重\" class=\"headerlink\" title=\"2.去重\"></a>2.去重</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.collection.CollUtil.distinc(CollectionName)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"二-IO流\"><a href=\"#二-IO流\" class=\"headerlink\" title=\"二.IO流\"></a>二.IO流</h1><h5 id=\"1-写入\"><a href=\"#1-写入\" class=\"headerlink\" title=\"1.写入\"></a>1.写入</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.io.IoUtil.write(OutputStream out, byte[] content)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-写出\"><a href=\"#2-写出\" class=\"headerlink\" title=\"2.写出\"></a>2.写出</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.io.IoUtil.read(InputStream in, Charset charset)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"三-Bean对象\"><a href=\"#三-Bean对象\" class=\"headerlink\" title=\"三.Bean对象\"></a>三.Bean对象</h1><h5 id=\"1-属性复制\"><a href=\"#1-属性复制\" class=\"headerlink\" title=\"1.属性复制\"></a>1.属性复制</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.bean.BeanUtil.copyProperties(Object source, Object target, String... ignoreProperties)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"四-String字符串\"><a href=\"#四-String字符串\" class=\"headerlink\" title=\"四.String字符串\"></a>四.String字符串</h1><h2 id=\"Lang\"><a href=\"#Lang\" class=\"headerlink\" title=\"Lang\"></a>Lang</h2><h5 id=\"1-map转String\"><a href=\"#1-map转String\" class=\"headerlink\" title=\"1.map转String\"></a>1.map转String</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class=\"line\">map.put(&quot;key2&quot;, &quot;value2&quot;);</span><br><span class=\"line\">map.put(&quot;key3&quot;, &quot;value3&quot;);</span><br><span class=\"line\">System.out.println(map.toString());</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-字符串拼接\"><a href=\"#2-字符串拼接\" class=\"headerlink\" title=\"2.字符串拼接\"></a>2.字符串拼接</h5><p>1）使用StringBuild.append()方法拼接，然后使用StringBuild.toSting()转成String</p>\n<p>2）</p>\n<h2 id=\"hutool\"><a href=\"#hutool\" class=\"headerlink\" title=\"hutool\"></a>hutool</h2><h5 id=\"1-Object转String\"><a href=\"#1-Object转String\" class=\"headerlink\" title=\"1.Object转String\"></a>1.Object转String</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONUtil.toJsonStr(params)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-组装String，params替换\"><a href=\"#2-组装String，params替换\" class=\"headerlink\" title=\"2.组装String，params替换{}\"></a>2.组装String，params替换{}</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CharSequenceUtil.format(CharSequence template, Object... params)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h2><p>阿里巴巴的开源JSON解析库fastjson，和Json相关首先考虑此包</p>\n<h5 id=\"1-Java对象转换为json字符串，object可以是实体类、list和map\"><a href=\"#1-Java对象转换为json字符串，object可以是实体类、list和map\" class=\"headerlink\" title=\"1.Java对象转换为json字符串，object可以是实体类、list和map\"></a>1.Java对象转换为json字符串，object可以是实体类、list和map</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.toJSONString(object); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-json字符串转换为实体类\"><a href=\"#2-json字符串转换为实体类\" class=\"headerlink\" title=\"2.json字符串转换为实体类\"></a>2.json字符串转换为实体类</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user2 = JSON.parseObject(jsonString, User.class); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-json字符串转换为list集合\"><a href=\"#3-json字符串转换为list集合\" class=\"headerlink\" title=\"3.json字符串转换为list集合\"></a>3.json字符串转换为list集合</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt; ts = (List&lt;T&gt;) JSON.parseArray(jsonString, T.class); </span><br><span class=\"line\">List&lt;JSONObject&gt; list1 = JSON.parseObject(jsonlist, List.class); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-json字符串转换为map集合\"><a href=\"#4-json字符串转换为map集合\" class=\"headerlink\" title=\"4.json字符串转换为map集合\"></a>4.json字符串转换为map集合</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;JSONObject, JSONArray&gt; map1 = JSON.parseObject(jsonmap,Map.class); </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"五-发送请求\"><a href=\"#五-发送请求\" class=\"headerlink\" title=\"五.发送请求\"></a>五.发送请求</h1><h5 id=\"1-发送get请求\"><a href=\"#1-发送get请求\" class=\"headerlink\" title=\"1.发送get请求\"></a>1.发送get请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.get(String urlString)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-发送post请求\"><a href=\"#2-发送post请求\" class=\"headerlink\" title=\"2.发送post请求\"></a>2.发送post请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.post(String urlString, String body)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-发送其他请求\"><a href=\"#3-发送其他请求\" class=\"headerlink\" title=\"3.发送其他请求\"></a>3.发送其他请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.send(Request request)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"maven初级","date":"2023-12-08T06:39:27.000Z","_content":"\n# 一.概述\n\nmaven的两大功能，依赖管理和构建项目\n\n\n\n# 二.依赖管理\n\n## 1.仓库\n\n- 本地仓库：在setting.xml文件配置的，本机存放依赖的仓库\n- 私服：公司搭建的局域网仓库，包含中央仓库+私有\n- 远程仓库：中央仓库，由maven 官方管理，具体地址在setting.xml文件中配置\n\n依赖的获取顺序，本地仓库 -》私服 -》 远程仓库\n\n## 2.坐标\n\n```\n<dependency>\n       <groupId>组织名</groupId>\n       <artifactId>模块名</artifactId>\n       <version>版本号</version>\n</dependency>\n```\n\n## 3.依赖传递\n\n### 1）原则\n\n项目引用时，依赖也被引用\n\n### 2）依赖传递\n\n![image-20231208145517446](C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231208145517446.png)\n\n### 3）解决依赖冲突\n\n总原则：不是我用的就调\n\n#### （1）scope标签\n\n1.设定依赖使用范围，范围包括：\n\n- 主程序范围内有效（main文件夹范围内）\n- 测试程序范围内有效（test文件夹范围内）\n- 是否参与打包（pacakage指令范围内）\n\n|     scope     | 主代码 | 测试代码 | 打包 |    示例     |\n| :-----------: | :----: | :------: | :--: | :---------: |\n| compile(默认) |   Y    |    Y     |  Y   |    log4j    |\n|     test      |        |    Y     |      |    junit    |\n|   provided    |   Y    |    Y     |      | servlet_api |\n|    runtime    |        |          |  Y   |    jdbc     |\n\n2.依赖范围传递\n\n| 横轴是直接依赖，纵轴是简介依赖 | compile | test | provided | runtime |\n| ------------------------------ | ------- | ---- | -------- | ------- |\n| compile                        | compile | test | provided | runtime |\n| test                           |         |      |          |         |\n| provided                       |         |      |          |         |\n| runtime                        | runtime | test | provided | runtime |\n\n3.示例\n\n```\n<dependency>\n      <groupId>org.dromara.hutool</groupId>\n      <artifactId>hutool-bom</artifactId>\n      <version>${hutool.version}</version>\n      <scope>import</scope>\n</dependency>\n```\n\n#### （2）exclude标签\n\n在引用项目使用，主动断开被引用项目\n\n## 二.项目构建\n\n根据插件来实现对项目生命周期的操作\n\n- mvn compile 编译\n- mvn clean 清理\n- mvn test 测试\n- mvn package 打包\n- mvn install 安装到本地仓库\n- mvn depoly 部署到私服\n\n插件从上至下执行，和生命周期相关\n\n除了生命周期插件，在pom文件中还可以引入其他插件，比如maven打包插件，tomcat插件等\n","source":"_posts/maven初级.md","raw":"---\ntitle: maven初级\ndate: 2023-12-08 14:39:27\ntags: [maven, JAVA, 项目管理]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.概述\n\nmaven的两大功能，依赖管理和构建项目\n\n\n\n# 二.依赖管理\n\n## 1.仓库\n\n- 本地仓库：在setting.xml文件配置的，本机存放依赖的仓库\n- 私服：公司搭建的局域网仓库，包含中央仓库+私有\n- 远程仓库：中央仓库，由maven 官方管理，具体地址在setting.xml文件中配置\n\n依赖的获取顺序，本地仓库 -》私服 -》 远程仓库\n\n## 2.坐标\n\n```\n<dependency>\n       <groupId>组织名</groupId>\n       <artifactId>模块名</artifactId>\n       <version>版本号</version>\n</dependency>\n```\n\n## 3.依赖传递\n\n### 1）原则\n\n项目引用时，依赖也被引用\n\n### 2）依赖传递\n\n![image-20231208145517446](C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231208145517446.png)\n\n### 3）解决依赖冲突\n\n总原则：不是我用的就调\n\n#### （1）scope标签\n\n1.设定依赖使用范围，范围包括：\n\n- 主程序范围内有效（main文件夹范围内）\n- 测试程序范围内有效（test文件夹范围内）\n- 是否参与打包（pacakage指令范围内）\n\n|     scope     | 主代码 | 测试代码 | 打包 |    示例     |\n| :-----------: | :----: | :------: | :--: | :---------: |\n| compile(默认) |   Y    |    Y     |  Y   |    log4j    |\n|     test      |        |    Y     |      |    junit    |\n|   provided    |   Y    |    Y     |      | servlet_api |\n|    runtime    |        |          |  Y   |    jdbc     |\n\n2.依赖范围传递\n\n| 横轴是直接依赖，纵轴是简介依赖 | compile | test | provided | runtime |\n| ------------------------------ | ------- | ---- | -------- | ------- |\n| compile                        | compile | test | provided | runtime |\n| test                           |         |      |          |         |\n| provided                       |         |      |          |         |\n| runtime                        | runtime | test | provided | runtime |\n\n3.示例\n\n```\n<dependency>\n      <groupId>org.dromara.hutool</groupId>\n      <artifactId>hutool-bom</artifactId>\n      <version>${hutool.version}</version>\n      <scope>import</scope>\n</dependency>\n```\n\n#### （2）exclude标签\n\n在引用项目使用，主动断开被引用项目\n\n## 二.项目构建\n\n根据插件来实现对项目生命周期的操作\n\n- mvn compile 编译\n- mvn clean 清理\n- mvn test 测试\n- mvn package 打包\n- mvn install 安装到本地仓库\n- mvn depoly 部署到私服\n\n插件从上至下执行，和生命周期相关\n\n除了生命周期插件，在pom文件中还可以引入其他插件，比如maven打包插件，tomcat插件等\n","slug":"maven初级","published":1,"updated":"2023-12-08T07:36:21.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpwbvwjb0000uoap026o93hz","content":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一.概述\"></a>一.概述</h1><p>maven的两大功能，依赖管理和构建项目</p>\n<h1 id=\"二-依赖管理\"><a href=\"#二-依赖管理\" class=\"headerlink\" title=\"二.依赖管理\"></a>二.依赖管理</h1><h2 id=\"1-仓库\"><a href=\"#1-仓库\" class=\"headerlink\" title=\"1.仓库\"></a>1.仓库</h2><ul>\n<li>本地仓库：在setting.xml文件配置的，本机存放依赖的仓库</li>\n<li>私服：公司搭建的局域网仓库，包含中央仓库+私有</li>\n<li>远程仓库：中央仓库，由maven 官方管理，具体地址在setting.xml文件中配置</li>\n</ul>\n<p>依赖的获取顺序，本地仓库 -》私服 -》 远程仓库</p>\n<h2 id=\"2-坐标\"><a href=\"#2-坐标\" class=\"headerlink\" title=\"2.坐标\"></a>2.坐标</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">       &lt;groupId&gt;组织名&lt;/groupId&gt;</span><br><span class=\"line\">       &lt;artifactId&gt;模块名&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;version&gt;版本号&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-依赖传递\"><a href=\"#3-依赖传递\" class=\"headerlink\" title=\"3.依赖传递\"></a>3.依赖传递</h2><h3 id=\"1）原则\"><a href=\"#1）原则\" class=\"headerlink\" title=\"1）原则\"></a>1）原则</h3><p>项目引用时，依赖也被引用</p>\n<h3 id=\"2）依赖传递\"><a href=\"#2）依赖传递\" class=\"headerlink\" title=\"2）依赖传递\"></a>2）依赖传递</h3><p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231208145517446.png\" alt=\"image-20231208145517446\"></p>\n<h3 id=\"3）解决依赖冲突\"><a href=\"#3）解决依赖冲突\" class=\"headerlink\" title=\"3）解决依赖冲突\"></a>3）解决依赖冲突</h3><p>总原则：不是我用的就调</p>\n<h4 id=\"（1）scope标签\"><a href=\"#（1）scope标签\" class=\"headerlink\" title=\"（1）scope标签\"></a>（1）scope标签</h4><p>1.设定依赖使用范围，范围包括：</p>\n<ul>\n<li>主程序范围内有效（main文件夹范围内）</li>\n<li>测试程序范围内有效（test文件夹范围内）</li>\n<li>是否参与打包（pacakage指令范围内）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">scope</th>\n<th align=\"center\">主代码</th>\n<th align=\"center\">测试代码</th>\n<th align=\"center\">打包</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">compile(默认)</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">log4j</td>\n</tr>\n<tr>\n<td align=\"center\">test</td>\n<td align=\"center\"></td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n<td align=\"center\">junit</td>\n</tr>\n<tr>\n<td align=\"center\">provided</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n<td align=\"center\">servlet_api</td>\n</tr>\n<tr>\n<td align=\"center\">runtime</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Y</td>\n<td align=\"center\">jdbc</td>\n</tr>\n</tbody></table>\n<p>2.依赖范围传递</p>\n<table>\n<thead>\n<tr>\n<th>横轴是直接依赖，纵轴是简介依赖</th>\n<th>compile</th>\n<th>test</th>\n<th>provided</th>\n<th>runtime</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile</td>\n<td>compile</td>\n<td>test</td>\n<td>provided</td>\n<td>runtime</td>\n</tr>\n<tr>\n<td>test</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>provided</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>runtime</td>\n<td>runtime</td>\n<td>test</td>\n<td>provided</td>\n<td>runtime</td>\n</tr>\n</tbody></table>\n<p>3.示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.dromara.hutool&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;hutool-bom&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;$&#123;hutool.version&#125;&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）exclude标签\"><a href=\"#（2）exclude标签\" class=\"headerlink\" title=\"（2）exclude标签\"></a>（2）exclude标签</h4><p>在引用项目使用，主动断开被引用项目</p>\n<h2 id=\"二-项目构建\"><a href=\"#二-项目构建\" class=\"headerlink\" title=\"二.项目构建\"></a>二.项目构建</h2><p>根据插件来实现对项目生命周期的操作</p>\n<ul>\n<li>mvn compile 编译</li>\n<li>mvn clean 清理</li>\n<li>mvn test 测试</li>\n<li>mvn package 打包</li>\n<li>mvn install 安装到本地仓库</li>\n<li>mvn depoly 部署到私服</li>\n</ul>\n<p>插件从上至下执行，和生命周期相关</p>\n<p>除了生命周期插件，在pom文件中还可以引入其他插件，比如maven打包插件，tomcat插件等</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一.概述\"></a>一.概述</h1><p>maven的两大功能，依赖管理和构建项目</p>\n<h1 id=\"二-依赖管理\"><a href=\"#二-依赖管理\" class=\"headerlink\" title=\"二.依赖管理\"></a>二.依赖管理</h1><h2 id=\"1-仓库\"><a href=\"#1-仓库\" class=\"headerlink\" title=\"1.仓库\"></a>1.仓库</h2><ul>\n<li>本地仓库：在setting.xml文件配置的，本机存放依赖的仓库</li>\n<li>私服：公司搭建的局域网仓库，包含中央仓库+私有</li>\n<li>远程仓库：中央仓库，由maven 官方管理，具体地址在setting.xml文件中配置</li>\n</ul>\n<p>依赖的获取顺序，本地仓库 -》私服 -》 远程仓库</p>\n<h2 id=\"2-坐标\"><a href=\"#2-坐标\" class=\"headerlink\" title=\"2.坐标\"></a>2.坐标</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">       &lt;groupId&gt;组织名&lt;/groupId&gt;</span><br><span class=\"line\">       &lt;artifactId&gt;模块名&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;version&gt;版本号&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-依赖传递\"><a href=\"#3-依赖传递\" class=\"headerlink\" title=\"3.依赖传递\"></a>3.依赖传递</h2><h3 id=\"1）原则\"><a href=\"#1）原则\" class=\"headerlink\" title=\"1）原则\"></a>1）原则</h3><p>项目引用时，依赖也被引用</p>\n<h3 id=\"2）依赖传递\"><a href=\"#2）依赖传递\" class=\"headerlink\" title=\"2）依赖传递\"></a>2）依赖传递</h3><p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231208145517446.png\" alt=\"image-20231208145517446\"></p>\n<h3 id=\"3）解决依赖冲突\"><a href=\"#3）解决依赖冲突\" class=\"headerlink\" title=\"3）解决依赖冲突\"></a>3）解决依赖冲突</h3><p>总原则：不是我用的就调</p>\n<h4 id=\"（1）scope标签\"><a href=\"#（1）scope标签\" class=\"headerlink\" title=\"（1）scope标签\"></a>（1）scope标签</h4><p>1.设定依赖使用范围，范围包括：</p>\n<ul>\n<li>主程序范围内有效（main文件夹范围内）</li>\n<li>测试程序范围内有效（test文件夹范围内）</li>\n<li>是否参与打包（pacakage指令范围内）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">scope</th>\n<th align=\"center\">主代码</th>\n<th align=\"center\">测试代码</th>\n<th align=\"center\">打包</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">compile(默认)</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">log4j</td>\n</tr>\n<tr>\n<td align=\"center\">test</td>\n<td align=\"center\"></td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n<td align=\"center\">junit</td>\n</tr>\n<tr>\n<td align=\"center\">provided</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n<td align=\"center\">servlet_api</td>\n</tr>\n<tr>\n<td align=\"center\">runtime</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Y</td>\n<td align=\"center\">jdbc</td>\n</tr>\n</tbody></table>\n<p>2.依赖范围传递</p>\n<table>\n<thead>\n<tr>\n<th>横轴是直接依赖，纵轴是简介依赖</th>\n<th>compile</th>\n<th>test</th>\n<th>provided</th>\n<th>runtime</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile</td>\n<td>compile</td>\n<td>test</td>\n<td>provided</td>\n<td>runtime</td>\n</tr>\n<tr>\n<td>test</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>provided</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>runtime</td>\n<td>runtime</td>\n<td>test</td>\n<td>provided</td>\n<td>runtime</td>\n</tr>\n</tbody></table>\n<p>3.示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.dromara.hutool&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;hutool-bom&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;$&#123;hutool.version&#125;&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）exclude标签\"><a href=\"#（2）exclude标签\" class=\"headerlink\" title=\"（2）exclude标签\"></a>（2）exclude标签</h4><p>在引用项目使用，主动断开被引用项目</p>\n<h2 id=\"二-项目构建\"><a href=\"#二-项目构建\" class=\"headerlink\" title=\"二.项目构建\"></a>二.项目构建</h2><p>根据插件来实现对项目生命周期的操作</p>\n<ul>\n<li>mvn compile 编译</li>\n<li>mvn clean 清理</li>\n<li>mvn test 测试</li>\n<li>mvn package 打包</li>\n<li>mvn install 安装到本地仓库</li>\n<li>mvn depoly 部署到私服</li>\n</ul>\n<p>插件从上至下执行，和生命周期相关</p>\n<p>除了生命周期插件，在pom文件中还可以引入其他插件，比如maven打包插件，tomcat插件等</p>\n"},{"title":"请求头信息","date":"2023-12-08T07:48:01.000Z","_content":"","source":"_posts/请求头信息.md","raw":"---\ntitle: 请求头信息\ndate: 2023-12-08 15:48:01\ntags: [请求头, request, 前端]\ncategories:\n- [技术, 前端]\n---\n","slug":"请求头信息","published":1,"updated":"2023-12-08T07:51:09.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpwbvwjf0001uoaphfhybpfv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"maven高级","date":"2023-12-08T07:36:09.000Z","_content":"\n1. 当某个项目被修改时，他的私服并未修改，其他项目不能使用\n\n   聚合：为所有模块添加父模块，统一管理，同时编译，同时部署，父模块仅作为项目管理用\n\n2. 当项目之间依赖版本出现冲突时\n\n    继承：在父模块中加入版本，子模块直接引用\n\n3. 如何添加版本\n\n   通过自定义属性标签\n\n   ```\n   <properties>\n       <自定义属性名>属性值</自定义属性名>\n   </properties>\n   ```\n\n   在pom文件中，还可以获取以下属性：\n\n   - 自定义属性\n   - maven内置属性\n   - setting文件夹中的属性\n   - Java系统属性\n   - 环境变量属性\n\n4. 资源配置\n\n   ```\n   <resources>\n         引入配置文件信息\n   </resources>\n   ```\n\n5. 版本管理\n\n   - snapshot 快照版本\n   - release 发布版本\n\n​      \n\n   \n","source":"_posts/maven高级.md","raw":"---\ntitle: maven高级\ndate: 2023-12-08 15:36:09\ntags: [maven, JAVA, 项目管理]\ncategories:\n- [技术, JAVA]\n---\n\n1. 当某个项目被修改时，他的私服并未修改，其他项目不能使用\n\n   聚合：为所有模块添加父模块，统一管理，同时编译，同时部署，父模块仅作为项目管理用\n\n2. 当项目之间依赖版本出现冲突时\n\n    继承：在父模块中加入版本，子模块直接引用\n\n3. 如何添加版本\n\n   通过自定义属性标签\n\n   ```\n   <properties>\n       <自定义属性名>属性值</自定义属性名>\n   </properties>\n   ```\n\n   在pom文件中，还可以获取以下属性：\n\n   - 自定义属性\n   - maven内置属性\n   - setting文件夹中的属性\n   - Java系统属性\n   - 环境变量属性\n\n4. 资源配置\n\n   ```\n   <resources>\n         引入配置文件信息\n   </resources>\n   ```\n\n5. 版本管理\n\n   - snapshot 快照版本\n   - release 发布版本\n\n​      \n\n   \n","slug":"maven高级","published":1,"updated":"2023-12-08T07:47:38.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpwbvwji0003uoapg7qt5b1i","content":"<ol>\n<li><p>当某个项目被修改时，他的私服并未修改，其他项目不能使用</p>\n<p>聚合：为所有模块添加父模块，统一管理，同时编译，同时部署，父模块仅作为项目管理用</p>\n</li>\n<li><p>当项目之间依赖版本出现冲突时</p>\n<p> 继承：在父模块中加入版本，子模块直接引用</p>\n</li>\n<li><p>如何添加版本</p>\n<p>通过自定义属性标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;自定义属性名&gt;属性值&lt;/自定义属性名&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在pom文件中，还可以获取以下属性：</p>\n<ul>\n<li>自定义属性</li>\n<li>maven内置属性</li>\n<li>setting文件夹中的属性</li>\n<li>Java系统属性</li>\n<li>环境变量属性</li>\n</ul>\n</li>\n<li><p>资源配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">      引入配置文件信息</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本管理</p>\n<ul>\n<li>snapshot 快照版本</li>\n<li>release 发布版本</li>\n</ul>\n</li>\n</ol>\n<p>​      </p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>当某个项目被修改时，他的私服并未修改，其他项目不能使用</p>\n<p>聚合：为所有模块添加父模块，统一管理，同时编译，同时部署，父模块仅作为项目管理用</p>\n</li>\n<li><p>当项目之间依赖版本出现冲突时</p>\n<p> 继承：在父模块中加入版本，子模块直接引用</p>\n</li>\n<li><p>如何添加版本</p>\n<p>通过自定义属性标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;自定义属性名&gt;属性值&lt;/自定义属性名&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在pom文件中，还可以获取以下属性：</p>\n<ul>\n<li>自定义属性</li>\n<li>maven内置属性</li>\n<li>setting文件夹中的属性</li>\n<li>Java系统属性</li>\n<li>环境变量属性</li>\n</ul>\n</li>\n<li><p>资源配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">      引入配置文件信息</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本管理</p>\n<ul>\n<li>snapshot 快照版本</li>\n<li>release 发布版本</li>\n</ul>\n</li>\n</ol>\n<p>​      </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clpw15s53000148apc27tb714","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpw28zfd0005rgap52xkhtpy"},{"post_id":"clpw1tc5x0000z0ap1wzr26vf","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpw295m70007rgapenal7v4h"},{"post_id":"clpw1tc5x0000z0ap1wzr26vf","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpw2jb330005x0apgkya2223"},{"post_id":"clpw15s53000148apc27tb714","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpw2kf770006x0ap55r2h2i0"},{"post_id":"clpw98x200000cgap906u46l1","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpw98x240004cgapar2s3wf0"},{"post_id":"clpw98x200000cgap906u46l1","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpw98x270005cgapasuog6t5"},{"post_id":"clpw98x210001cgapd9yz3p87","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpw98x270006cgaph9ba9uas"},{"post_id":"clpw98x210001cgapd9yz3p87","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpw98x2d0009cgapas9m6b3x"},{"post_id":"clpwbvwjb0000uoap026o93hz","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpwbvwjk0006uoap6zno1525"},{"post_id":"clpwbvwjb0000uoap026o93hz","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpwbvwjk0007uoaphbw90sfj"},{"post_id":"clpwbvwji0003uoapg7qt5b1i","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpwbvwjl0008uoaphh568cvx"},{"post_id":"clpwbvwji0003uoapg7qt5b1i","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpwbvwjl000buoap9lqgfx3q"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpwbvwjl000duoap9eu96l96"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","category_id":"clpwbvwjj0004uoapcx0qgsqw","_id":"clpwbvwjm000guoapd4b1glmw"}],"PostTag":[{"post_id":"clpv5xn740000z4ap9ye6a2nm","tag_id":"clpv5xn790001z4ap2zh5fvmh","_id":"clpv5xn7b0002z4apbkn37jpg"},{"post_id":"clpw1tc5x0000z0ap1wzr26vf","tag_id":"clpw15s55000248ap59jqad4c","_id":"clpw1tc640001z0apbodg5xyh"},{"post_id":"clpw15s53000148apc27tb714","tag_id":"clpw15s55000248ap59jqad4c","_id":"clpw2enn80001x0apb6feglfa"},{"post_id":"clpw15s53000148apc27tb714","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpw2enn80002x0apbjhx10w7"},{"post_id":"clpw1tc5x0000z0ap1wzr26vf","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpw2fx7i0003x0apg0pjb5y9"},{"post_id":"clpw98x200000cgap906u46l1","tag_id":"clpw98x220002cgapf6ubak3y","_id":"clpw98x2d0008cgapafpc4akk"},{"post_id":"clpw98x200000cgap906u46l1","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpw98x2d000acgap5t1ka4sw"},{"post_id":"clpw98x200000cgap906u46l1","tag_id":"clpw98x240003cgap2kzk3q3n","_id":"clpw98x2d000ccgap9bod956n"},{"post_id":"clpw98x210001cgapd9yz3p87","tag_id":"clpw98x220002cgapf6ubak3y","_id":"clpw98x2e000ecgapcv6ngpy5"},{"post_id":"clpw98x210001cgapd9yz3p87","tag_id":"clpw98x2d000bcgaphjcb6znf","_id":"clpw98x2e000fcgap53zk2qlb"},{"post_id":"clpw98x210001cgapd9yz3p87","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpw98x2e000gcgap264vbokt"},{"post_id":"clpw98x210001cgapd9yz3p87","tag_id":"clpw98x240003cgap2kzk3q3n","_id":"clpw98x2e000hcgap5dcza2kl"},{"post_id":"clpwbvwjb0000uoap026o93hz","tag_id":"clpwbvwjh0002uoap6lm45em4","_id":"clpwbvwjl000auoaphryo763n"},{"post_id":"clpwbvwjb0000uoap026o93hz","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpwbvwjl000cuoapcqd88ht4"},{"post_id":"clpwbvwjb0000uoap026o93hz","tag_id":"clpwbvwjk0005uoapcxu8cq27","_id":"clpwbvwjm000fuoap1tgr8wyj"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","tag_id":"clpwbvwjl0009uoapgxde4pag","_id":"clpwbvwjn000juoapfay7c2tp"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","tag_id":"clpwbvwjl000euoap73ab7ohy","_id":"clpwbvwjn000kuoap5sajd6q9"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","tag_id":"clpwbvwjm000huoap70yhaj8j","_id":"clpwbvwjo000muoap0mv969z7"},{"post_id":"clpwbvwji0003uoapg7qt5b1i","tag_id":"clpwbvwjh0002uoap6lm45em4","_id":"clpwbvwjo000nuoap4i4f03ny"},{"post_id":"clpwbvwji0003uoapg7qt5b1i","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpwbvwjo000ouoap6y6cay48"},{"post_id":"clpwbvwji0003uoapg7qt5b1i","tag_id":"clpwbvwjk0005uoapcxu8cq27","_id":"clpwbvwjo000puoapforf8ydq"}],"Tag":[{"name":"he","_id":"clpv5xn790001z4ap2zh5fvmh"},{"name":"Spring","_id":"clpw15s55000248ap59jqad4c"},{"name":"Spring，JAVA","_id":"clpw28zfc0004rgap7kqhexg3"},{"name":"Spring JAVA","_id":"clpw2al0j00006kap7b8i410u"},{"name":"JAVA","_id":"clpw2enn70000x0apdzinh8l1"},{"name":"hutool","_id":"clpw98x220002cgapf6ubak3y"},{"name":"工具类","_id":"clpw98x240003cgap2kzk3q3n"},{"name":"fastjson","_id":"clpw98x2d000bcgaphjcb6znf"},{"name":"maven","_id":"clpwbvwjh0002uoap6lm45em4"},{"name":"项目管理","_id":"clpwbvwjk0005uoapcxu8cq27"},{"name":"请求头","_id":"clpwbvwjl0009uoapgxde4pag"},{"name":"request","_id":"clpwbvwjl000euoap73ab7ohy"},{"name":"前端","_id":"clpwbvwjm000huoap70yhaj8j"}]}}