{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/pic/Java线程池处理流程.jpeg","path":"pic/Java线程池处理流程.jpeg","modified":0,"renderable":0},{"_id":"source/pic/hutool工具类1.png","path":"pic/hutool工具类1.png","modified":0,"renderable":0},{"_id":"source/pic/jar中没有主清单属性.png","path":"pic/jar中没有主清单属性.png","modified":0,"renderable":0},{"_id":"source/pic/线程池参数.png","path":"pic/线程池参数.png","modified":0,"renderable":0},{"_id":"source/pic/maven初级1.png","path":"pic/maven初级1.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"bbf4cb43018f8580b05426e569e611ad70d40813","modified":1713944065931},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1701941508308},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1701941508342},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1701941508152},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1701941508345},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1701941508341},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1701941508309},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1701941508345},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1701941508346},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1701941508343},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1701941508347},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1701941508346},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1701941508347},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1701941508349},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1701941508352},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1701941508353},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1701941508353},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1701941508351},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1701941508355},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1701941508354},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1701941508357},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1701941508356},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1701941508357},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1701941508358},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1701941508367},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1701941508363},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1701941508369},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1701941508367},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1701941508368},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1701941508370},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1701941508371},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1701941508372},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1701941508372},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1701941508373},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1701941508374},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1701941508376},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1701941508375},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1701941508163},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1701941508167},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1701941508174},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1701941508179},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1701941508251},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1701941508184},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1701941508180},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1701941508159},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1701941508174},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1701941508158},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1701941508160},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1701941508169},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1701941508164},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1701941508171},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1701941508172},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1701941508175},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1701941508173},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1701941508173},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1701941508182},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1701941508162},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1701941508166},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1701941508181},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1701941508185},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1701941508311},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1701941508184},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1701941508340},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1701941508155},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1701941508312},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1701941508166},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1701941508307},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1701941508168},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1701941508176},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1701941508170},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1701941508185},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1701941508319},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1701941508183},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1701941508322},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1701941508333},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1701941508321},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1701941508336},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1701941508324},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1701941508334},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1701941508337},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1701941508338},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1701941508339},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1701941508304},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1701941508289},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1701941508335},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1701941508326},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1701941508232},{"_id":"source/_posts/这是我的第一篇博客.md","hash":"2c104a82b19de359338aad9e343c24b770b62d90","modified":1701952107157},{"_id":"source/Downloads/index.md","hash":"aaa7d047ae9269589014cab45a4dd77bfdb21318","modified":1713944065919},{"_id":"themes/ayer/.npmignore","hash":"13239db7290ce1d6dfc62fb60191a8048c6e5781","modified":1701954297948},{"_id":"themes/ayer/.gitignore","hash":"8faed9be54528620a8da662ad9f242e7305d6757","modified":1701954297948},{"_id":"themes/ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1701954297945},{"_id":"themes/ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1701954297948},{"_id":"themes/ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1701954297949},{"_id":"themes/ayer/_config.yml","hash":"74769fd1f0f3dced4bdeae950af14b0ba3b3acc8","modified":1702005578372},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1701954297962},{"_id":"themes/ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1701954297949},{"_id":"themes/ayer/README.md","hash":"df98c8af4a4412483800a8f945e62ece4caa074c","modified":1701954297949},{"_id":"themes/ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1701954297950},{"_id":"themes/ayer/package.json","hash":"f171e4375353a66c8b609b3bc8aece58e8b7cd01","modified":1701954297962},{"_id":"themes/ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1701954297962},{"_id":"themes/ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1701954297962},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"56f5ebae29b5bd4551df79f38c09ab452e0ab28f","modified":1701954297946},{"_id":"themes/ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1701954297950},{"_id":"themes/ayer/.github/config.yml","hash":"d786334df2ea7feca64d07e573055c3452843f8a","modified":1701954297947},{"_id":"themes/ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1701954297950},{"_id":"themes/ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1701954297950},{"_id":"themes/ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1701954297950},{"_id":"themes/ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1701954297951},{"_id":"themes/ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1701954297951},{"_id":"themes/ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1701954297951},{"_id":"themes/ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1701954297952},{"_id":"themes/ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1701954297951},{"_id":"themes/ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1701954297952},{"_id":"themes/ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1701954297952},{"_id":"themes/ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1701954297952},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1701954297953},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1701954297953},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1701954297960},{"_id":"themes/ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1701954297961},{"_id":"themes/ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1701954297960},{"_id":"themes/ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1701954297961},{"_id":"themes/ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1701954297961},{"_id":"themes/ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1701954297961},{"_id":"themes/ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1701954297962},{"_id":"themes/ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1701954297961},{"_id":"themes/ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1701954297975},{"_id":"themes/ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1701954297964},{"_id":"themes/ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1701954297975},{"_id":"themes/ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1701954297960},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1701954297987},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"109c742a5829ca6c9a39d9df5023f6ecc6ff886e","modified":1701954297946},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ca76e0709f2e97edfa004922da78599ef35eb039","modified":1701954297946},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/other.md","hash":"e4c347d70c3b8044eec656e8cfb78cfd49f2d991","modified":1701954297947},{"_id":"themes/ayer/.github/workflows/npmpublish.yml","hash":"6a748fbb9f13da90a00e35d1e8f54bbe71a14571","modified":1701954297948},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/question.md","hash":"20a7174d36e8f090ba7800c08b0c44b15b753736","modified":1701954297947},{"_id":"themes/ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1701954297953},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"ec2dd8a5e55b99350d7606a4f4ba0918fd656116","modified":1701954297953},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1701954297953},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"84f5c967f5019f4964711f3edd408a7503702e58","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"9ef0ed563dd6e3277534f9601ab290b72b3dc42b","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1701954297954},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"1a9b8574d4341354ed00127ffb873c80ac1beee9","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1701954297955},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1701954297956},{"_id":"themes/ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1701954297956},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1701954297956},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1701954297960},{"_id":"themes/ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1701954297976},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1701954297956},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1701954297976},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1701954297960},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1701954297988},{"_id":"themes/ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1701954297987},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1701954297989},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1701954297990},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1701954297989},{"_id":"themes/ayer/source/dist/main.js","hash":"4338ca7a7bc35ee139016c91d4746643a3ee01c8","modified":1701954297987},{"_id":"themes/ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1701954297990},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1701954298005},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1701954298005},{"_id":"themes/ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1701954298005},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1701954298006},{"_id":"themes/ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1701954298005},{"_id":"themes/ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1701954298006},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1701954298006},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1701954298006},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1701954298008},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1701954298008},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1701954298008},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1701954298007},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1701954298008},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1701954298009},{"_id":"themes/ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1701954298009},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1701954297967},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1701954297967},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1701954297968},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1701954298010},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1701954297974},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1701954297968},{"_id":"themes/ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1701954297974},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1701954297974},{"_id":"themes/ayer/scripts/events/index.js","hash":"f3a5d9bda901565e3c302bcb5ed716b6d006089e","modified":1701954297965},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1701954297966},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1701954297965},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1701954297966},{"_id":"themes/ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1701954297966},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1701954297966},{"_id":"themes/ayer/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1701954297967},{"_id":"themes/ayer/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1701954297967},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1701954297975},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1701954297956},{"_id":"themes/ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1701954297975},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1701954297957},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1701954297958},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1701954297959},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1701954297959},{"_id":"themes/ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1701954297968},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1701954297969},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1701954297969},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1701954297969},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1701954297970},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1701954297969},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1701954297970},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1701954297970},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1701954297970},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1701954297971},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1701954297972},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1701954297973},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1701954297973},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1701954297973},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1701954297973},{"_id":"themes/ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1701954297965},{"_id":"themes/ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1701954297965},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1701954297989},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1701954297993},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1701954297973},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1701954297974},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1701954298007},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1701954298009},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1701954297986},{"_id":"themes/ayer/source/css/fonts/remixicon.css","hash":"8b54eed3270fae6d5bde5b0a6b522a32b5bd39a0","modified":1701954297976},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1701954297985},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1701954297974},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1701954298004},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1701954297964},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1701954297992},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1701954297994},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1701954297979},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1701954297985},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1701954297998},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1701954298004},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1701954297983},{"_id":"source/_posts/demo.md","hash":"ff43cfc7fa9ae5ddbf9a0ab8b13f42f8ade833e4","modified":1701999776897},{"_id":"public/Downloads/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2023/12/08/demo/index.html","hash":"ae92de9d5ea082626c312acbda2aee7d36c26e45","modified":1702003871067},{"_id":"public/2023/12/07/这是我的第一篇博客/index.html","hash":"0275283305ffc439405f5c4ae3f9e6a187d8d3d6","modified":1702017454346},{"_id":"public/2023/12/07/hello-world/index.html","hash":"ca5867d46f3062b22d5636057d3e5d6b5cd368ba","modified":1708565677186},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2023/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2023/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/he/index.html","hash":"fd4fc23fa2f73a3641c555c13d42f6111d4537a8","modified":1702002319890},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1702000381697},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1702000381697},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1702000381697},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1702000381697},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1702000381697},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1702000381697},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1702000381697},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1702000381697},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1702000381697},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1702000381697},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1702002319890},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1702000381697},{"_id":"public/css/style.css","hash":"dd73aa06b48cc31fbd05a487e5d0c588e5a036d6","modified":1702000381697},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1702000381697},{"_id":"public/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1702000381697},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1702000381697},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1702000381697},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1702000381697},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1702000381697},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1702000381697},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1702000381697},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1702000381697},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1702000381697},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1702000381697},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1702000381697},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1702000381697},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1702000381697},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1702000381697},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1702000381697},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1702000381697},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1702000381697},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1702000381697},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1702000381697},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1702000381697},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1702000381697},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1702000381697},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1702000381697},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1702000381697},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1702000381697},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1702000381697},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1702000381697},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1702000381697},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1702000381697},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1702000381697},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1702000381697},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1702000381697},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1702000381697},{"_id":"public/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1702000381697},{"_id":"source/categories/index.md","hash":"d63c8c1118a729978e54197202cce5ca0e3541d3","modified":1713944065939},{"_id":"source/tags/index.md","hash":"4212c2c4c80e75c36cff64e7042167c782baff34","modified":1713944065950},{"_id":"themes/ayer/_config - 副本.yml","hash":"7929a90648ab341f592b38232fa70a4a77fd4909","modified":1702000680226},{"_id":"public/atom.xml","hash":"c80d3070c93ec7e1b406e24565410140b6cf6f30","modified":1713946102300},{"_id":"public/search.xml","hash":"24d64400c9de317fafdbe737bee8b700c73b4608","modified":1713946102300},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"source/_posts/Spring-ResponseEntity-详解.md","hash":"ed352125a1acf3180ae97f34e9a7be069116d66d","modified":1713944065928},{"_id":"source/_posts/详解.md","hash":"1a7050a9194dd42d1e74a98f1e298050b9750ca8","modified":1702003067624},{"_id":"public/2023/12/08/Spring-ResponseEntity-详解/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2023/12/08/详解/index.html","hash":"c6993c30bebf751ceccbb698f80b5cfed6a34f2e","modified":1702003871067},{"_id":"public/tags/Spring/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"source/_posts/Spring-Web工具类.md","hash":"f20237117f40a3dd60752703c48a609876fd0cb5","modified":1713944065929},{"_id":"public/2023/12/08/Spring-Web工具类/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/categories/技术/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/Spring，JAVA/index.html","hash":"016e683fe39f6697322cdb5b93d06b63f1a8e76b","modified":1702005728356},{"_id":"public/tags/Spring-JAVA/index.html","hash":"a05aa99132fb5da5eadf0fad4650c6cb7b578bd3","modified":1702005784825},{"_id":"source/_posts/hutool工具类.md","hash":"2bcfb33c01e7a90dafe2ca34b7b420168724e4b9","modified":1713944065933},{"_id":"source/_posts/工具类常用.md","hash":"e0c8324f7ae33846107304158ec7fb64f88bbc3f","modified":1713944065935},{"_id":"public/2023/12/08/工具类常用/index.html","hash":"c2c3cf35bec8b681ce1372b6ee5fdaf9924e3fbd","modified":1708565677186},{"_id":"public/2023/12/08/hutool工具类/index.html","hash":"884629e5a34cd0bf54832525da9dc9b8adc73f18","modified":1708566101048},{"_id":"public/categories/技术/JAVA/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/JAVA/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/hutool/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/工具类/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/fastjson/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"source/_posts/maven初级.md","hash":"666a37208dac7d1576a28e765cdaed64e42fdac7","modified":1708566230939},{"_id":"source/_posts/maven高级.md","hash":"1bc4d299d86e2dd846883def63b27476e46a934f","modified":1708566252997},{"_id":"source/_posts/请求头信息.md","hash":"3332af8c8079b379c22c74c82673a2f73823d9ed","modified":1713944065938},{"_id":"public/2023/12/08/请求头信息/index.html","hash":"9215bc09bf358b0fac03b0e048e3602855552adf","modified":1708565677186},{"_id":"public/2023/12/08/maven高级/index.html","hash":"4506bf258a1fa23265dc14d90680edab8dcdf818","modified":1708565677186},{"_id":"public/2023/12/08/maven初级/index.html","hash":"88993ebb82f30161f0dda34053db22779cd92d89","modified":1708566101048},{"_id":"public/categories/技术/前端/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/maven/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/项目管理/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/请求头/index.html","hash":"766ec3fac8ceeb639827c41c62eae1e7b120f525","modified":1702021885997},{"_id":"public/tags/request/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/前端/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"source/_posts/git上传文件（超过100MB）.md","hash":"0dc90fde61ee50f032b5939a7e768010151cc094","modified":1713944065931},{"_id":"source/_posts/hexo部署gitee.md","hash":"0cd1261d16549cdf93a3d330156194216eee7495","modified":1713944065932},{"_id":"public/2023/12/11/git上传文件（超过100MB）/index.html","hash":"af9a56ba35eea61dde8cc4421d1bb3536279921c","modified":1708565677186},{"_id":"public/2023/12/08/hexo部署gitee/index.html","hash":"e46bf9ab17ba1121232d65d42e40404775455a0c","modified":1708566101048},{"_id":"public/categories/技术/博客/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/gitee/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/博客/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"source/_posts/这是一篇测试博客.md","hash":"85f093012a115620165c3aea91a9c69460b1903f","modified":1702263787890},{"_id":"public/2023/12/11/这是一篇测试博客/index.html","hash":"4aca4e4777e91e4c4b45c756e187a698afe2c411","modified":1702263793732},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2023/page/2/index.html","hash":"bbca4ac0144f45f5e0dd990e80f6f52897d1a53a","modified":1702263793732},{"_id":"public/archives/2023/12/page/2/index.html","hash":"d341385b03f88ee2c64ac7417d7b6e53b2c0c4a6","modified":1702263793732},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"source/_posts/Java数据结构LinkedList，ArrayList，HashMap，TreeMap的类实现.md","hash":"7f4e295ab23cbb440348371c1bcdd9f75e21470d","modified":1713944065922},{"_id":"public/2024/02/22/Java数据结构LinkedList，ArrayList，HashMap，TreeMap的类实现/index.html","hash":"3d34b6eb986629237fd611921560ea7269776e56","modified":1708566101048},{"_id":"public/2021/12/11/git上传文件（超过100MB）/index.html","hash":"92e3d01052e1a7a610ea90c1a9a43a2a09640816","modified":1708566101048},{"_id":"public/2020/12/08/工具类常用/index.html","hash":"f632edd8b7156cee8ecada282aaf08ce6663d585","modified":1708566101048},{"_id":"public/2020/12/01/hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2020/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2020/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2021/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2021/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2024/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2024/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"source/_posts/Java数据结构哈希表的类实现.md","hash":"c0c8d4a4492861efa7f1ac6065245107753ac338","modified":1713944065924},{"_id":"source/_posts/JavaWeb简介.md","hash":"8ff2076357252a379eb8510831ee68d1775747a4","modified":1713944065920},{"_id":"source/_posts/Maven初级.md","hash":"af8c9b72da1f5188e4326e59be7ed0766cf7f7f5","modified":1713944065924},{"_id":"source/_posts/Maven高级.md","hash":"cd3dd350f57f4eef5c43b5b1db3a7c99c186b67a","modified":1713944065925},{"_id":"source/_posts/Mysql内置函数.md","hash":"f2a77f42435d04e5bf824c7489e5669de932f91e","modified":1713944065925},{"_id":"source/_posts/Mysql慢查询的优化.md","hash":"a8df24ea01ee60a55a875602ff60e7c48e9dbb32","modified":1713944065926},{"_id":"source/_posts/Mysql的存储机制和锁.md","hash":"90411fd15526bd05cf670135663458080caf0d12","modified":1713944065926},{"_id":"source/_posts/Spring-AOP和代理模式.md","hash":"83f508ea9297b9196035df14b7e30a4dc1fe78c7","modified":1713944065928},{"_id":"source/_posts/SpringMVC简介.md","hash":"b01f865dfa841a687837c24db1d58414aa97e87a","modified":1713944065930},{"_id":"source/_posts/Springboot及其它第三方框架注解.md","hash":"c39148de5c2cef2922dff9d715ae6d57aad64c0a","modified":1713946073078},{"_id":"source/_posts/一年中的第几天.md","hash":"758491b41a97307c99dfd3bf720d1586d40ca490","modified":1713944065935},{"_id":"source/_posts/jar中没有主清单属性.md","hash":"642d596ade7dd1cc5dd220966fcad8eea0dbdeb7","modified":1713944065934},{"_id":"source/_posts/线程死锁的解决方案.md","hash":"45735d693be97d70b51de88bb05db52cc8030921","modified":1713944065936},{"_id":"source/_posts/输入n打印菱形.md","hash":"32c565aa418686fdf9b2d797e096f729012fb536","modified":1713944065938},{"_id":"source/pic/jar中没有主清单属性.png","hash":"e3bf07b5101dc3016a3c8e47c4eacf0c428cb305","modified":1713944065944},{"_id":"source/pic/线程池参数.png","hash":"bfa411995afa0d9e23cd358361bbb945e73dface","modified":1713944065949},{"_id":"source/pic/hutool工具类1.png","hash":"ade20e0b6e17dec29c098ee9177d3e04e0f304fb","modified":1713944065942},{"_id":"source/pic/Java线程池处理流程.jpeg","hash":"d0d9e27b1226467f5b0fc6514e08220a9fad2044","modified":1713944065941},{"_id":"source/pic/maven初级1.png","hash":"8c19f53b7831c19f2cc25d6cec3c6076e278186a","modified":1713944065948},{"_id":"public/2024/04/24/Springboot及其它第三方框架注解/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2023/12/12/jar中没有主清单属性/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2023/11/17/Spring-AOP和代理模式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2023/07/16/hutool工具类/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2023/07/03/Mysql慢查询的优化/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2023/04/17/Mysql的存储机制和锁/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2023/02/23/线程死锁的解决方案/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2022/06/10/Maven高级/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2022/06/08/Maven初级/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2024/02/28/Mysql内置函数/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2022/02/28/请求头信息/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2022/03/02/SpringMVC简介/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2022/01/05/Java数据结构LinkedList，ArrayList，HashMap，TreeMap的类实现/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2022/02/23/JavaWeb简介/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2021/12/23/git上传文件（超过100MB）/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2021/12/25/Java数据结构哈希表的类实现/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2021/01/30/输入n打印菱形/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2020/12/11/工具类常用/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2021/01/28/一年中的第几天/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/2020/12/05/hexo部署gitee/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/categories/技术/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/categories/技术/JAVA/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/categories/技术/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/categories/技术/JAVA/实践/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2021/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2022/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2022/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2022/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2022/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2022/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2023/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2023/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2023/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2023/11/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/JAVA/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/archives/2024/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/底层/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/数据结构/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/Mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/bug/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/算法/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/tags/多线程/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713946102300},{"_id":"public/pic/jar中没有主清单属性.png","hash":"e3bf07b5101dc3016a3c8e47c4eacf0c428cb305","modified":1713946102300},{"_id":"public/pic/线程池参数.png","hash":"bfa411995afa0d9e23cd358361bbb945e73dface","modified":1713946102300},{"_id":"public/pic/Java线程池处理流程.jpeg","hash":"d0d9e27b1226467f5b0fc6514e08220a9fad2044","modified":1713946102300},{"_id":"public/pic/hutool工具类1.png","hash":"ade20e0b6e17dec29c098ee9177d3e04e0f304fb","modified":1713946102300},{"_id":"public/pic/maven初级1.png","hash":"8c19f53b7831c19f2cc25d6cec3c6076e278186a","modified":1713946102300}],"Category":[{"name":"技术","_id":"clpw220bl0000csapc98m2wdc"},{"name":"JAVA","_id":"clpw284q30001rgap2gwxdg1r"},{"name":"JAVA","parent":"clpw220bl0000csapc98m2wdc","_id":"clpw2jb320004x0apf0am8b8u"},{"name":"前端","parent":"clpw220bl0000csapc98m2wdc","_id":"clpwbvwjj0004uoapcx0qgsqw"},{"name":"博客","parent":"clpw220bl0000csapc98m2wdc","_id":"clq0buvx60003b4ap490q5cvt"},{"name":"实践","parent":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994h000xa4ueestx5dre"}],"Data":[],"Page":[{"title":"Downloads","date":"2023-12-07T12:34:05.000Z","_content":"","source":"Downloads/index.md","raw":"---\ntitle: Downloads\ndate: 2023-12-07 20:34:05\n---\n","updated":"2024-04-24T07:34:25.919Z","path":"Downloads/index.html","_id":"clpv6kxwg0000m8ap7ieig6dn","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-12-08T02:03:10.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-12-08 10:03:10\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2024-04-24T07:34:25.939Z","path":"categories/index.html","_id":"clpvzm0wj0000ioapd5a9ebch","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-12-08T02:03:10.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-12-08 10:03:10\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-04-24T07:34:25.950Z","path":"tags/index.html","_id":"clpvzm0wl0001ioapgqvje543","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2020-12-01T02:37:09.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-12-01 10:37:09\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2024-04-24T07:34:25.931Z","_id":"clpv02f3200004sap2h79fsrt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Spring ResponseEntity 详解","date":"2023-12-08T02:38:06.000Z","_content":"\nSpring ResponseEntity 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。\n\nResponseEntity 继承了 HttpEntity 类，HttpEntity 代表一个 HTTP 请求或者响应实体，其内部有两个成员变量：header 和 body，代表 HTTP 请求或响应的 header 和 body，其中的 body 是泛型的。\n\nResponseEntity 扩展了 HttpEntity 类，新增了 status 成员变量，这样，一个 ResponseEntity 基本可以代表完整的 HTTP 的请求或响应了。我们可以使用它来完全配置 HTTP 响应，包括状态码，标头和正文。\n\n当我们在控制器层返回 ResponseEntity 对象时，Spring MVC 框架会使用 **HttpEntityMethodProcessor** 类来处理它。**HttpEntityMethodProcessor** 是 AbstractMessageConverterMethodProcessor 的一个子类，它专门处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法。\n\nHttpEntityMethodProcessor 的处理过程如下：\n\n- 首先，检查返回值是否为空，如果为空，就直接返回。\n- 然后，创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应。\n- 接着，断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity 或 ResponseEntity 对象。\n- 然后，获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。\n- 接着，判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中。\n- 最后，调用父类的 writeWithMessageConverters 方法，根据实体类型和请求内容协商选择合适的消息转换器，并将实体内容写入到输出消息中。\n\nhandleReturnValue 是HttpEntityMethodProcessor类的一部分，用来处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法，源码说明如下：\n\n```\npublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n        // 设置 mavContainer 的 requestHandled 属性为 true，表示请求已经被处理，不需要再渲染视图。\n        mavContainer.setRequestHandled(true);\n        if (returnValue != null) {\n            // 创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应\n            ServletServerHttpRequest inputMessage = this.createInputMessage(webRequest);\n            ServletServerHttpResponse outputMessage = this.createOutputMessage(webRequest);\n            // 断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity对象\n            Assert.isInstanceOf(HttpEntity.class, returnValue);\n            HttpEntity<?> responseEntity = (HttpEntity)returnValue;\n            HttpHeaders outputHeaders = outputMessage.getHeaders();\n            HttpHeaders entityHeaders = responseEntity.getHeaders();\n            if (!entityHeaders.isEmpty()) {\n                // 获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。\n                // 如果有 Vary 标头，它会特殊处理，避免重复或冲突\n                entityHeaders.forEach((key, value) -> {\n                    if (\"Vary\".equals(key) && outputHeaders.containsKey(\"Vary\")) {\n                        List<String> values = this.getVaryRequestHeadersToAdd(outputHeaders, entityHeaders);\n                        if (!values.isEmpty()) {\n                            outputHeaders.setVary(values);\n                        }\n                    } else {\n                        outputHeaders.put(key, value);\n                    }\n\n                });\n            }\n\n            // 判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中\n            if (responseEntity instanceof ResponseEntity) {\n                int returnStatus = ((ResponseEntity)responseEntity).getStatusCodeValue();\n                outputMessage.getServletResponse().setStatus(returnStatus);\n                // 根据状态码和请求方法进行一些判断。\n                // 如果状态码是 200，并且请求方法是 GET 或 HEAD，并且资源没有被修改（根据 ETag 或 Last-Modified 标头），那么它会直接返回空响应。\n                if (returnStatus == 200) {\n                    HttpMethod method = inputMessage.getMethod();\n                    if ((HttpMethod.GET.equals(method) || HttpMethod.HEAD.equals(method)) && this.isResourceNotModified(inputMessage, outputMessage)) {\n                        outputMessage.flush();\n                        return;\n                    }\n                } else if (returnStatus / 100 == 3) {\n                    // 如果状态码是 3xx，并且有 location 标头，那么它会重定向到 location 的地址。\n                    String location = outputHeaders.getFirst(\"location\");\n                    if (location != null) {\n                        this.saveFlashAttributes(mavContainer, webRequest, location);\n                    }\n                }\n            }\n\n            this.writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage);\n            outputMessage.flush();\n        }\n    }\n```\n\n**那么我们要如何使用ResponseEntity**？\n\nSpring ResponseEntity 是一个泛型类型。因此，我们可以使用任何类型作为响应正文：\n\n```\n@GetMapping (\"/hello\")\nResponseEntity<String> hello() {\n  return new ResponseEntity <> (\"Hello World!\", HttpStatus.OK);\n}\n```\n\n由于我们以编程方式指定响应状态，因此我们可以根据不同的情况返回不同的状态码：\n\n```\n@GetMapping (\"/age\")\nResponseEntity<String> age(\n  @RequestParam (\"yearOfBirth\") int yearOfBirth) {\n  if (isInFuture (yearOfBirth)) {\n    return new ResponseEntity <> (\"年份不正确\", HttpStatus.BAD_REQUEST);\n  }\n  return new ResponseEntity <> (\"你的年龄是\" + calculateAge (yearOfBirth), HttpStatus.OK);\n}\n```\n\n此外，我们还可以设置 HTTP 标头：\n\n```\n@GetMapping (\"/customHeader\")\nResponseEntity<String> customHeader() {\n  HttpHeaders headers = new HttpHeaders ();\n  headers.add (\"Custom-Header\", \"foo\");\n  return new ResponseEntity <> (\"自定义头部\", headers, HttpStatus.OK);\n}\n```\n\n此外，ResponseEntity 还提供了两个嵌套的构建器接口：HeadersBuilder 和它的子接口 BodyBuilder。因此，我们可以通过 ResponseEntity 的静态方法访问它们的功能。\n\n最简单的情况是具有正文和 HTTP 200 响应码的响应：\n\n```\n@GetMapping (\"/hello\")\nResponseEntity<String> hello() {\n  return ResponseEntity.ok (\"Hello World!\");\n}\n```\n\n对于最常见的 HTTP 状态码，我们得到静态方法：\n\n```\nBodyBuilder accepted();\nBodyBuilder badRequest();\nBodyBuilder created(java.net.URI location);\nHeadersBuilder<?> noContent();\nHeadersBuilder<?> notFound();\nBodyBuilder ok();\n```\n\n另外，我们可以使用 BodyBuilder status(HttpStatus status) 和 BodyBuilder status(int status) 方法来设置任何 HTTP 状态。最后，使用 ResponseEntity BodyBuilder.body(T body) 我们可以设置 HTTP 响应正文：\n\n```\n@GetMapping (\"/age\")\nResponseEntity<String> age(@RequestParam (\"yearOfBirth\") int yearOfBirth) {\n  if (isInFuture (yearOfBirth)) {\n    return ResponseEntity.badRequest()\n      .body(\"年份不正确\");\n  }\n  return ResponseEntity.status(HttpStatus.OK)\n    .body(\"你的年龄是 \" + calculateAge (yearOfBirth));\n}\n```\n\n### **ResponseEntity替代方案**\n\n虽然ResponseEntity很强大，但我们不应该滥用它。在简单的情况下，有其他的选项可以满足我们的需求，而且它们会产生更清晰的代码。\n\n### **@ResponseBody**\n\n在传统的Spring MVC应用中，端点通常返回渲染的HTML页面。如果我们想要返回JSON或XML格式的数据，我们可以使用@ResponseBody注解：\n\n```\n@GetMapping(\"/hello\")\n@ResponseBody\npublic String hello() {\n    return \"Hello World!\";\n}\n```\n\n这样，Spring会自动将返回值转换为JSON或XML，并将其写入响应正文。\n\n我们也可以使用@ResponseStatus注解来设置响应状态码：\n\n```\n@GetMapping(\"/age\")\n@ResponseBody\n@ResponseStatus(HttpStatus.OK)\npublic String age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n    if (isInFuture(yearOfBirth)) {\n        throw new IllegalArgumentException(\"年份不正确\");\n    }\n    return \"你的年龄是\" + calculateAge(yearOfBirth);\n}\n```\n\n如果我们想要处理异常并返回不同的状态码，我们可以使用@ControllerAdvice和@ExceptionHandler注解：\n\n```text\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ResponseBody\n    public String handleIllegalArgumentException(IllegalArgumentException ex) {\n        return ex.getMessage();\n    }\n}\n```\n\n### **@RestController**\n\n如果我们的控制器类只返回数据而不是视图，我们可以使用@RestController注解来替代@Controller注解。这样，我们就不需要在每个方法上添加@ResponseBody注解了：\n\n```text\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @GetMapping(\"/age\")\n    @ResponseStatus(HttpStatus.OK)\n    public String age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n        if (isInFuture(yearOfBirth)) {\n            throw new IllegalArgumentException(\"年份不正确\");\n        }\n        return \"你的年龄是 \" + calculateAge(yearOfBirth);\n    }\n}\n```\n\n## **ResponseEntity 和 @ResponseBody 的区别**\n\nResponseEntity 和 @ResponseBody 都是用于处理 HTTP 响应的，但是有一些不同点：\n\n- **ResponseEntity** 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。\n- **@ResponseBody** 是一个注解，它告诉 Spring 将返回值转换为 JSON 并写入到响应体中。我们可以在方法或类上使用它，Spring 会自动选择合适的转换器。\n- **ResponseEntity** 的优点是可以灵活地控制响应的各个方面，比如设置不同的状态码，标头和正文。它也可以用于一些特殊的场景，比如下载文件，需要设置 content-type 和特殊的状态（比如 206）。\n- **@ResponseBody** 的优点是可以简化代码，让方法直接返回 JSON 结果，不需要构造 ResponseEntity 对象。它也可以和 @ResponseStatus 注解配合使用，来设置响应状态码。\n- **ResponseEntity 的优先级高于 @ResponseBody**。如果返回值是 ResponseEntity 类型，那么 Spring 会直接使用它，不会检查有没有 @ResponseBody 注解。如果返回值不是 ResponseEntity 类型，那么 Spring 会检查有没有 @ResponseBody 注解，如果有就转换为 JSON。\n\n因此，我们可以根据不同的需求和场景选择使用 ResponseEntity 或者 @ResponseBody。\n\n对于大多数情况，我们可以使用 @ResponseBody 注解来直接返回 JSON 结果，或者使用 @ResponseStatus 注解来设置响应状态码。对于一些需要更多定制的情况，我们可以使用 ResponseEntity 来完全控制 HTTP 响应。\n\n### **结语**\n\n这篇文章我们主要介绍了Spring ResponseEntity的原理、使用及其替代方案，并对比了ResponseEntity 和 @ResponseBody。\n","source":"_posts/Spring-ResponseEntity-详解.md","raw":"---\ntitle: Spring ResponseEntity 详解\ndate: 2023-12-08 10:38:06\ntags: [Spring, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\nSpring ResponseEntity 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。\n\nResponseEntity 继承了 HttpEntity 类，HttpEntity 代表一个 HTTP 请求或者响应实体，其内部有两个成员变量：header 和 body，代表 HTTP 请求或响应的 header 和 body，其中的 body 是泛型的。\n\nResponseEntity 扩展了 HttpEntity 类，新增了 status 成员变量，这样，一个 ResponseEntity 基本可以代表完整的 HTTP 的请求或响应了。我们可以使用它来完全配置 HTTP 响应，包括状态码，标头和正文。\n\n当我们在控制器层返回 ResponseEntity 对象时，Spring MVC 框架会使用 **HttpEntityMethodProcessor** 类来处理它。**HttpEntityMethodProcessor** 是 AbstractMessageConverterMethodProcessor 的一个子类，它专门处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法。\n\nHttpEntityMethodProcessor 的处理过程如下：\n\n- 首先，检查返回值是否为空，如果为空，就直接返回。\n- 然后，创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应。\n- 接着，断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity 或 ResponseEntity 对象。\n- 然后，获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。\n- 接着，判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中。\n- 最后，调用父类的 writeWithMessageConverters 方法，根据实体类型和请求内容协商选择合适的消息转换器，并将实体内容写入到输出消息中。\n\nhandleReturnValue 是HttpEntityMethodProcessor类的一部分，用来处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法，源码说明如下：\n\n```\npublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n        // 设置 mavContainer 的 requestHandled 属性为 true，表示请求已经被处理，不需要再渲染视图。\n        mavContainer.setRequestHandled(true);\n        if (returnValue != null) {\n            // 创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应\n            ServletServerHttpRequest inputMessage = this.createInputMessage(webRequest);\n            ServletServerHttpResponse outputMessage = this.createOutputMessage(webRequest);\n            // 断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity对象\n            Assert.isInstanceOf(HttpEntity.class, returnValue);\n            HttpEntity<?> responseEntity = (HttpEntity)returnValue;\n            HttpHeaders outputHeaders = outputMessage.getHeaders();\n            HttpHeaders entityHeaders = responseEntity.getHeaders();\n            if (!entityHeaders.isEmpty()) {\n                // 获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。\n                // 如果有 Vary 标头，它会特殊处理，避免重复或冲突\n                entityHeaders.forEach((key, value) -> {\n                    if (\"Vary\".equals(key) && outputHeaders.containsKey(\"Vary\")) {\n                        List<String> values = this.getVaryRequestHeadersToAdd(outputHeaders, entityHeaders);\n                        if (!values.isEmpty()) {\n                            outputHeaders.setVary(values);\n                        }\n                    } else {\n                        outputHeaders.put(key, value);\n                    }\n\n                });\n            }\n\n            // 判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中\n            if (responseEntity instanceof ResponseEntity) {\n                int returnStatus = ((ResponseEntity)responseEntity).getStatusCodeValue();\n                outputMessage.getServletResponse().setStatus(returnStatus);\n                // 根据状态码和请求方法进行一些判断。\n                // 如果状态码是 200，并且请求方法是 GET 或 HEAD，并且资源没有被修改（根据 ETag 或 Last-Modified 标头），那么它会直接返回空响应。\n                if (returnStatus == 200) {\n                    HttpMethod method = inputMessage.getMethod();\n                    if ((HttpMethod.GET.equals(method) || HttpMethod.HEAD.equals(method)) && this.isResourceNotModified(inputMessage, outputMessage)) {\n                        outputMessage.flush();\n                        return;\n                    }\n                } else if (returnStatus / 100 == 3) {\n                    // 如果状态码是 3xx，并且有 location 标头，那么它会重定向到 location 的地址。\n                    String location = outputHeaders.getFirst(\"location\");\n                    if (location != null) {\n                        this.saveFlashAttributes(mavContainer, webRequest, location);\n                    }\n                }\n            }\n\n            this.writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage);\n            outputMessage.flush();\n        }\n    }\n```\n\n**那么我们要如何使用ResponseEntity**？\n\nSpring ResponseEntity 是一个泛型类型。因此，我们可以使用任何类型作为响应正文：\n\n```\n@GetMapping (\"/hello\")\nResponseEntity<String> hello() {\n  return new ResponseEntity <> (\"Hello World!\", HttpStatus.OK);\n}\n```\n\n由于我们以编程方式指定响应状态，因此我们可以根据不同的情况返回不同的状态码：\n\n```\n@GetMapping (\"/age\")\nResponseEntity<String> age(\n  @RequestParam (\"yearOfBirth\") int yearOfBirth) {\n  if (isInFuture (yearOfBirth)) {\n    return new ResponseEntity <> (\"年份不正确\", HttpStatus.BAD_REQUEST);\n  }\n  return new ResponseEntity <> (\"你的年龄是\" + calculateAge (yearOfBirth), HttpStatus.OK);\n}\n```\n\n此外，我们还可以设置 HTTP 标头：\n\n```\n@GetMapping (\"/customHeader\")\nResponseEntity<String> customHeader() {\n  HttpHeaders headers = new HttpHeaders ();\n  headers.add (\"Custom-Header\", \"foo\");\n  return new ResponseEntity <> (\"自定义头部\", headers, HttpStatus.OK);\n}\n```\n\n此外，ResponseEntity 还提供了两个嵌套的构建器接口：HeadersBuilder 和它的子接口 BodyBuilder。因此，我们可以通过 ResponseEntity 的静态方法访问它们的功能。\n\n最简单的情况是具有正文和 HTTP 200 响应码的响应：\n\n```\n@GetMapping (\"/hello\")\nResponseEntity<String> hello() {\n  return ResponseEntity.ok (\"Hello World!\");\n}\n```\n\n对于最常见的 HTTP 状态码，我们得到静态方法：\n\n```\nBodyBuilder accepted();\nBodyBuilder badRequest();\nBodyBuilder created(java.net.URI location);\nHeadersBuilder<?> noContent();\nHeadersBuilder<?> notFound();\nBodyBuilder ok();\n```\n\n另外，我们可以使用 BodyBuilder status(HttpStatus status) 和 BodyBuilder status(int status) 方法来设置任何 HTTP 状态。最后，使用 ResponseEntity BodyBuilder.body(T body) 我们可以设置 HTTP 响应正文：\n\n```\n@GetMapping (\"/age\")\nResponseEntity<String> age(@RequestParam (\"yearOfBirth\") int yearOfBirth) {\n  if (isInFuture (yearOfBirth)) {\n    return ResponseEntity.badRequest()\n      .body(\"年份不正确\");\n  }\n  return ResponseEntity.status(HttpStatus.OK)\n    .body(\"你的年龄是 \" + calculateAge (yearOfBirth));\n}\n```\n\n### **ResponseEntity替代方案**\n\n虽然ResponseEntity很强大，但我们不应该滥用它。在简单的情况下，有其他的选项可以满足我们的需求，而且它们会产生更清晰的代码。\n\n### **@ResponseBody**\n\n在传统的Spring MVC应用中，端点通常返回渲染的HTML页面。如果我们想要返回JSON或XML格式的数据，我们可以使用@ResponseBody注解：\n\n```\n@GetMapping(\"/hello\")\n@ResponseBody\npublic String hello() {\n    return \"Hello World!\";\n}\n```\n\n这样，Spring会自动将返回值转换为JSON或XML，并将其写入响应正文。\n\n我们也可以使用@ResponseStatus注解来设置响应状态码：\n\n```\n@GetMapping(\"/age\")\n@ResponseBody\n@ResponseStatus(HttpStatus.OK)\npublic String age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n    if (isInFuture(yearOfBirth)) {\n        throw new IllegalArgumentException(\"年份不正确\");\n    }\n    return \"你的年龄是\" + calculateAge(yearOfBirth);\n}\n```\n\n如果我们想要处理异常并返回不同的状态码，我们可以使用@ControllerAdvice和@ExceptionHandler注解：\n\n```text\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ResponseBody\n    public String handleIllegalArgumentException(IllegalArgumentException ex) {\n        return ex.getMessage();\n    }\n}\n```\n\n### **@RestController**\n\n如果我们的控制器类只返回数据而不是视图，我们可以使用@RestController注解来替代@Controller注解。这样，我们就不需要在每个方法上添加@ResponseBody注解了：\n\n```text\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @GetMapping(\"/age\")\n    @ResponseStatus(HttpStatus.OK)\n    public String age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n        if (isInFuture(yearOfBirth)) {\n            throw new IllegalArgumentException(\"年份不正确\");\n        }\n        return \"你的年龄是 \" + calculateAge(yearOfBirth);\n    }\n}\n```\n\n## **ResponseEntity 和 @ResponseBody 的区别**\n\nResponseEntity 和 @ResponseBody 都是用于处理 HTTP 响应的，但是有一些不同点：\n\n- **ResponseEntity** 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。\n- **@ResponseBody** 是一个注解，它告诉 Spring 将返回值转换为 JSON 并写入到响应体中。我们可以在方法或类上使用它，Spring 会自动选择合适的转换器。\n- **ResponseEntity** 的优点是可以灵活地控制响应的各个方面，比如设置不同的状态码，标头和正文。它也可以用于一些特殊的场景，比如下载文件，需要设置 content-type 和特殊的状态（比如 206）。\n- **@ResponseBody** 的优点是可以简化代码，让方法直接返回 JSON 结果，不需要构造 ResponseEntity 对象。它也可以和 @ResponseStatus 注解配合使用，来设置响应状态码。\n- **ResponseEntity 的优先级高于 @ResponseBody**。如果返回值是 ResponseEntity 类型，那么 Spring 会直接使用它，不会检查有没有 @ResponseBody 注解。如果返回值不是 ResponseEntity 类型，那么 Spring 会检查有没有 @ResponseBody 注解，如果有就转换为 JSON。\n\n因此，我们可以根据不同的需求和场景选择使用 ResponseEntity 或者 @ResponseBody。\n\n对于大多数情况，我们可以使用 @ResponseBody 注解来直接返回 JSON 结果，或者使用 @ResponseStatus 注解来设置响应状态码。对于一些需要更多定制的情况，我们可以使用 ResponseEntity 来完全控制 HTTP 响应。\n\n### **结语**\n\n这篇文章我们主要介绍了Spring ResponseEntity的原理、使用及其替代方案，并对比了ResponseEntity 和 @ResponseBody。\n","slug":"Spring-ResponseEntity-详解","published":1,"updated":"2024-04-24T07:34:25.928Z","_id":"clpw15s53000148apc27tb714","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Spring ResponseEntity 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。</p>\n<p>ResponseEntity 继承了 HttpEntity 类，HttpEntity 代表一个 HTTP 请求或者响应实体，其内部有两个成员变量：header 和 body，代表 HTTP 请求或响应的 header 和 body，其中的 body 是泛型的。</p>\n<p>ResponseEntity 扩展了 HttpEntity 类，新增了 status 成员变量，这样，一个 ResponseEntity 基本可以代表完整的 HTTP 的请求或响应了。我们可以使用它来完全配置 HTTP 响应，包括状态码，标头和正文。</p>\n<p>当我们在控制器层返回 ResponseEntity 对象时，Spring MVC 框架会使用 <strong>HttpEntityMethodProcessor</strong> 类来处理它。<strong>HttpEntityMethodProcessor</strong> 是 AbstractMessageConverterMethodProcessor 的一个子类，它专门处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法。</p>\n<p>HttpEntityMethodProcessor 的处理过程如下：</p>\n<ul>\n<li>首先，检查返回值是否为空，如果为空，就直接返回。</li>\n<li>然后，创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应。</li>\n<li>接着，断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity 或 ResponseEntity 对象。</li>\n<li>然后，获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。</li>\n<li>接着，判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中。</li>\n<li>最后，调用父类的 writeWithMessageConverters 方法，根据实体类型和请求内容协商选择合适的消息转换器，并将实体内容写入到输出消息中。</li>\n</ul>\n<p>handleReturnValue 是HttpEntityMethodProcessor类的一部分，用来处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法，源码说明如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class=\"line\">        // 设置 mavContainer 的 requestHandled 属性为 true，表示请求已经被处理，不需要再渲染视图。</span><br><span class=\"line\">        mavContainer.setRequestHandled(true);</span><br><span class=\"line\">        if (returnValue != null) &#123;</span><br><span class=\"line\">            // 创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应</span><br><span class=\"line\">            ServletServerHttpRequest inputMessage = this.createInputMessage(webRequest);</span><br><span class=\"line\">            ServletServerHttpResponse outputMessage = this.createOutputMessage(webRequest);</span><br><span class=\"line\">            // 断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity对象</span><br><span class=\"line\">            Assert.isInstanceOf(HttpEntity.class, returnValue);</span><br><span class=\"line\">            HttpEntity&lt;?&gt; responseEntity = (HttpEntity)returnValue;</span><br><span class=\"line\">            HttpHeaders outputHeaders = outputMessage.getHeaders();</span><br><span class=\"line\">            HttpHeaders entityHeaders = responseEntity.getHeaders();</span><br><span class=\"line\">            if (!entityHeaders.isEmpty()) &#123;</span><br><span class=\"line\">                // 获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。</span><br><span class=\"line\">                // 如果有 Vary 标头，它会特殊处理，避免重复或冲突</span><br><span class=\"line\">                entityHeaders.forEach((key, value) -&gt; &#123;</span><br><span class=\"line\">                    if (&quot;Vary&quot;.equals(key) &amp;&amp; outputHeaders.containsKey(&quot;Vary&quot;)) &#123;</span><br><span class=\"line\">                        List&lt;String&gt; values = this.getVaryRequestHeadersToAdd(outputHeaders, entityHeaders);</span><br><span class=\"line\">                        if (!values.isEmpty()) &#123;</span><br><span class=\"line\">                            outputHeaders.setVary(values);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        outputHeaders.put(key, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中</span><br><span class=\"line\">            if (responseEntity instanceof ResponseEntity) &#123;</span><br><span class=\"line\">                int returnStatus = ((ResponseEntity)responseEntity).getStatusCodeValue();</span><br><span class=\"line\">                outputMessage.getServletResponse().setStatus(returnStatus);</span><br><span class=\"line\">                // 根据状态码和请求方法进行一些判断。</span><br><span class=\"line\">                // 如果状态码是 200，并且请求方法是 GET 或 HEAD，并且资源没有被修改（根据 ETag 或 Last-Modified 标头），那么它会直接返回空响应。</span><br><span class=\"line\">                if (returnStatus == 200) &#123;</span><br><span class=\"line\">                    HttpMethod method = inputMessage.getMethod();</span><br><span class=\"line\">                    if ((HttpMethod.GET.equals(method) || HttpMethod.HEAD.equals(method)) &amp;&amp; this.isResourceNotModified(inputMessage, outputMessage)) &#123;</span><br><span class=\"line\">                        outputMessage.flush();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else if (returnStatus / 100 == 3) &#123;</span><br><span class=\"line\">                    // 如果状态码是 3xx，并且有 location 标头，那么它会重定向到 location 的地址。</span><br><span class=\"line\">                    String location = outputHeaders.getFirst(&quot;location&quot;);</span><br><span class=\"line\">                    if (location != null) &#123;</span><br><span class=\"line\">                        this.saveFlashAttributes(mavContainer, webRequest, location);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            this.writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage);</span><br><span class=\"line\">            outputMessage.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>那么我们要如何使用ResponseEntity</strong>？</p>\n<p>Spring ResponseEntity 是一个泛型类型。因此，我们可以使用任何类型作为响应正文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/hello&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; hello() &#123;</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;Hello World!&quot;, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们以编程方式指定响应状态，因此我们可以根据不同的情况返回不同的状态码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/age&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; age(</span><br><span class=\"line\">  @RequestParam (&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">  if (isInFuture (yearOfBirth)) &#123;</span><br><span class=\"line\">    return new ResponseEntity &lt;&gt; (&quot;年份不正确&quot;, HttpStatus.BAD_REQUEST);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;你的年龄是&quot; + calculateAge (yearOfBirth), HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，我们还可以设置 HTTP 标头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/customHeader&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; customHeader() &#123;</span><br><span class=\"line\">  HttpHeaders headers = new HttpHeaders ();</span><br><span class=\"line\">  headers.add (&quot;Custom-Header&quot;, &quot;foo&quot;);</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;自定义头部&quot;, headers, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，ResponseEntity 还提供了两个嵌套的构建器接口：HeadersBuilder 和它的子接口 BodyBuilder。因此，我们可以通过 ResponseEntity 的静态方法访问它们的功能。</p>\n<p>最简单的情况是具有正文和 HTTP 200 响应码的响应：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/hello&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; hello() &#123;</span><br><span class=\"line\">  return ResponseEntity.ok (&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于最常见的 HTTP 状态码，我们得到静态方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BodyBuilder accepted();</span><br><span class=\"line\">BodyBuilder badRequest();</span><br><span class=\"line\">BodyBuilder created(java.net.URI location);</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; noContent();</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; notFound();</span><br><span class=\"line\">BodyBuilder ok();</span><br></pre></td></tr></table></figure>\n\n<p>另外，我们可以使用 BodyBuilder status(HttpStatus status) 和 BodyBuilder status(int status) 方法来设置任何 HTTP 状态。最后，使用 ResponseEntity BodyBuilder.body(T body) 我们可以设置 HTTP 响应正文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/age&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; age(@RequestParam (&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">  if (isInFuture (yearOfBirth)) &#123;</span><br><span class=\"line\">    return ResponseEntity.badRequest()</span><br><span class=\"line\">      .body(&quot;年份不正确&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return ResponseEntity.status(HttpStatus.OK)</span><br><span class=\"line\">    .body(&quot;你的年龄是 &quot; + calculateAge (yearOfBirth));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ResponseEntity替代方案\"><a href=\"#ResponseEntity替代方案\" class=\"headerlink\" title=\"ResponseEntity替代方案\"></a><strong>ResponseEntity替代方案</strong></h3><p>虽然ResponseEntity很强大，但我们不应该滥用它。在简单的情况下，有其他的选项可以满足我们的需求，而且它们会产生更清晰的代码。</p>\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a><strong>@ResponseBody</strong></h3><p>在传统的Spring MVC应用中，端点通常返回渲染的HTML页面。如果我们想要返回JSON或XML格式的数据，我们可以使用@ResponseBody注解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public String hello() &#123;</span><br><span class=\"line\">    return &quot;Hello World!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，Spring会自动将返回值转换为JSON或XML，并将其写入响应正文。</p>\n<p>我们也可以使用@ResponseStatus注解来设置响应状态码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/age&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">public String age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">    if (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;年份不正确&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &quot;你的年龄是&quot; + calculateAge(yearOfBirth);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们想要处理异常并返回不同的状态码，我们可以使用@ControllerAdvice和@ExceptionHandler注解：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">public class GlobalExceptionHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ExceptionHandler(IllegalArgumentException.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String handleIllegalArgumentException(IllegalArgumentException ex) &#123;</span><br><span class=\"line\">        return ex.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a><strong>@RestController</strong></h3><p>如果我们的控制器类只返回数据而不是视图，我们可以使用@RestController注解来替代@Controller注解。这样，我们就不需要在每个方法上添加@ResponseBody注解了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">    public String hello() &#123;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/age&quot;)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    public String age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">        if (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;年份不正确&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &quot;你的年龄是 &quot; + calculateAge(yearOfBirth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ResponseEntity-和-ResponseBody-的区别\"><a href=\"#ResponseEntity-和-ResponseBody-的区别\" class=\"headerlink\" title=\"ResponseEntity 和 @ResponseBody 的区别\"></a><strong>ResponseEntity 和 @ResponseBody 的区别</strong></h2><p>ResponseEntity 和 @ResponseBody 都是用于处理 HTTP 响应的，但是有一些不同点：</p>\n<ul>\n<li><strong>ResponseEntity</strong> 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。</li>\n<li><strong>@ResponseBody</strong> 是一个注解，它告诉 Spring 将返回值转换为 JSON 并写入到响应体中。我们可以在方法或类上使用它，Spring 会自动选择合适的转换器。</li>\n<li><strong>ResponseEntity</strong> 的优点是可以灵活地控制响应的各个方面，比如设置不同的状态码，标头和正文。它也可以用于一些特殊的场景，比如下载文件，需要设置 content-type 和特殊的状态（比如 206）。</li>\n<li><strong>@ResponseBody</strong> 的优点是可以简化代码，让方法直接返回 JSON 结果，不需要构造 ResponseEntity 对象。它也可以和 @ResponseStatus 注解配合使用，来设置响应状态码。</li>\n<li><strong>ResponseEntity 的优先级高于 @ResponseBody</strong>。如果返回值是 ResponseEntity 类型，那么 Spring 会直接使用它，不会检查有没有 @ResponseBody 注解。如果返回值不是 ResponseEntity 类型，那么 Spring 会检查有没有 @ResponseBody 注解，如果有就转换为 JSON。</li>\n</ul>\n<p>因此，我们可以根据不同的需求和场景选择使用 ResponseEntity 或者 @ResponseBody。</p>\n<p>对于大多数情况，我们可以使用 @ResponseBody 注解来直接返回 JSON 结果，或者使用 @ResponseStatus 注解来设置响应状态码。对于一些需要更多定制的情况，我们可以使用 ResponseEntity 来完全控制 HTTP 响应。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><strong>结语</strong></h3><p>这篇文章我们主要介绍了Spring ResponseEntity的原理、使用及其替代方案，并对比了ResponseEntity 和 @ResponseBody。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Spring ResponseEntity 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。</p>\n<p>ResponseEntity 继承了 HttpEntity 类，HttpEntity 代表一个 HTTP 请求或者响应实体，其内部有两个成员变量：header 和 body，代表 HTTP 请求或响应的 header 和 body，其中的 body 是泛型的。</p>\n<p>ResponseEntity 扩展了 HttpEntity 类，新增了 status 成员变量，这样，一个 ResponseEntity 基本可以代表完整的 HTTP 的请求或响应了。我们可以使用它来完全配置 HTTP 响应，包括状态码，标头和正文。</p>\n<p>当我们在控制器层返回 ResponseEntity 对象时，Spring MVC 框架会使用 <strong>HttpEntityMethodProcessor</strong> 类来处理它。<strong>HttpEntityMethodProcessor</strong> 是 AbstractMessageConverterMethodProcessor 的一个子类，它专门处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法。</p>\n<p>HttpEntityMethodProcessor 的处理过程如下：</p>\n<ul>\n<li>首先，检查返回值是否为空，如果为空，就直接返回。</li>\n<li>然后，创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应。</li>\n<li>接着，断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity 或 ResponseEntity 对象。</li>\n<li>然后，获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。</li>\n<li>接着，判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中。</li>\n<li>最后，调用父类的 writeWithMessageConverters 方法，根据实体类型和请求内容协商选择合适的消息转换器，并将实体内容写入到输出消息中。</li>\n</ul>\n<p>handleReturnValue 是HttpEntityMethodProcessor类的一部分，用来处理返回值类型是 HttpEntity 或 ResponseEntity 的控制器方法，源码说明如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class=\"line\">        // 设置 mavContainer 的 requestHandled 属性为 true，表示请求已经被处理，不需要再渲染视图。</span><br><span class=\"line\">        mavContainer.setRequestHandled(true);</span><br><span class=\"line\">        if (returnValue != null) &#123;</span><br><span class=\"line\">            // 创建 ServletServerHttpRequest 和 ServletServerHttpResponse 对象，用于读取请求和写入响应</span><br><span class=\"line\">            ServletServerHttpRequest inputMessage = this.createInputMessage(webRequest);</span><br><span class=\"line\">            ServletServerHttpResponse outputMessage = this.createOutputMessage(webRequest);</span><br><span class=\"line\">            // 断言返回值是 HttpEntity 类型的，并将其强制转换为 HttpEntity对象</span><br><span class=\"line\">            Assert.isInstanceOf(HttpEntity.class, returnValue);</span><br><span class=\"line\">            HttpEntity&lt;?&gt; responseEntity = (HttpEntity)returnValue;</span><br><span class=\"line\">            HttpHeaders outputHeaders = outputMessage.getHeaders();</span><br><span class=\"line\">            HttpHeaders entityHeaders = responseEntity.getHeaders();</span><br><span class=\"line\">            if (!entityHeaders.isEmpty()) &#123;</span><br><span class=\"line\">                // 获取输出消息的标头和实体标头，并将实体标头复制到输出标头中。</span><br><span class=\"line\">                // 如果有 Vary 标头，它会特殊处理，避免重复或冲突</span><br><span class=\"line\">                entityHeaders.forEach((key, value) -&gt; &#123;</span><br><span class=\"line\">                    if (&quot;Vary&quot;.equals(key) &amp;&amp; outputHeaders.containsKey(&quot;Vary&quot;)) &#123;</span><br><span class=\"line\">                        List&lt;String&gt; values = this.getVaryRequestHeadersToAdd(outputHeaders, entityHeaders);</span><br><span class=\"line\">                        if (!values.isEmpty()) &#123;</span><br><span class=\"line\">                            outputHeaders.setVary(values);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        outputHeaders.put(key, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 判断返回值是否是 ResponseEntity 类型的，并获取其状态码，并设置到输出消息中</span><br><span class=\"line\">            if (responseEntity instanceof ResponseEntity) &#123;</span><br><span class=\"line\">                int returnStatus = ((ResponseEntity)responseEntity).getStatusCodeValue();</span><br><span class=\"line\">                outputMessage.getServletResponse().setStatus(returnStatus);</span><br><span class=\"line\">                // 根据状态码和请求方法进行一些判断。</span><br><span class=\"line\">                // 如果状态码是 200，并且请求方法是 GET 或 HEAD，并且资源没有被修改（根据 ETag 或 Last-Modified 标头），那么它会直接返回空响应。</span><br><span class=\"line\">                if (returnStatus == 200) &#123;</span><br><span class=\"line\">                    HttpMethod method = inputMessage.getMethod();</span><br><span class=\"line\">                    if ((HttpMethod.GET.equals(method) || HttpMethod.HEAD.equals(method)) &amp;&amp; this.isResourceNotModified(inputMessage, outputMessage)) &#123;</span><br><span class=\"line\">                        outputMessage.flush();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else if (returnStatus / 100 == 3) &#123;</span><br><span class=\"line\">                    // 如果状态码是 3xx，并且有 location 标头，那么它会重定向到 location 的地址。</span><br><span class=\"line\">                    String location = outputHeaders.getFirst(&quot;location&quot;);</span><br><span class=\"line\">                    if (location != null) &#123;</span><br><span class=\"line\">                        this.saveFlashAttributes(mavContainer, webRequest, location);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            this.writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage);</span><br><span class=\"line\">            outputMessage.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>那么我们要如何使用ResponseEntity</strong>？</p>\n<p>Spring ResponseEntity 是一个泛型类型。因此，我们可以使用任何类型作为响应正文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/hello&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; hello() &#123;</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;Hello World!&quot;, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们以编程方式指定响应状态，因此我们可以根据不同的情况返回不同的状态码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/age&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; age(</span><br><span class=\"line\">  @RequestParam (&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">  if (isInFuture (yearOfBirth)) &#123;</span><br><span class=\"line\">    return new ResponseEntity &lt;&gt; (&quot;年份不正确&quot;, HttpStatus.BAD_REQUEST);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;你的年龄是&quot; + calculateAge (yearOfBirth), HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，我们还可以设置 HTTP 标头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/customHeader&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; customHeader() &#123;</span><br><span class=\"line\">  HttpHeaders headers = new HttpHeaders ();</span><br><span class=\"line\">  headers.add (&quot;Custom-Header&quot;, &quot;foo&quot;);</span><br><span class=\"line\">  return new ResponseEntity &lt;&gt; (&quot;自定义头部&quot;, headers, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，ResponseEntity 还提供了两个嵌套的构建器接口：HeadersBuilder 和它的子接口 BodyBuilder。因此，我们可以通过 ResponseEntity 的静态方法访问它们的功能。</p>\n<p>最简单的情况是具有正文和 HTTP 200 响应码的响应：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/hello&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; hello() &#123;</span><br><span class=\"line\">  return ResponseEntity.ok (&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于最常见的 HTTP 状态码，我们得到静态方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BodyBuilder accepted();</span><br><span class=\"line\">BodyBuilder badRequest();</span><br><span class=\"line\">BodyBuilder created(java.net.URI location);</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; noContent();</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; notFound();</span><br><span class=\"line\">BodyBuilder ok();</span><br></pre></td></tr></table></figure>\n\n<p>另外，我们可以使用 BodyBuilder status(HttpStatus status) 和 BodyBuilder status(int status) 方法来设置任何 HTTP 状态。最后，使用 ResponseEntity BodyBuilder.body(T body) 我们可以设置 HTTP 响应正文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping (&quot;/age&quot;)</span><br><span class=\"line\">ResponseEntity&lt;String&gt; age(@RequestParam (&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">  if (isInFuture (yearOfBirth)) &#123;</span><br><span class=\"line\">    return ResponseEntity.badRequest()</span><br><span class=\"line\">      .body(&quot;年份不正确&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return ResponseEntity.status(HttpStatus.OK)</span><br><span class=\"line\">    .body(&quot;你的年龄是 &quot; + calculateAge (yearOfBirth));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ResponseEntity替代方案\"><a href=\"#ResponseEntity替代方案\" class=\"headerlink\" title=\"ResponseEntity替代方案\"></a><strong>ResponseEntity替代方案</strong></h3><p>虽然ResponseEntity很强大，但我们不应该滥用它。在简单的情况下，有其他的选项可以满足我们的需求，而且它们会产生更清晰的代码。</p>\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a><strong>@ResponseBody</strong></h3><p>在传统的Spring MVC应用中，端点通常返回渲染的HTML页面。如果我们想要返回JSON或XML格式的数据，我们可以使用@ResponseBody注解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public String hello() &#123;</span><br><span class=\"line\">    return &quot;Hello World!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，Spring会自动将返回值转换为JSON或XML，并将其写入响应正文。</p>\n<p>我们也可以使用@ResponseStatus注解来设置响应状态码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/age&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">public String age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">    if (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;年份不正确&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &quot;你的年龄是&quot; + calculateAge(yearOfBirth);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们想要处理异常并返回不同的状态码，我们可以使用@ControllerAdvice和@ExceptionHandler注解：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">public class GlobalExceptionHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ExceptionHandler(IllegalArgumentException.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.BAD_REQUEST)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String handleIllegalArgumentException(IllegalArgumentException ex) &#123;</span><br><span class=\"line\">        return ex.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a><strong>@RestController</strong></h3><p>如果我们的控制器类只返回数据而不是视图，我们可以使用@RestController注解来替代@Controller注解。这样，我们就不需要在每个方法上添加@ResponseBody注解了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">    public String hello() &#123;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/age&quot;)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    public String age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) &#123;</span><br><span class=\"line\">        if (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;年份不正确&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &quot;你的年龄是 &quot; + calculateAge(yearOfBirth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ResponseEntity-和-ResponseBody-的区别\"><a href=\"#ResponseEntity-和-ResponseBody-的区别\" class=\"headerlink\" title=\"ResponseEntity 和 @ResponseBody 的区别\"></a><strong>ResponseEntity 和 @ResponseBody 的区别</strong></h2><p>ResponseEntity 和 @ResponseBody 都是用于处理 HTTP 响应的，但是有一些不同点：</p>\n<ul>\n<li><strong>ResponseEntity</strong> 是一个类，它表示整个 HTTP 响应，包括状态码，标头和正文。我们可以使用它来完全配置 HTTP 响应。如果我们想使用它，我们必须从端点返回它；Spring 会处理其余的部分。</li>\n<li><strong>@ResponseBody</strong> 是一个注解，它告诉 Spring 将返回值转换为 JSON 并写入到响应体中。我们可以在方法或类上使用它，Spring 会自动选择合适的转换器。</li>\n<li><strong>ResponseEntity</strong> 的优点是可以灵活地控制响应的各个方面，比如设置不同的状态码，标头和正文。它也可以用于一些特殊的场景，比如下载文件，需要设置 content-type 和特殊的状态（比如 206）。</li>\n<li><strong>@ResponseBody</strong> 的优点是可以简化代码，让方法直接返回 JSON 结果，不需要构造 ResponseEntity 对象。它也可以和 @ResponseStatus 注解配合使用，来设置响应状态码。</li>\n<li><strong>ResponseEntity 的优先级高于 @ResponseBody</strong>。如果返回值是 ResponseEntity 类型，那么 Spring 会直接使用它，不会检查有没有 @ResponseBody 注解。如果返回值不是 ResponseEntity 类型，那么 Spring 会检查有没有 @ResponseBody 注解，如果有就转换为 JSON。</li>\n</ul>\n<p>因此，我们可以根据不同的需求和场景选择使用 ResponseEntity 或者 @ResponseBody。</p>\n<p>对于大多数情况，我们可以使用 @ResponseBody 注解来直接返回 JSON 结果，或者使用 @ResponseStatus 注解来设置响应状态码。对于一些需要更多定制的情况，我们可以使用 ResponseEntity 来完全控制 HTTP 响应。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><strong>结语</strong></h3><p>这篇文章我们主要介绍了Spring ResponseEntity的原理、使用及其替代方案，并对比了ResponseEntity 和 @ResponseBody。</p>\n"},{"title":"Spring Web工具类","date":"2023-12-08T02:53:06.000Z","_content":"\n继承WebUtils类 \n\n```\npackage com.example.common.utils;\n\nimport com.xoao.sms.common.exception.BusinessErrorEnum;\nimport com.xoao.sms.common.exception.BusinessException;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.experimental.UtilityClass;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport org.springframework.web.method.HandlerMethod;\n\nimport java.util.Optional;\n\n/**\n * Miscellaneous utilities for web applications.\n *\n * @author \n */\n@Slf4j\n@UtilityClass\npublic class WebUtils extends org.springframework.web.util.WebUtils {\n\n\t/**\n\t * 判断是否ajax请求 spring ajax 返回含有 ResponseBody 或者 RestController注解\n\t * @param handlerMethod HandlerMethod\n\t * @return 是否ajax请求\n\t */\n\tpublic boolean isBody(HandlerMethod handlerMethod) {\n\t\tResponseBody responseBody = ClassUtils.getAnnotation(handlerMethod, ResponseBody.class);\n\t\treturn responseBody != null;\n\t}\n\n\t/**\n\t * 读取cookie\n\t * @param name cookie name\n\t * @return cookie value\n\t */\n\tpublic String getCookieVal(String name) {\n\t\tif (WebUtils.getRequest().isPresent()) {\n\t\t\treturn getCookieVal(WebUtils.getRequest().get(), name);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 读取cookie\n\t * @param request HttpServletRequest\n\t * @param name cookie name\n\t * @return cookie value\n\t */\n\tpublic String getCookieVal(HttpServletRequest request, String name) {\n\t\tCookie cookie = getCookie(request, name);\n\t\treturn cookie != null ? cookie.getValue() : null;\n\t}\n\n\t/**\n\t * 清除 某个指定的cookie\n\t * @param response HttpServletResponse\n\t * @param key cookie key\n\t */\n\tpublic void removeCookie(HttpServletResponse response, String key) {\n\t\tsetCookie(response, key, null, 0);\n\t}\n\n\t/**\n\t * 设置cookie\n\t * @param response HttpServletResponse\n\t * @param name cookie name\n\t * @param value cookie value\n\t * @param maxAgeInSeconds maxage\n\t */\n\tpublic void setCookie(HttpServletResponse response, String name, String value, int maxAgeInSeconds) {\n\t\tCookie cookie = new Cookie(name, value);\n\t\tcookie.setPath(\"/\");\n\t\tcookie.setMaxAge(maxAgeInSeconds);\n\t\tcookie.setHttpOnly(true);\n\t\tresponse.addCookie(cookie);\n\t}\n\n\t/**\n\t * 获取 HttpServletRequest\n\t * @return {HttpServletRequest}\n\t */\n\tpublic Optional<HttpServletRequest> getRequest() {\n\t\treturn Optional\n\t\t\t.ofNullable(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest());\n\t}\n\n\tpublic HttpServletRequest getRequestOrElseThrow() {\n\t\treturn WebUtils.getRequest().orElseThrow(() -> new BusinessException(BusinessErrorEnum.SYSTEM_ERROR));\n\t}\n\n\t/**\n\t * 获取 HttpServletResponse\n\t * @return {HttpServletResponse}\n\t */\n\tpublic HttpServletResponse getResponse() {\n\t\treturn ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();\n\t}\n\n}\n\n```\n\n类工具类\n\n```\npackage com.xoao.sms.common.utils;\n\nimport lombok.experimental.UtilityClass;\nimport org.springframework.core.BridgeMethodResolver;\nimport org.springframework.core.DefaultParameterNameDiscoverer;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.ParameterNameDiscoverer;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.core.annotation.SynthesizingMethodParameter;\nimport org.springframework.web.method.HandlerMethod;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\n/**\n * 类工具类\n */\n@UtilityClass\npublic class ClassUtils extends org.springframework.util.ClassUtils {\n\n\tprivate final ParameterNameDiscoverer PARAMETERNAMEDISCOVERER = new DefaultParameterNameDiscoverer();\n\n\t/**\n\t * 获取方法参数信息\n\t * @param constructor 构造器\n\t * @param parameterIndex 参数序号\n\t * @return {MethodParameter}\n\t */\n\tpublic MethodParameter getMethodParameter(Constructor<?> constructor, int parameterIndex) {\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(constructor, parameterIndex);\n\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);\n\t\treturn methodParameter;\n\t}\n\n\t/**\n\t * 获取方法参数信息\n\t * @param method 方法\n\t * @param parameterIndex 参数序号\n\t * @return {MethodParameter}\n\t */\n\tpublic MethodParameter getMethodParameter(Method method, int parameterIndex) {\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, parameterIndex);\n\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);\n\t\treturn methodParameter;\n\t}\n\n\t/**\n\t * 获取Annotation\n\t * @param method Method\n\t * @param annotationType 注解类\n\t * @param <A> 泛型标记\n\t * @return {Annotation}\n\t */\n\tpublic <A extends Annotation> A getAnnotation(Method method, Class<A> annotationType) {\n\t\tClass<?> targetClass = method.getDeclaringClass();\n\t\t// The method may be on an interface, but we need attributes from the target\n\t\t// class.\n\t\t// If the target class is null, the method will be unchanged.\n\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n\t\t// If we are dealing with method with generic parameters, find the original\n\t\t// method.\n\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n\t\t// 先找方法，再找方法上的类\n\t\tA annotation = AnnotatedElementUtils.findMergedAnnotation(specificMethod, annotationType);\n\t\t;\n\t\tif (null != annotation) {\n\t\t\treturn annotation;\n\t\t}\n\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), annotationType);\n\t}\n\n\t/**\n\t * 获取Annotation\n\t * @param handlerMethod HandlerMethod\n\t * @param annotationType 注解类\n\t * @param <A> 泛型标记\n\t * @return {Annotation}\n\t */\n\tpublic <A extends Annotation> A getAnnotation(HandlerMethod handlerMethod, Class<A> annotationType) {\n\t\t// 先找方法，再找方法上的类\n\t\tA annotation = handlerMethod.getMethodAnnotation(annotationType);\n\t\tif (null != annotation) {\n\t\t\treturn annotation;\n\t\t}\n\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类\n\t\tClass<?> beanType = handlerMethod.getBeanType();\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(beanType, annotationType);\n\t}\n\n}\n\n```\n\nSpring 上下文工具类\n\n```\npackage com.xoao.sms.common.utils;\n\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationEvent;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author \n * @date 2019/2/1 Spring 工具类\n */\n@Slf4j\n@Service\n@Lazy(false)\npublic class SpringContextHolder implements ApplicationContextAware, DisposableBean {\n\n\tprivate static ApplicationContext applicationContext = null;\n\n\t/**\n\t * 取得存储在静态变量中的ApplicationContext.\n\t */\n\tpublic static ApplicationContext getApplicationContext() {\n\t\treturn applicationContext;\n\t}\n\n\t/**\n\t * 实现ApplicationContextAware接口, 注入Context到静态变量中.\n\t */\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\tSpringContextHolder.applicationContext = applicationContext;\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getBean(String name) {\n\t\treturn (T) applicationContext.getBean(name);\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\tpublic static <T> T getBean(Class<T> requiredType) {\n\t\treturn applicationContext.getBean(requiredType);\n\t}\n\n\t/**\n\t * 清除SpringContextHolder中的ApplicationContext为Null.\n\t */\n\tpublic static void clearHolder() {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"清除SpringContextHolder中的ApplicationContext:\" + applicationContext);\n\t\t}\n\t\tapplicationContext = null;\n\t}\n\n\t/**\n\t * 发布事件\n\t * @param event\n\t */\n\tpublic static void publishEvent(ApplicationEvent event) {\n\t\tif (applicationContext == null) {\n\t\t\treturn;\n\t\t}\n\t\tapplicationContext.publishEvent(event);\n\t}\n\n\t/**\n\t * 实现DisposableBean接口, 在Context关闭时清理静态变量.\n\t */\n\t@Override\n\t@SneakyThrows\n\tpublic void destroy() {\n\t\tSpringContextHolder.clearHolder();\n\t}\n\n}\n```\n\n具体使用\n\n```\nHttpServletResponse response = WebUtils.getResponse();\n        response.setStatus(HttpStatus.HTTP_OK);\n        response.setContentType(ContentType.OCTET_STREAM.toString());\n        response.setHeader(HeaderName.CONTENT_DISPOSITION.getValue(), CharSequenceUtil\n                .format(\"attachment;filename=\\\"{}.txt\\\"\", new String(fileName.getBytes(), StandardCharsets.ISO_8859_1)));\n        // 读取文件并写入响应输出流，IoUtil是hutool工具包下的类\n        IoUtil.write(response.getOutputStream(), content.getBytes());\n```\n\n","source":"_posts/Spring-Web工具类.md","raw":"---\ntitle: Spring Web工具类\ndate: 2023-12-08 10:53:06\ntags: [Spring, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n继承WebUtils类 \n\n```\npackage com.example.common.utils;\n\nimport com.xoao.sms.common.exception.BusinessErrorEnum;\nimport com.xoao.sms.common.exception.BusinessException;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.experimental.UtilityClass;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport org.springframework.web.method.HandlerMethod;\n\nimport java.util.Optional;\n\n/**\n * Miscellaneous utilities for web applications.\n *\n * @author \n */\n@Slf4j\n@UtilityClass\npublic class WebUtils extends org.springframework.web.util.WebUtils {\n\n\t/**\n\t * 判断是否ajax请求 spring ajax 返回含有 ResponseBody 或者 RestController注解\n\t * @param handlerMethod HandlerMethod\n\t * @return 是否ajax请求\n\t */\n\tpublic boolean isBody(HandlerMethod handlerMethod) {\n\t\tResponseBody responseBody = ClassUtils.getAnnotation(handlerMethod, ResponseBody.class);\n\t\treturn responseBody != null;\n\t}\n\n\t/**\n\t * 读取cookie\n\t * @param name cookie name\n\t * @return cookie value\n\t */\n\tpublic String getCookieVal(String name) {\n\t\tif (WebUtils.getRequest().isPresent()) {\n\t\t\treturn getCookieVal(WebUtils.getRequest().get(), name);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 读取cookie\n\t * @param request HttpServletRequest\n\t * @param name cookie name\n\t * @return cookie value\n\t */\n\tpublic String getCookieVal(HttpServletRequest request, String name) {\n\t\tCookie cookie = getCookie(request, name);\n\t\treturn cookie != null ? cookie.getValue() : null;\n\t}\n\n\t/**\n\t * 清除 某个指定的cookie\n\t * @param response HttpServletResponse\n\t * @param key cookie key\n\t */\n\tpublic void removeCookie(HttpServletResponse response, String key) {\n\t\tsetCookie(response, key, null, 0);\n\t}\n\n\t/**\n\t * 设置cookie\n\t * @param response HttpServletResponse\n\t * @param name cookie name\n\t * @param value cookie value\n\t * @param maxAgeInSeconds maxage\n\t */\n\tpublic void setCookie(HttpServletResponse response, String name, String value, int maxAgeInSeconds) {\n\t\tCookie cookie = new Cookie(name, value);\n\t\tcookie.setPath(\"/\");\n\t\tcookie.setMaxAge(maxAgeInSeconds);\n\t\tcookie.setHttpOnly(true);\n\t\tresponse.addCookie(cookie);\n\t}\n\n\t/**\n\t * 获取 HttpServletRequest\n\t * @return {HttpServletRequest}\n\t */\n\tpublic Optional<HttpServletRequest> getRequest() {\n\t\treturn Optional\n\t\t\t.ofNullable(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest());\n\t}\n\n\tpublic HttpServletRequest getRequestOrElseThrow() {\n\t\treturn WebUtils.getRequest().orElseThrow(() -> new BusinessException(BusinessErrorEnum.SYSTEM_ERROR));\n\t}\n\n\t/**\n\t * 获取 HttpServletResponse\n\t * @return {HttpServletResponse}\n\t */\n\tpublic HttpServletResponse getResponse() {\n\t\treturn ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();\n\t}\n\n}\n\n```\n\n类工具类\n\n```\npackage com.xoao.sms.common.utils;\n\nimport lombok.experimental.UtilityClass;\nimport org.springframework.core.BridgeMethodResolver;\nimport org.springframework.core.DefaultParameterNameDiscoverer;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.ParameterNameDiscoverer;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.core.annotation.SynthesizingMethodParameter;\nimport org.springframework.web.method.HandlerMethod;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\n/**\n * 类工具类\n */\n@UtilityClass\npublic class ClassUtils extends org.springframework.util.ClassUtils {\n\n\tprivate final ParameterNameDiscoverer PARAMETERNAMEDISCOVERER = new DefaultParameterNameDiscoverer();\n\n\t/**\n\t * 获取方法参数信息\n\t * @param constructor 构造器\n\t * @param parameterIndex 参数序号\n\t * @return {MethodParameter}\n\t */\n\tpublic MethodParameter getMethodParameter(Constructor<?> constructor, int parameterIndex) {\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(constructor, parameterIndex);\n\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);\n\t\treturn methodParameter;\n\t}\n\n\t/**\n\t * 获取方法参数信息\n\t * @param method 方法\n\t * @param parameterIndex 参数序号\n\t * @return {MethodParameter}\n\t */\n\tpublic MethodParameter getMethodParameter(Method method, int parameterIndex) {\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, parameterIndex);\n\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);\n\t\treturn methodParameter;\n\t}\n\n\t/**\n\t * 获取Annotation\n\t * @param method Method\n\t * @param annotationType 注解类\n\t * @param <A> 泛型标记\n\t * @return {Annotation}\n\t */\n\tpublic <A extends Annotation> A getAnnotation(Method method, Class<A> annotationType) {\n\t\tClass<?> targetClass = method.getDeclaringClass();\n\t\t// The method may be on an interface, but we need attributes from the target\n\t\t// class.\n\t\t// If the target class is null, the method will be unchanged.\n\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n\t\t// If we are dealing with method with generic parameters, find the original\n\t\t// method.\n\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n\t\t// 先找方法，再找方法上的类\n\t\tA annotation = AnnotatedElementUtils.findMergedAnnotation(specificMethod, annotationType);\n\t\t;\n\t\tif (null != annotation) {\n\t\t\treturn annotation;\n\t\t}\n\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), annotationType);\n\t}\n\n\t/**\n\t * 获取Annotation\n\t * @param handlerMethod HandlerMethod\n\t * @param annotationType 注解类\n\t * @param <A> 泛型标记\n\t * @return {Annotation}\n\t */\n\tpublic <A extends Annotation> A getAnnotation(HandlerMethod handlerMethod, Class<A> annotationType) {\n\t\t// 先找方法，再找方法上的类\n\t\tA annotation = handlerMethod.getMethodAnnotation(annotationType);\n\t\tif (null != annotation) {\n\t\t\treturn annotation;\n\t\t}\n\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类\n\t\tClass<?> beanType = handlerMethod.getBeanType();\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(beanType, annotationType);\n\t}\n\n}\n\n```\n\nSpring 上下文工具类\n\n```\npackage com.xoao.sms.common.utils;\n\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationEvent;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author \n * @date 2019/2/1 Spring 工具类\n */\n@Slf4j\n@Service\n@Lazy(false)\npublic class SpringContextHolder implements ApplicationContextAware, DisposableBean {\n\n\tprivate static ApplicationContext applicationContext = null;\n\n\t/**\n\t * 取得存储在静态变量中的ApplicationContext.\n\t */\n\tpublic static ApplicationContext getApplicationContext() {\n\t\treturn applicationContext;\n\t}\n\n\t/**\n\t * 实现ApplicationContextAware接口, 注入Context到静态变量中.\n\t */\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\tSpringContextHolder.applicationContext = applicationContext;\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getBean(String name) {\n\t\treturn (T) applicationContext.getBean(name);\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\tpublic static <T> T getBean(Class<T> requiredType) {\n\t\treturn applicationContext.getBean(requiredType);\n\t}\n\n\t/**\n\t * 清除SpringContextHolder中的ApplicationContext为Null.\n\t */\n\tpublic static void clearHolder() {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"清除SpringContextHolder中的ApplicationContext:\" + applicationContext);\n\t\t}\n\t\tapplicationContext = null;\n\t}\n\n\t/**\n\t * 发布事件\n\t * @param event\n\t */\n\tpublic static void publishEvent(ApplicationEvent event) {\n\t\tif (applicationContext == null) {\n\t\t\treturn;\n\t\t}\n\t\tapplicationContext.publishEvent(event);\n\t}\n\n\t/**\n\t * 实现DisposableBean接口, 在Context关闭时清理静态变量.\n\t */\n\t@Override\n\t@SneakyThrows\n\tpublic void destroy() {\n\t\tSpringContextHolder.clearHolder();\n\t}\n\n}\n```\n\n具体使用\n\n```\nHttpServletResponse response = WebUtils.getResponse();\n        response.setStatus(HttpStatus.HTTP_OK);\n        response.setContentType(ContentType.OCTET_STREAM.toString());\n        response.setHeader(HeaderName.CONTENT_DISPOSITION.getValue(), CharSequenceUtil\n                .format(\"attachment;filename=\\\"{}.txt\\\"\", new String(fileName.getBytes(), StandardCharsets.ISO_8859_1)));\n        // 读取文件并写入响应输出流，IoUtil是hutool工具包下的类\n        IoUtil.write(response.getOutputStream(), content.getBytes());\n```\n\n","slug":"Spring-Web工具类","published":1,"updated":"2024-04-24T07:34:25.929Z","_id":"clpw1tc5x0000z0ap1wzr26vf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>继承WebUtils类 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xoao.sms.common.exception.BusinessErrorEnum;</span><br><span class=\"line\">import com.xoao.sms.common.exception.BusinessException;</span><br><span class=\"line\">import jakarta.servlet.http.Cookie;</span><br><span class=\"line\">import jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import lombok.experimental.UtilityClass;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Miscellaneous utilities for web applications.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author </span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@UtilityClass</span><br><span class=\"line\">public class WebUtils extends org.springframework.web.util.WebUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 判断是否ajax请求 spring ajax 返回含有 ResponseBody 或者 RestController注解</span><br><span class=\"line\">\t * @param handlerMethod HandlerMethod</span><br><span class=\"line\">\t * @return 是否ajax请求</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic boolean isBody(HandlerMethod handlerMethod) &#123;</span><br><span class=\"line\">\t\tResponseBody responseBody = ClassUtils.getAnnotation(handlerMethod, ResponseBody.class);</span><br><span class=\"line\">\t\treturn responseBody != null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 读取cookie</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @return cookie value</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic String getCookieVal(String name) &#123;</span><br><span class=\"line\">\t\tif (WebUtils.getRequest().isPresent()) &#123;</span><br><span class=\"line\">\t\t\treturn getCookieVal(WebUtils.getRequest().get(), name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 读取cookie</span><br><span class=\"line\">\t * @param request HttpServletRequest</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @return cookie value</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic String getCookieVal(HttpServletRequest request, String name) &#123;</span><br><span class=\"line\">\t\tCookie cookie = getCookie(request, name);</span><br><span class=\"line\">\t\treturn cookie != null ? cookie.getValue() : null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 清除 某个指定的cookie</span><br><span class=\"line\">\t * @param response HttpServletResponse</span><br><span class=\"line\">\t * @param key cookie key</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void removeCookie(HttpServletResponse response, String key) &#123;</span><br><span class=\"line\">\t\tsetCookie(response, key, null, 0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 设置cookie</span><br><span class=\"line\">\t * @param response HttpServletResponse</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @param value cookie value</span><br><span class=\"line\">\t * @param maxAgeInSeconds maxage</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void setCookie(HttpServletResponse response, String name, String value, int maxAgeInSeconds) &#123;</span><br><span class=\"line\">\t\tCookie cookie = new Cookie(name, value);</span><br><span class=\"line\">\t\tcookie.setPath(&quot;/&quot;);</span><br><span class=\"line\">\t\tcookie.setMaxAge(maxAgeInSeconds);</span><br><span class=\"line\">\t\tcookie.setHttpOnly(true);</span><br><span class=\"line\">\t\tresponse.addCookie(cookie);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 HttpServletRequest</span><br><span class=\"line\">\t * @return &#123;HttpServletRequest&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic Optional&lt;HttpServletRequest&gt; getRequest() &#123;</span><br><span class=\"line\">\t\treturn Optional</span><br><span class=\"line\">\t\t\t.ofNullable(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic HttpServletRequest getRequestOrElseThrow() &#123;</span><br><span class=\"line\">\t\treturn WebUtils.getRequest().orElseThrow(() -&gt; new BusinessException(BusinessErrorEnum.SYSTEM_ERROR));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 HttpServletResponse</span><br><span class=\"line\">\t * @return &#123;HttpServletResponse&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic HttpServletResponse getResponse() &#123;</span><br><span class=\"line\">\t\treturn ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>类工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xoao.sms.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.experimental.UtilityClass;</span><br><span class=\"line\">import org.springframework.core.BridgeMethodResolver;</span><br><span class=\"line\">import org.springframework.core.DefaultParameterNameDiscoverer;</span><br><span class=\"line\">import org.springframework.core.MethodParameter;</span><br><span class=\"line\">import org.springframework.core.ParameterNameDiscoverer;</span><br><span class=\"line\">import org.springframework.core.annotation.AnnotatedElementUtils;</span><br><span class=\"line\">import org.springframework.core.annotation.SynthesizingMethodParameter;</span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.lang.reflect.Constructor;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 类工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@UtilityClass</span><br><span class=\"line\">public class ClassUtils extends org.springframework.util.ClassUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final ParameterNameDiscoverer PARAMETERNAMEDISCOVERER = new DefaultParameterNameDiscoverer();</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取方法参数信息</span><br><span class=\"line\">\t * @param constructor 构造器</span><br><span class=\"line\">\t * @param parameterIndex 参数序号</span><br><span class=\"line\">\t * @return &#123;MethodParameter&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic MethodParameter getMethodParameter(Constructor&lt;?&gt; constructor, int parameterIndex) &#123;</span><br><span class=\"line\">\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(constructor, parameterIndex);</span><br><span class=\"line\">\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);</span><br><span class=\"line\">\t\treturn methodParameter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取方法参数信息</span><br><span class=\"line\">\t * @param method 方法</span><br><span class=\"line\">\t * @param parameterIndex 参数序号</span><br><span class=\"line\">\t * @return &#123;MethodParameter&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic MethodParameter getMethodParameter(Method method, int parameterIndex) &#123;</span><br><span class=\"line\">\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, parameterIndex);</span><br><span class=\"line\">\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);</span><br><span class=\"line\">\t\treturn methodParameter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取Annotation</span><br><span class=\"line\">\t * @param method Method</span><br><span class=\"line\">\t * @param annotationType 注解类</span><br><span class=\"line\">\t * @param &lt;A&gt; 泛型标记</span><br><span class=\"line\">\t * @return &#123;Annotation&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;A extends Annotation&gt; A getAnnotation(Method method, Class&lt;A&gt; annotationType) &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; targetClass = method.getDeclaringClass();</span><br><span class=\"line\">\t\t// The method may be on an interface, but we need attributes from the target</span><br><span class=\"line\">\t\t// class.</span><br><span class=\"line\">\t\t// If the target class is null, the method will be unchanged.</span><br><span class=\"line\">\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);</span><br><span class=\"line\">\t\t// If we are dealing with method with generic parameters, find the original</span><br><span class=\"line\">\t\t// method.</span><br><span class=\"line\">\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);</span><br><span class=\"line\">\t\t// 先找方法，再找方法上的类</span><br><span class=\"line\">\t\tA annotation = AnnotatedElementUtils.findMergedAnnotation(specificMethod, annotationType);</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t\tif (null != annotation) &#123;</span><br><span class=\"line\">\t\t\treturn annotation;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类</span><br><span class=\"line\">\t\treturn AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), annotationType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取Annotation</span><br><span class=\"line\">\t * @param handlerMethod HandlerMethod</span><br><span class=\"line\">\t * @param annotationType 注解类</span><br><span class=\"line\">\t * @param &lt;A&gt; 泛型标记</span><br><span class=\"line\">\t * @return &#123;Annotation&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;A extends Annotation&gt; A getAnnotation(HandlerMethod handlerMethod, Class&lt;A&gt; annotationType) &#123;</span><br><span class=\"line\">\t\t// 先找方法，再找方法上的类</span><br><span class=\"line\">\t\tA annotation = handlerMethod.getMethodAnnotation(annotationType);</span><br><span class=\"line\">\t\tif (null != annotation) &#123;</span><br><span class=\"line\">\t\t\treturn annotation;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类</span><br><span class=\"line\">\t\tClass&lt;?&gt; beanType = handlerMethod.getBeanType();</span><br><span class=\"line\">\t\treturn AnnotatedElementUtils.findMergedAnnotation(beanType, annotationType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Spring 上下文工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xoao.sms.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.SneakyThrows;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.DisposableBean;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.context.ApplicationEvent;</span><br><span class=\"line\">import org.springframework.context.annotation.Lazy;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author </span><br><span class=\"line\"> * @date 2019/2/1 Spring 工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Lazy(false)</span><br><span class=\"line\">public class SpringContextHolder implements ApplicationContextAware, DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static ApplicationContext applicationContext = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 取得存储在静态变量中的ApplicationContext.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">\t\treturn applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 实现ApplicationContextAware接口, 注入Context到静态变量中.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class=\"line\">\t\tSpringContextHolder.applicationContext = applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(String name) &#123;</span><br><span class=\"line\">\t\treturn (T) applicationContext.getBean(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) &#123;</span><br><span class=\"line\">\t\treturn applicationContext.getBean(requiredType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 清除SpringContextHolder中的ApplicationContext为Null.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void clearHolder() &#123;</span><br><span class=\"line\">\t\tif (log.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlog.debug(&quot;清除SpringContextHolder中的ApplicationContext:&quot; + applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tapplicationContext = null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 发布事件</span><br><span class=\"line\">\t * @param event</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void publishEvent(ApplicationEvent event) &#123;</span><br><span class=\"line\">\t\tif (applicationContext == null) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tapplicationContext.publishEvent(event);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 实现DisposableBean接口, 在Context关闭时清理静态变量.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\t@SneakyThrows</span><br><span class=\"line\">\tpublic void destroy() &#123;</span><br><span class=\"line\">\t\tSpringContextHolder.clearHolder();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletResponse response = WebUtils.getResponse();</span><br><span class=\"line\">        response.setStatus(HttpStatus.HTTP_OK);</span><br><span class=\"line\">        response.setContentType(ContentType.OCTET_STREAM.toString());</span><br><span class=\"line\">        response.setHeader(HeaderName.CONTENT_DISPOSITION.getValue(), CharSequenceUtil</span><br><span class=\"line\">                .format(&quot;attachment;filename=\\&quot;&#123;&#125;.txt\\&quot;&quot;, new String(fileName.getBytes(), StandardCharsets.ISO_8859_1)));</span><br><span class=\"line\">        // 读取文件并写入响应输出流，IoUtil是hutool工具包下的类</span><br><span class=\"line\">        IoUtil.write(response.getOutputStream(), content.getBytes());</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>继承WebUtils类 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xoao.sms.common.exception.BusinessErrorEnum;</span><br><span class=\"line\">import com.xoao.sms.common.exception.BusinessException;</span><br><span class=\"line\">import jakarta.servlet.http.Cookie;</span><br><span class=\"line\">import jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import lombok.experimental.UtilityClass;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Miscellaneous utilities for web applications.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author </span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@UtilityClass</span><br><span class=\"line\">public class WebUtils extends org.springframework.web.util.WebUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 判断是否ajax请求 spring ajax 返回含有 ResponseBody 或者 RestController注解</span><br><span class=\"line\">\t * @param handlerMethod HandlerMethod</span><br><span class=\"line\">\t * @return 是否ajax请求</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic boolean isBody(HandlerMethod handlerMethod) &#123;</span><br><span class=\"line\">\t\tResponseBody responseBody = ClassUtils.getAnnotation(handlerMethod, ResponseBody.class);</span><br><span class=\"line\">\t\treturn responseBody != null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 读取cookie</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @return cookie value</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic String getCookieVal(String name) &#123;</span><br><span class=\"line\">\t\tif (WebUtils.getRequest().isPresent()) &#123;</span><br><span class=\"line\">\t\t\treturn getCookieVal(WebUtils.getRequest().get(), name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 读取cookie</span><br><span class=\"line\">\t * @param request HttpServletRequest</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @return cookie value</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic String getCookieVal(HttpServletRequest request, String name) &#123;</span><br><span class=\"line\">\t\tCookie cookie = getCookie(request, name);</span><br><span class=\"line\">\t\treturn cookie != null ? cookie.getValue() : null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 清除 某个指定的cookie</span><br><span class=\"line\">\t * @param response HttpServletResponse</span><br><span class=\"line\">\t * @param key cookie key</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void removeCookie(HttpServletResponse response, String key) &#123;</span><br><span class=\"line\">\t\tsetCookie(response, key, null, 0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 设置cookie</span><br><span class=\"line\">\t * @param response HttpServletResponse</span><br><span class=\"line\">\t * @param name cookie name</span><br><span class=\"line\">\t * @param value cookie value</span><br><span class=\"line\">\t * @param maxAgeInSeconds maxage</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void setCookie(HttpServletResponse response, String name, String value, int maxAgeInSeconds) &#123;</span><br><span class=\"line\">\t\tCookie cookie = new Cookie(name, value);</span><br><span class=\"line\">\t\tcookie.setPath(&quot;/&quot;);</span><br><span class=\"line\">\t\tcookie.setMaxAge(maxAgeInSeconds);</span><br><span class=\"line\">\t\tcookie.setHttpOnly(true);</span><br><span class=\"line\">\t\tresponse.addCookie(cookie);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 HttpServletRequest</span><br><span class=\"line\">\t * @return &#123;HttpServletRequest&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic Optional&lt;HttpServletRequest&gt; getRequest() &#123;</span><br><span class=\"line\">\t\treturn Optional</span><br><span class=\"line\">\t\t\t.ofNullable(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic HttpServletRequest getRequestOrElseThrow() &#123;</span><br><span class=\"line\">\t\treturn WebUtils.getRequest().orElseThrow(() -&gt; new BusinessException(BusinessErrorEnum.SYSTEM_ERROR));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取 HttpServletResponse</span><br><span class=\"line\">\t * @return &#123;HttpServletResponse&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic HttpServletResponse getResponse() &#123;</span><br><span class=\"line\">\t\treturn ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>类工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xoao.sms.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.experimental.UtilityClass;</span><br><span class=\"line\">import org.springframework.core.BridgeMethodResolver;</span><br><span class=\"line\">import org.springframework.core.DefaultParameterNameDiscoverer;</span><br><span class=\"line\">import org.springframework.core.MethodParameter;</span><br><span class=\"line\">import org.springframework.core.ParameterNameDiscoverer;</span><br><span class=\"line\">import org.springframework.core.annotation.AnnotatedElementUtils;</span><br><span class=\"line\">import org.springframework.core.annotation.SynthesizingMethodParameter;</span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.lang.reflect.Constructor;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 类工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@UtilityClass</span><br><span class=\"line\">public class ClassUtils extends org.springframework.util.ClassUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final ParameterNameDiscoverer PARAMETERNAMEDISCOVERER = new DefaultParameterNameDiscoverer();</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取方法参数信息</span><br><span class=\"line\">\t * @param constructor 构造器</span><br><span class=\"line\">\t * @param parameterIndex 参数序号</span><br><span class=\"line\">\t * @return &#123;MethodParameter&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic MethodParameter getMethodParameter(Constructor&lt;?&gt; constructor, int parameterIndex) &#123;</span><br><span class=\"line\">\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(constructor, parameterIndex);</span><br><span class=\"line\">\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);</span><br><span class=\"line\">\t\treturn methodParameter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取方法参数信息</span><br><span class=\"line\">\t * @param method 方法</span><br><span class=\"line\">\t * @param parameterIndex 参数序号</span><br><span class=\"line\">\t * @return &#123;MethodParameter&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic MethodParameter getMethodParameter(Method method, int parameterIndex) &#123;</span><br><span class=\"line\">\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, parameterIndex);</span><br><span class=\"line\">\t\tmethodParameter.initParameterNameDiscovery(PARAMETERNAMEDISCOVERER);</span><br><span class=\"line\">\t\treturn methodParameter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取Annotation</span><br><span class=\"line\">\t * @param method Method</span><br><span class=\"line\">\t * @param annotationType 注解类</span><br><span class=\"line\">\t * @param &lt;A&gt; 泛型标记</span><br><span class=\"line\">\t * @return &#123;Annotation&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;A extends Annotation&gt; A getAnnotation(Method method, Class&lt;A&gt; annotationType) &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; targetClass = method.getDeclaringClass();</span><br><span class=\"line\">\t\t// The method may be on an interface, but we need attributes from the target</span><br><span class=\"line\">\t\t// class.</span><br><span class=\"line\">\t\t// If the target class is null, the method will be unchanged.</span><br><span class=\"line\">\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);</span><br><span class=\"line\">\t\t// If we are dealing with method with generic parameters, find the original</span><br><span class=\"line\">\t\t// method.</span><br><span class=\"line\">\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);</span><br><span class=\"line\">\t\t// 先找方法，再找方法上的类</span><br><span class=\"line\">\t\tA annotation = AnnotatedElementUtils.findMergedAnnotation(specificMethod, annotationType);</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t\tif (null != annotation) &#123;</span><br><span class=\"line\">\t\t\treturn annotation;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类</span><br><span class=\"line\">\t\treturn AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), annotationType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取Annotation</span><br><span class=\"line\">\t * @param handlerMethod HandlerMethod</span><br><span class=\"line\">\t * @param annotationType 注解类</span><br><span class=\"line\">\t * @param &lt;A&gt; 泛型标记</span><br><span class=\"line\">\t * @return &#123;Annotation&#125;</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;A extends Annotation&gt; A getAnnotation(HandlerMethod handlerMethod, Class&lt;A&gt; annotationType) &#123;</span><br><span class=\"line\">\t\t// 先找方法，再找方法上的类</span><br><span class=\"line\">\t\tA annotation = handlerMethod.getMethodAnnotation(annotationType);</span><br><span class=\"line\">\t\tif (null != annotation) &#123;</span><br><span class=\"line\">\t\t\treturn annotation;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 获取类上面的Annotation，可能包含组合注解，故采用spring的工具类</span><br><span class=\"line\">\t\tClass&lt;?&gt; beanType = handlerMethod.getBeanType();</span><br><span class=\"line\">\t\treturn AnnotatedElementUtils.findMergedAnnotation(beanType, annotationType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Spring 上下文工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xoao.sms.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.SneakyThrows;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.beans.factory.DisposableBean;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.context.ApplicationEvent;</span><br><span class=\"line\">import org.springframework.context.annotation.Lazy;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author </span><br><span class=\"line\"> * @date 2019/2/1 Spring 工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Lazy(false)</span><br><span class=\"line\">public class SpringContextHolder implements ApplicationContextAware, DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static ApplicationContext applicationContext = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 取得存储在静态变量中的ApplicationContext.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">\t\treturn applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 实现ApplicationContextAware接口, 注入Context到静态变量中.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class=\"line\">\t\tSpringContextHolder.applicationContext = applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(String name) &#123;</span><br><span class=\"line\">\t\treturn (T) applicationContext.getBean(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) &#123;</span><br><span class=\"line\">\t\treturn applicationContext.getBean(requiredType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 清除SpringContextHolder中的ApplicationContext为Null.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void clearHolder() &#123;</span><br><span class=\"line\">\t\tif (log.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlog.debug(&quot;清除SpringContextHolder中的ApplicationContext:&quot; + applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tapplicationContext = null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 发布事件</span><br><span class=\"line\">\t * @param event</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void publishEvent(ApplicationEvent event) &#123;</span><br><span class=\"line\">\t\tif (applicationContext == null) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tapplicationContext.publishEvent(event);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 实现DisposableBean接口, 在Context关闭时清理静态变量.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\t@SneakyThrows</span><br><span class=\"line\">\tpublic void destroy() &#123;</span><br><span class=\"line\">\t\tSpringContextHolder.clearHolder();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletResponse response = WebUtils.getResponse();</span><br><span class=\"line\">        response.setStatus(HttpStatus.HTTP_OK);</span><br><span class=\"line\">        response.setContentType(ContentType.OCTET_STREAM.toString());</span><br><span class=\"line\">        response.setHeader(HeaderName.CONTENT_DISPOSITION.getValue(), CharSequenceUtil</span><br><span class=\"line\">                .format(&quot;attachment;filename=\\&quot;&#123;&#125;.txt\\&quot;&quot;, new String(fileName.getBytes(), StandardCharsets.ISO_8859_1)));</span><br><span class=\"line\">        // 读取文件并写入响应输出流，IoUtil是hutool工具包下的类</span><br><span class=\"line\">        IoUtil.write(response.getOutputStream(), content.getBytes());</span><br></pre></td></tr></table></figure>\n\n"},{"title":"hutool工具类","date":"2023-07-16T03:31:58.000Z","_content":"\nhutool涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作，包含以下组件：\n\n![hutool工具类1](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/hutool工具类1.png)\n\n可以根据需求对每个模块单独引入，也可以通过引入`hutool-all`方式引入所有模块。\n\n[中文文档](https://www.hutool.cn/docs/#/)\n\n[api文档](https://apidoc.gitee.com/dromara/hutool/)\n\n","source":"_posts/hutool工具类.md","raw":"---\ntitle: hutool工具类\ndate: 2023-07-16 11:31:58\ntags: [hutool, JAVA, 工具类]\ncategories:\n- [技术, JAVA]\n---\n\nhutool涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作，包含以下组件：\n\n![hutool工具类1](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/hutool工具类1.png)\n\n可以根据需求对每个模块单独引入，也可以通过引入`hutool-all`方式引入所有模块。\n\n[中文文档](https://www.hutool.cn/docs/#/)\n\n[api文档](https://apidoc.gitee.com/dromara/hutool/)\n\n","slug":"hutool工具类","published":1,"updated":"2024-04-24T07:34:25.933Z","_id":"clpw98x200000cgap906u46l1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>hutool涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作，包含以下组件：</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/hutool%E5%B7%A5%E5%85%B7%E7%B1%BB1.png\" alt=\"hutool工具类1\"></p>\n<p>可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块。</p>\n<p><a href=\"https://www.hutool.cn/docs/#/\">中文文档</a></p>\n<p><a href=\"https://apidoc.gitee.com/dromara/hutool/\">api文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>hutool涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作，包含以下组件：</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/hutool%E5%B7%A5%E5%85%B7%E7%B1%BB1.png\" alt=\"hutool工具类1\"></p>\n<p>可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块。</p>\n<p><a href=\"https://www.hutool.cn/docs/#/\">中文文档</a></p>\n<p><a href=\"https://apidoc.gitee.com/dromara/hutool/\">api文档</a></p>\n"},{"title":"工具类常用","date":"2020-12-11T03:43:09.000Z","_content":"\n# 一.集合\n\n##### 1.判空\n\n```\norg.dromara.hutool.core.collection.CollUtil.isNotEmpty(CollectionName)\n```\n\n##### 2.去重\n\n```\norg.dromara.hutool.core.collection.CollUtil.distinc(CollectionName)\n```\n\n\n\n\n\n# 二.IO流\n\n##### 1.写入\n\n```\norg.dromara.hutool.core.io.IoUtil.write(OutputStream out, byte[] content)\n```\n\n##### 2.写出\n\n```\norg.dromara.hutool.core.io.IoUtil.read(InputStream in, Charset charset)\n```\n\n\n\n\n\n# 三.Bean对象\n\n##### 1.属性复制\n\n```\norg.dromara.hutool.core.bean.BeanUtil.copyProperties(Object source, Object target, String... ignoreProperties)\n```\n\n\n\n\n\n# 四.String字符串\n\n## Lang\n\n##### 1.map转String\n\n```\nMap<String, String> map = new HashMap<String, String>();\nmap.put(\"key1\", \"value1\");\nmap.put(\"key2\", \"value2\");\nmap.put(\"key3\", \"value3\");\nSystem.out.println(map.toString());\n```\n\n##### 2.字符串拼接\n\n1）使用StringBuild.append()方法拼接，然后使用StringBuild.toSting()转成String\n\n2）\n\n\n\n## hutool\n\n##### 1.Object转String\n\n```\nJSONUtil.toJsonStr(params)\n```\n\n##### 2.组装String，params替换{}\n\n```\nCharSequenceUtil.format(CharSequence template, Object... params)\n```\n\n\n\n## fastjson\n\n阿里巴巴的开源JSON解析库fastjson，和Json相关首先考虑此包\n\n##### 1.Java对象转换为json字符串，object可以是实体类、list和map \n\n```\nJSON.toJSONString(object); \n```\n\n##### 2.json字符串转换为实体类 \n\n```\nUser user2 = JSON.parseObject(jsonString, User.class); \n```\n\n##### 3.json字符串转换为list集合 \n\n```\nList<T> ts = (List<T>) JSON.parseArray(jsonString, T.class); \nList<JSONObject> list1 = JSON.parseObject(jsonlist, List.class); \n```\n\n##### 4.json字符串转换为map集合 \n\n```\nMap<JSONObject, JSONArray> map1 = JSON.parseObject(jsonmap,Map.class); \n```\n\n\n\n# 五.发送请求\n\n##### 1.发送get请求\n\n```\norg.dromara.hutool.http.HttpUtil.get(String urlString)\n```\n\n##### 2.发送post请求\n\n```\norg.dromara.hutool.http.HttpUtil.post(String urlString, String body)\n```\n\n##### 3.发送其他请求\n\n```\norg.dromara.hutool.http.HttpUtil.send(Request request)\n```\n\n","source":"_posts/工具类常用.md","raw":"---\ntitle: 工具类常用\ndate: 2020-12-11 11:43:09\ntags: [hutool, fastjson, JAVA, 工具类]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.集合\n\n##### 1.判空\n\n```\norg.dromara.hutool.core.collection.CollUtil.isNotEmpty(CollectionName)\n```\n\n##### 2.去重\n\n```\norg.dromara.hutool.core.collection.CollUtil.distinc(CollectionName)\n```\n\n\n\n\n\n# 二.IO流\n\n##### 1.写入\n\n```\norg.dromara.hutool.core.io.IoUtil.write(OutputStream out, byte[] content)\n```\n\n##### 2.写出\n\n```\norg.dromara.hutool.core.io.IoUtil.read(InputStream in, Charset charset)\n```\n\n\n\n\n\n# 三.Bean对象\n\n##### 1.属性复制\n\n```\norg.dromara.hutool.core.bean.BeanUtil.copyProperties(Object source, Object target, String... ignoreProperties)\n```\n\n\n\n\n\n# 四.String字符串\n\n## Lang\n\n##### 1.map转String\n\n```\nMap<String, String> map = new HashMap<String, String>();\nmap.put(\"key1\", \"value1\");\nmap.put(\"key2\", \"value2\");\nmap.put(\"key3\", \"value3\");\nSystem.out.println(map.toString());\n```\n\n##### 2.字符串拼接\n\n1）使用StringBuild.append()方法拼接，然后使用StringBuild.toSting()转成String\n\n2）\n\n\n\n## hutool\n\n##### 1.Object转String\n\n```\nJSONUtil.toJsonStr(params)\n```\n\n##### 2.组装String，params替换{}\n\n```\nCharSequenceUtil.format(CharSequence template, Object... params)\n```\n\n\n\n## fastjson\n\n阿里巴巴的开源JSON解析库fastjson，和Json相关首先考虑此包\n\n##### 1.Java对象转换为json字符串，object可以是实体类、list和map \n\n```\nJSON.toJSONString(object); \n```\n\n##### 2.json字符串转换为实体类 \n\n```\nUser user2 = JSON.parseObject(jsonString, User.class); \n```\n\n##### 3.json字符串转换为list集合 \n\n```\nList<T> ts = (List<T>) JSON.parseArray(jsonString, T.class); \nList<JSONObject> list1 = JSON.parseObject(jsonlist, List.class); \n```\n\n##### 4.json字符串转换为map集合 \n\n```\nMap<JSONObject, JSONArray> map1 = JSON.parseObject(jsonmap,Map.class); \n```\n\n\n\n# 五.发送请求\n\n##### 1.发送get请求\n\n```\norg.dromara.hutool.http.HttpUtil.get(String urlString)\n```\n\n##### 2.发送post请求\n\n```\norg.dromara.hutool.http.HttpUtil.post(String urlString, String body)\n```\n\n##### 3.发送其他请求\n\n```\norg.dromara.hutool.http.HttpUtil.send(Request request)\n```\n\n","slug":"工具类常用","published":1,"updated":"2024-04-24T07:34:25.935Z","_id":"clpw98x210001cgapd9yz3p87","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-集合\"><a href=\"#一-集合\" class=\"headerlink\" title=\"一.集合\"></a>一.集合</h1><h5 id=\"1-判空\"><a href=\"#1-判空\" class=\"headerlink\" title=\"1.判空\"></a>1.判空</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.collection.CollUtil.isNotEmpty(CollectionName)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-去重\"><a href=\"#2-去重\" class=\"headerlink\" title=\"2.去重\"></a>2.去重</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.collection.CollUtil.distinc(CollectionName)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"二-IO流\"><a href=\"#二-IO流\" class=\"headerlink\" title=\"二.IO流\"></a>二.IO流</h1><h5 id=\"1-写入\"><a href=\"#1-写入\" class=\"headerlink\" title=\"1.写入\"></a>1.写入</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.io.IoUtil.write(OutputStream out, byte[] content)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-写出\"><a href=\"#2-写出\" class=\"headerlink\" title=\"2.写出\"></a>2.写出</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.io.IoUtil.read(InputStream in, Charset charset)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"三-Bean对象\"><a href=\"#三-Bean对象\" class=\"headerlink\" title=\"三.Bean对象\"></a>三.Bean对象</h1><h5 id=\"1-属性复制\"><a href=\"#1-属性复制\" class=\"headerlink\" title=\"1.属性复制\"></a>1.属性复制</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.bean.BeanUtil.copyProperties(Object source, Object target, String... ignoreProperties)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"四-String字符串\"><a href=\"#四-String字符串\" class=\"headerlink\" title=\"四.String字符串\"></a>四.String字符串</h1><h2 id=\"Lang\"><a href=\"#Lang\" class=\"headerlink\" title=\"Lang\"></a>Lang</h2><h5 id=\"1-map转String\"><a href=\"#1-map转String\" class=\"headerlink\" title=\"1.map转String\"></a>1.map转String</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class=\"line\">map.put(&quot;key2&quot;, &quot;value2&quot;);</span><br><span class=\"line\">map.put(&quot;key3&quot;, &quot;value3&quot;);</span><br><span class=\"line\">System.out.println(map.toString());</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-字符串拼接\"><a href=\"#2-字符串拼接\" class=\"headerlink\" title=\"2.字符串拼接\"></a>2.字符串拼接</h5><p>1）使用StringBuild.append()方法拼接，然后使用StringBuild.toSting()转成String</p>\n<p>2）</p>\n<h2 id=\"hutool\"><a href=\"#hutool\" class=\"headerlink\" title=\"hutool\"></a>hutool</h2><h5 id=\"1-Object转String\"><a href=\"#1-Object转String\" class=\"headerlink\" title=\"1.Object转String\"></a>1.Object转String</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONUtil.toJsonStr(params)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-组装String，params替换\"><a href=\"#2-组装String，params替换\" class=\"headerlink\" title=\"2.组装String，params替换{}\"></a>2.组装String，params替换{}</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CharSequenceUtil.format(CharSequence template, Object... params)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h2><p>阿里巴巴的开源JSON解析库fastjson，和Json相关首先考虑此包</p>\n<h5 id=\"1-Java对象转换为json字符串，object可以是实体类、list和map\"><a href=\"#1-Java对象转换为json字符串，object可以是实体类、list和map\" class=\"headerlink\" title=\"1.Java对象转换为json字符串，object可以是实体类、list和map\"></a>1.Java对象转换为json字符串，object可以是实体类、list和map</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.toJSONString(object); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-json字符串转换为实体类\"><a href=\"#2-json字符串转换为实体类\" class=\"headerlink\" title=\"2.json字符串转换为实体类\"></a>2.json字符串转换为实体类</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user2 = JSON.parseObject(jsonString, User.class); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-json字符串转换为list集合\"><a href=\"#3-json字符串转换为list集合\" class=\"headerlink\" title=\"3.json字符串转换为list集合\"></a>3.json字符串转换为list集合</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt; ts = (List&lt;T&gt;) JSON.parseArray(jsonString, T.class); </span><br><span class=\"line\">List&lt;JSONObject&gt; list1 = JSON.parseObject(jsonlist, List.class); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-json字符串转换为map集合\"><a href=\"#4-json字符串转换为map集合\" class=\"headerlink\" title=\"4.json字符串转换为map集合\"></a>4.json字符串转换为map集合</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;JSONObject, JSONArray&gt; map1 = JSON.parseObject(jsonmap,Map.class); </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"五-发送请求\"><a href=\"#五-发送请求\" class=\"headerlink\" title=\"五.发送请求\"></a>五.发送请求</h1><h5 id=\"1-发送get请求\"><a href=\"#1-发送get请求\" class=\"headerlink\" title=\"1.发送get请求\"></a>1.发送get请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.get(String urlString)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-发送post请求\"><a href=\"#2-发送post请求\" class=\"headerlink\" title=\"2.发送post请求\"></a>2.发送post请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.post(String urlString, String body)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-发送其他请求\"><a href=\"#3-发送其他请求\" class=\"headerlink\" title=\"3.发送其他请求\"></a>3.发送其他请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.send(Request request)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-集合\"><a href=\"#一-集合\" class=\"headerlink\" title=\"一.集合\"></a>一.集合</h1><h5 id=\"1-判空\"><a href=\"#1-判空\" class=\"headerlink\" title=\"1.判空\"></a>1.判空</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.collection.CollUtil.isNotEmpty(CollectionName)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-去重\"><a href=\"#2-去重\" class=\"headerlink\" title=\"2.去重\"></a>2.去重</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.collection.CollUtil.distinc(CollectionName)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"二-IO流\"><a href=\"#二-IO流\" class=\"headerlink\" title=\"二.IO流\"></a>二.IO流</h1><h5 id=\"1-写入\"><a href=\"#1-写入\" class=\"headerlink\" title=\"1.写入\"></a>1.写入</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.io.IoUtil.write(OutputStream out, byte[] content)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-写出\"><a href=\"#2-写出\" class=\"headerlink\" title=\"2.写出\"></a>2.写出</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.io.IoUtil.read(InputStream in, Charset charset)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"三-Bean对象\"><a href=\"#三-Bean对象\" class=\"headerlink\" title=\"三.Bean对象\"></a>三.Bean对象</h1><h5 id=\"1-属性复制\"><a href=\"#1-属性复制\" class=\"headerlink\" title=\"1.属性复制\"></a>1.属性复制</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.core.bean.BeanUtil.copyProperties(Object source, Object target, String... ignoreProperties)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"四-String字符串\"><a href=\"#四-String字符串\" class=\"headerlink\" title=\"四.String字符串\"></a>四.String字符串</h1><h2 id=\"Lang\"><a href=\"#Lang\" class=\"headerlink\" title=\"Lang\"></a>Lang</h2><h5 id=\"1-map转String\"><a href=\"#1-map转String\" class=\"headerlink\" title=\"1.map转String\"></a>1.map转String</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class=\"line\">map.put(&quot;key2&quot;, &quot;value2&quot;);</span><br><span class=\"line\">map.put(&quot;key3&quot;, &quot;value3&quot;);</span><br><span class=\"line\">System.out.println(map.toString());</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-字符串拼接\"><a href=\"#2-字符串拼接\" class=\"headerlink\" title=\"2.字符串拼接\"></a>2.字符串拼接</h5><p>1）使用StringBuild.append()方法拼接，然后使用StringBuild.toSting()转成String</p>\n<p>2）</p>\n<h2 id=\"hutool\"><a href=\"#hutool\" class=\"headerlink\" title=\"hutool\"></a>hutool</h2><h5 id=\"1-Object转String\"><a href=\"#1-Object转String\" class=\"headerlink\" title=\"1.Object转String\"></a>1.Object转String</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONUtil.toJsonStr(params)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-组装String，params替换\"><a href=\"#2-组装String，params替换\" class=\"headerlink\" title=\"2.组装String，params替换{}\"></a>2.组装String，params替换{}</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CharSequenceUtil.format(CharSequence template, Object... params)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h2><p>阿里巴巴的开源JSON解析库fastjson，和Json相关首先考虑此包</p>\n<h5 id=\"1-Java对象转换为json字符串，object可以是实体类、list和map\"><a href=\"#1-Java对象转换为json字符串，object可以是实体类、list和map\" class=\"headerlink\" title=\"1.Java对象转换为json字符串，object可以是实体类、list和map\"></a>1.Java对象转换为json字符串，object可以是实体类、list和map</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.toJSONString(object); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-json字符串转换为实体类\"><a href=\"#2-json字符串转换为实体类\" class=\"headerlink\" title=\"2.json字符串转换为实体类\"></a>2.json字符串转换为实体类</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user2 = JSON.parseObject(jsonString, User.class); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-json字符串转换为list集合\"><a href=\"#3-json字符串转换为list集合\" class=\"headerlink\" title=\"3.json字符串转换为list集合\"></a>3.json字符串转换为list集合</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt; ts = (List&lt;T&gt;) JSON.parseArray(jsonString, T.class); </span><br><span class=\"line\">List&lt;JSONObject&gt; list1 = JSON.parseObject(jsonlist, List.class); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-json字符串转换为map集合\"><a href=\"#4-json字符串转换为map集合\" class=\"headerlink\" title=\"4.json字符串转换为map集合\"></a>4.json字符串转换为map集合</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;JSONObject, JSONArray&gt; map1 = JSON.parseObject(jsonmap,Map.class); </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"五-发送请求\"><a href=\"#五-发送请求\" class=\"headerlink\" title=\"五.发送请求\"></a>五.发送请求</h1><h5 id=\"1-发送get请求\"><a href=\"#1-发送get请求\" class=\"headerlink\" title=\"1.发送get请求\"></a>1.发送get请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.get(String urlString)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-发送post请求\"><a href=\"#2-发送post请求\" class=\"headerlink\" title=\"2.发送post请求\"></a>2.发送post请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.post(String urlString, String body)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-发送其他请求\"><a href=\"#3-发送其他请求\" class=\"headerlink\" title=\"3.发送其他请求\"></a>3.发送其他请求</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.dromara.hutool.http.HttpUtil.send(Request request)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"请求头信息","date":"2022-02-28T07:48:01.000Z","_content":"","source":"_posts/请求头信息.md","raw":"---\ntitle: 请求头信息\ndate: 2022-02-28 15:48:01\ntags: [request, 前端]\ncategories:\n- [技术, 前端]\n---\n","slug":"请求头信息","published":1,"updated":"2024-04-24T07:34:25.938Z","_id":"clpwbvwjf0001uoaphfhybpfv","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"git上传文件（超过100MB）","date":"2021-12-23T02:37:09.000Z","_content":"\n### **问题：git无法上传超过100mb的文件**\n\n### 解决方法：\n\n#### 1.安装lfs（windows10）\n\n进入[git-lfs官网](https://git-lfs.com/)下载安装包，双击安装程序按提示安装即可。\n\n#### 2.开启lfs功能\n\n```\ngit lfs install\n```\n\n#### 3.选择文件类型（）这里选择的是zip类型\n\n```\ngit lfs track \"*.zip\"\n```\n\n#### 4.然后配置远程仓库\n\n执行完上面的命令后，会生成一个.gitattributes文件，要将其上传到远程gitee仓库。这里我把.gitattributes和大文件分开上传。\n\n```\n$ git add .gitattributes\n$ git commit -m '上传文件'\n$ git push origin master（如果提交不了，后面可以加一个-f）\n```\n\n####  5.上传大文件\n\n```\ngit add mysql-5.7.36-win64.zip\ngit commit -m \"上传MySQL安装包\"\ngit push origin master\n```\n\n####  6.解决报错\n\n这里的报错主要有两个\n\nWARNING: Authentication error: Authentication required: LFS only supported repository in paid enterprise.\nbatch response: LFS only supported repository in paid enterprise.\n\n#####  6.1.第一个错误的解决方式是\n\ngit config lfs.https://gitee.com/{your_gitee}/{your_repo}.git/info/lfs.locksverify false\n命令中的{your_gitee}/{your_repo}是你的远程仓库地址，根据自己情况替换。\n\n##### 6.2.第二个错误的解决方式\n\n```vbscript\nbatch response: LFS only supported repository in paid enterprise.\n```\n\n删除`./git/hooks/pre-push`文件\n\n```bash\nrm .git/hooks/pre-push\n```\n\n#### 7.上传文件\n\n```\ngit push orgin master\n```\n\n","source":"_posts/git上传文件（超过100MB）.md","raw":"---\ntitle: git上传文件（超过100MB）\ndate: 2021-12-23 10:37:09\ntags: [gitee, JAVA, 项目管理]\ncategories:\n- [技术, JAVA]\n---\n\n### **问题：git无法上传超过100mb的文件**\n\n### 解决方法：\n\n#### 1.安装lfs（windows10）\n\n进入[git-lfs官网](https://git-lfs.com/)下载安装包，双击安装程序按提示安装即可。\n\n#### 2.开启lfs功能\n\n```\ngit lfs install\n```\n\n#### 3.选择文件类型（）这里选择的是zip类型\n\n```\ngit lfs track \"*.zip\"\n```\n\n#### 4.然后配置远程仓库\n\n执行完上面的命令后，会生成一个.gitattributes文件，要将其上传到远程gitee仓库。这里我把.gitattributes和大文件分开上传。\n\n```\n$ git add .gitattributes\n$ git commit -m '上传文件'\n$ git push origin master（如果提交不了，后面可以加一个-f）\n```\n\n####  5.上传大文件\n\n```\ngit add mysql-5.7.36-win64.zip\ngit commit -m \"上传MySQL安装包\"\ngit push origin master\n```\n\n####  6.解决报错\n\n这里的报错主要有两个\n\nWARNING: Authentication error: Authentication required: LFS only supported repository in paid enterprise.\nbatch response: LFS only supported repository in paid enterprise.\n\n#####  6.1.第一个错误的解决方式是\n\ngit config lfs.https://gitee.com/{your_gitee}/{your_repo}.git/info/lfs.locksverify false\n命令中的{your_gitee}/{your_repo}是你的远程仓库地址，根据自己情况替换。\n\n##### 6.2.第二个错误的解决方式\n\n```vbscript\nbatch response: LFS only supported repository in paid enterprise.\n```\n\n删除`./git/hooks/pre-push`文件\n\n```bash\nrm .git/hooks/pre-push\n```\n\n#### 7.上传文件\n\n```\ngit push orgin master\n```\n\n","slug":"git上传文件（超过100MB）","published":1,"updated":"2024-04-24T07:34:25.931Z","_id":"clq0buvwx0000b4apg24d4llf","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题：git无法上传超过100mb的文件\"><a href=\"#问题：git无法上传超过100mb的文件\" class=\"headerlink\" title=\"问题：git无法上传超过100mb的文件\"></a><strong>问题：git无法上传超过100mb的文件</strong></h3><h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><h4 id=\"1-安装lfs（windows10）\"><a href=\"#1-安装lfs（windows10）\" class=\"headerlink\" title=\"1.安装lfs（windows10）\"></a>1.安装lfs（windows10）</h4><p>进入<a href=\"https://git-lfs.com/\">git-lfs官网</a>下载安装包，双击安装程序按提示安装即可。</p>\n<h4 id=\"2-开启lfs功能\"><a href=\"#2-开启lfs功能\" class=\"headerlink\" title=\"2.开启lfs功能\"></a>2.开启lfs功能</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-选择文件类型（）这里选择的是zip类型\"><a href=\"#3-选择文件类型（）这里选择的是zip类型\" class=\"headerlink\" title=\"3.选择文件类型（）这里选择的是zip类型\"></a>3.选择文件类型（）这里选择的是zip类型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track &quot;*.zip&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-然后配置远程仓库\"><a href=\"#4-然后配置远程仓库\" class=\"headerlink\" title=\"4.然后配置远程仓库\"></a>4.然后配置远程仓库</h4><p>执行完上面的命令后，会生成一个.gitattributes文件，要将其上传到远程gitee仓库。这里我把.gitattributes和大文件分开上传。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .gitattributes</span><br><span class=\"line\">$ git commit -m &#x27;上传文件&#x27;</span><br><span class=\"line\">$ git push origin master（如果提交不了，后面可以加一个-f）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-上传大文件\"><a href=\"#5-上传大文件\" class=\"headerlink\" title=\"5.上传大文件\"></a>5.上传大文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add mysql-5.7.36-win64.zip</span><br><span class=\"line\">git commit -m &quot;上传MySQL安装包&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-解决报错\"><a href=\"#6-解决报错\" class=\"headerlink\" title=\"6.解决报错\"></a>6.解决报错</h4><p>这里的报错主要有两个</p>\n<p>WARNING: Authentication error: Authentication required: LFS only supported repository in paid enterprise.<br>batch response: LFS only supported repository in paid enterprise.</p>\n<h5 id=\"6-1-第一个错误的解决方式是\"><a href=\"#6-1-第一个错误的解决方式是\" class=\"headerlink\" title=\"6.1.第一个错误的解决方式是\"></a>6.1.第一个错误的解决方式是</h5><p>git config lfs.<a href=\"https://gitee.com/%7Byour_gitee%7D/%7Byour_repo%7D.git/info/lfs.locksverify\">https://gitee.com/{your_gitee}/{your_repo}.git/info/lfs.locksverify</a> false<br>命令中的{your_gitee}&#x2F;{your_repo}是你的远程仓库地址，根据自己情况替换。</p>\n<h5 id=\"6-2-第二个错误的解决方式\"><a href=\"#6-2-第二个错误的解决方式\" class=\"headerlink\" title=\"6.2.第二个错误的解决方式\"></a>6.2.第二个错误的解决方式</h5><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">batch <span class=\"built_in\">response</span>: LFS only supported repository <span class=\"keyword\">in</span> paid enterprise.</span><br></pre></td></tr></table></figure>\n\n<p>删除<code>./git/hooks/pre-push</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> .git/hooks/pre-push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-上传文件\"><a href=\"#7-上传文件\" class=\"headerlink\" title=\"7.上传文件\"></a>7.上传文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push orgin master</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题：git无法上传超过100mb的文件\"><a href=\"#问题：git无法上传超过100mb的文件\" class=\"headerlink\" title=\"问题：git无法上传超过100mb的文件\"></a><strong>问题：git无法上传超过100mb的文件</strong></h3><h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><h4 id=\"1-安装lfs（windows10）\"><a href=\"#1-安装lfs（windows10）\" class=\"headerlink\" title=\"1.安装lfs（windows10）\"></a>1.安装lfs（windows10）</h4><p>进入<a href=\"https://git-lfs.com/\">git-lfs官网</a>下载安装包，双击安装程序按提示安装即可。</p>\n<h4 id=\"2-开启lfs功能\"><a href=\"#2-开启lfs功能\" class=\"headerlink\" title=\"2.开启lfs功能\"></a>2.开启lfs功能</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-选择文件类型（）这里选择的是zip类型\"><a href=\"#3-选择文件类型（）这里选择的是zip类型\" class=\"headerlink\" title=\"3.选择文件类型（）这里选择的是zip类型\"></a>3.选择文件类型（）这里选择的是zip类型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track &quot;*.zip&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-然后配置远程仓库\"><a href=\"#4-然后配置远程仓库\" class=\"headerlink\" title=\"4.然后配置远程仓库\"></a>4.然后配置远程仓库</h4><p>执行完上面的命令后，会生成一个.gitattributes文件，要将其上传到远程gitee仓库。这里我把.gitattributes和大文件分开上传。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .gitattributes</span><br><span class=\"line\">$ git commit -m &#x27;上传文件&#x27;</span><br><span class=\"line\">$ git push origin master（如果提交不了，后面可以加一个-f）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-上传大文件\"><a href=\"#5-上传大文件\" class=\"headerlink\" title=\"5.上传大文件\"></a>5.上传大文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add mysql-5.7.36-win64.zip</span><br><span class=\"line\">git commit -m &quot;上传MySQL安装包&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-解决报错\"><a href=\"#6-解决报错\" class=\"headerlink\" title=\"6.解决报错\"></a>6.解决报错</h4><p>这里的报错主要有两个</p>\n<p>WARNING: Authentication error: Authentication required: LFS only supported repository in paid enterprise.<br>batch response: LFS only supported repository in paid enterprise.</p>\n<h5 id=\"6-1-第一个错误的解决方式是\"><a href=\"#6-1-第一个错误的解决方式是\" class=\"headerlink\" title=\"6.1.第一个错误的解决方式是\"></a>6.1.第一个错误的解决方式是</h5><p>git config lfs.<a href=\"https://gitee.com/%7Byour_gitee%7D/%7Byour_repo%7D.git/info/lfs.locksverify\">https://gitee.com/{your_gitee}/{your_repo}.git/info/lfs.locksverify</a> false<br>命令中的{your_gitee}&#x2F;{your_repo}是你的远程仓库地址，根据自己情况替换。</p>\n<h5 id=\"6-2-第二个错误的解决方式\"><a href=\"#6-2-第二个错误的解决方式\" class=\"headerlink\" title=\"6.2.第二个错误的解决方式\"></a>6.2.第二个错误的解决方式</h5><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">batch <span class=\"built_in\">response</span>: LFS only supported repository <span class=\"keyword\">in</span> paid enterprise.</span><br></pre></td></tr></table></figure>\n\n<p>删除<code>./git/hooks/pre-push</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> .git/hooks/pre-push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-上传文件\"><a href=\"#7-上传文件\" class=\"headerlink\" title=\"7.上传文件\"></a>7.上传文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push orgin master</span><br></pre></td></tr></table></figure>\n\n"},{"title":"hexo部署gitee","date":"2020-12-05T09:50:23.000Z","_content":"\n1. 访问[官网](https://hexo.io/zh-cn/index.html)，获取hexo源码\n\n2. 在gitee网站，新建仓库\n\n   ```\n   git config --global user.email \"你的邮箱\"\n   git config --global user.name \"用户名\"\n   ```\n\n3. 获取SSH公钥\n\n   ```\n   // 通过命令 ssh-keygen 生成 SSH Key\n   ssh-keygen -t rsa -C \"你的邮箱\"\n   // 读取公钥文件\n   cat ~/.ssh/id_rsa.pub\n   ```\n\n4. 将公钥复制，在gitee官网设置中，添加公钥\n\n5. 通过 `ssh -T` 测试，输出 SSH Key 绑定的**用户名**\n\n   ```\n   $ ssh -T git@gitee.com\n   Hi USERNAME! You've successfully authenticated, but GITEE.COM does not provide shell access.\n   ```\n\n6. 安装，完成后可以部署到gitee\n\n   ```\n   npm install hexo-deployer-git --save\n   ```\n\n7. 生成网页\n\n   ```\n   hexo g\n   ```\n\n8. 本地运行，预览网页\n\n   ```\n   hexo s\n   ```\n\n9. 部署博客\n\n   ```\n   hexo d\n   ```\n\n","source":"_posts/hexo部署gitee.md","raw":"---\ntitle: hexo部署gitee\ndate: 2020-12-05 17:50:23\ntags: [hexo, 博客, gitee]\ncategories:\n- [技术, 博客]\n---\n\n1. 访问[官网](https://hexo.io/zh-cn/index.html)，获取hexo源码\n\n2. 在gitee网站，新建仓库\n\n   ```\n   git config --global user.email \"你的邮箱\"\n   git config --global user.name \"用户名\"\n   ```\n\n3. 获取SSH公钥\n\n   ```\n   // 通过命令 ssh-keygen 生成 SSH Key\n   ssh-keygen -t rsa -C \"你的邮箱\"\n   // 读取公钥文件\n   cat ~/.ssh/id_rsa.pub\n   ```\n\n4. 将公钥复制，在gitee官网设置中，添加公钥\n\n5. 通过 `ssh -T` 测试，输出 SSH Key 绑定的**用户名**\n\n   ```\n   $ ssh -T git@gitee.com\n   Hi USERNAME! You've successfully authenticated, but GITEE.COM does not provide shell access.\n   ```\n\n6. 安装，完成后可以部署到gitee\n\n   ```\n   npm install hexo-deployer-git --save\n   ```\n\n7. 生成网页\n\n   ```\n   hexo g\n   ```\n\n8. 本地运行，预览网页\n\n   ```\n   hexo s\n   ```\n\n9. 部署博客\n\n   ```\n   hexo d\n   ```\n\n","slug":"hexo部署gitee","published":1,"updated":"2024-04-24T07:34:25.932Z","_id":"clq0buvx10001b4ap2ovk3rzh","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>访问<a href=\"https://hexo.io/zh-cn/index.html\">官网</a>，获取hexo源码</p>\n</li>\n<li><p>在gitee网站，新建仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email &quot;你的邮箱&quot;</span><br><span class=\"line\">git config --global user.name &quot;用户名&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取SSH公钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过命令 ssh-keygen 生成 SSH Key</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class=\"line\">// 读取公钥文件</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将公钥复制，在gitee官网设置中，添加公钥</p>\n</li>\n<li><p>通过 <code>ssh -T</code> 测试，输出 SSH Key 绑定的<strong>用户名</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@gitee.com</span><br><span class=\"line\">Hi USERNAME! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装，完成后可以部署到gitee</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成网页</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地运行，预览网页</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署博客</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>访问<a href=\"https://hexo.io/zh-cn/index.html\">官网</a>，获取hexo源码</p>\n</li>\n<li><p>在gitee网站，新建仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email &quot;你的邮箱&quot;</span><br><span class=\"line\">git config --global user.name &quot;用户名&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取SSH公钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过命令 ssh-keygen 生成 SSH Key</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class=\"line\">// 读取公钥文件</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将公钥复制，在gitee官网设置中，添加公钥</p>\n</li>\n<li><p>通过 <code>ssh -T</code> 测试，输出 SSH Key 绑定的<strong>用户名</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@gitee.com</span><br><span class=\"line\">Hi USERNAME! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装，完成后可以部署到gitee</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成网页</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地运行，预览网页</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署博客</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Java数据结构LinkedList，ArrayList，HashMap，TreeMap等集合的类实现","date":"2022-01-05T01:40:52.000Z","_content":"\n# 一.概述\n\nlist集合\n\n​\tArrayList（有序，可重复，底层结构数组）\n\n​\tLinkedList（有序，可重复，底层结构链表，双向链表）\n\nSet集合\n\n​\tHashSet（无序，不可重复，底层HashMap） \n\n​\tLinkedHashSet （有序，不可重复，底层链表 和 哈希表）\n\n​\tTreeSet（无序，不可重复，可排序，底层TreeMap）\n\nMap集合：\n\n​    HashMap（无序，不可重复，哈希表结构）\n\n​    LinkedHashMap（有序，可重复，哈希表结构+链表结构，单向链表）\n\n​    TreeMap（有序，不可重复，可排序，默认升序，底层结构红黑树）\n\n\n\n# 二.map集合的使用\n\n​\t\t1、一般情况下，我们用的最多的是HashMap。HashMap里面存入的键值对在取出的时候是随机的，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。在Map 中**插入、删除和定位元素**，HashMap 是最好的选择。\n　　2、TreeMap取出来的是排序后的键值对。但如果您要**按自然顺序或自定义顺序遍历键**，那么TreeMap会更好。\n　　3、LinkedHashMap 是HashMap的一个子类，它内部有一个链表，保持Key插入的顺序。如果需要**输出的顺序和输入的相同**,那么用LinkedHashMap可以实现,它还可以按读取顺序来排列，像连接池中可以应用。\n\n","source":"_posts/Java数据结构LinkedList，ArrayList，HashMap，TreeMap的类实现.md","raw":"---\ntitle: Java数据结构LinkedList，ArrayList，HashMap，TreeMap等集合的类实现\ndate: 2022-01-05 09:40:52\ntags: [JAVA, 底层, 数据结构]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.概述\n\nlist集合\n\n​\tArrayList（有序，可重复，底层结构数组）\n\n​\tLinkedList（有序，可重复，底层结构链表，双向链表）\n\nSet集合\n\n​\tHashSet（无序，不可重复，底层HashMap） \n\n​\tLinkedHashSet （有序，不可重复，底层链表 和 哈希表）\n\n​\tTreeSet（无序，不可重复，可排序，底层TreeMap）\n\nMap集合：\n\n​    HashMap（无序，不可重复，哈希表结构）\n\n​    LinkedHashMap（有序，可重复，哈希表结构+链表结构，单向链表）\n\n​    TreeMap（有序，不可重复，可排序，默认升序，底层结构红黑树）\n\n\n\n# 二.map集合的使用\n\n​\t\t1、一般情况下，我们用的最多的是HashMap。HashMap里面存入的键值对在取出的时候是随机的，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。在Map 中**插入、删除和定位元素**，HashMap 是最好的选择。\n　　2、TreeMap取出来的是排序后的键值对。但如果您要**按自然顺序或自定义顺序遍历键**，那么TreeMap会更好。\n　　3、LinkedHashMap 是HashMap的一个子类，它内部有一个链表，保持Key插入的顺序。如果需要**输出的顺序和输入的相同**,那么用LinkedHashMap可以实现,它还可以按读取顺序来排列，像连接池中可以应用。\n\n","slug":"Java数据结构LinkedList，ArrayList，HashMap，TreeMap的类实现","published":1,"updated":"2024-04-24T07:34:25.922Z","_id":"clswk55810000lcap691380s8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一.概述\"></a>一.概述</h1><p>list集合</p>\n<p>​\tArrayList（有序，可重复，底层结构数组）</p>\n<p>​\tLinkedList（有序，可重复，底层结构链表，双向链表）</p>\n<p>Set集合</p>\n<p>​\tHashSet（无序，不可重复，底层HashMap） </p>\n<p>​\tLinkedHashSet （有序，不可重复，底层链表 和 哈希表）</p>\n<p>​\tTreeSet（无序，不可重复，可排序，底层TreeMap）</p>\n<p>Map集合：</p>\n<p>​    HashMap（无序，不可重复，哈希表结构）</p>\n<p>​    LinkedHashMap（有序，可重复，哈希表结构+链表结构，单向链表）</p>\n<p>​    TreeMap（有序，不可重复，可排序，默认升序，底层结构红黑树）</p>\n<h1 id=\"二-map集合的使用\"><a href=\"#二-map集合的使用\" class=\"headerlink\" title=\"二.map集合的使用\"></a>二.map集合的使用</h1><p>​\t\t1、一般情况下，我们用的最多的是HashMap。HashMap里面存入的键值对在取出的时候是随机的，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。在Map 中<strong>插入、删除和定位元素</strong>，HashMap 是最好的选择。<br>　　2、TreeMap取出来的是排序后的键值对。但如果您要<strong>按自然顺序或自定义顺序遍历键</strong>，那么TreeMap会更好。<br>　　3、LinkedHashMap 是HashMap的一个子类，它内部有一个链表，保持Key插入的顺序。如果需要<strong>输出的顺序和输入的相同</strong>,那么用LinkedHashMap可以实现,它还可以按读取顺序来排列，像连接池中可以应用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一.概述\"></a>一.概述</h1><p>list集合</p>\n<p>​\tArrayList（有序，可重复，底层结构数组）</p>\n<p>​\tLinkedList（有序，可重复，底层结构链表，双向链表）</p>\n<p>Set集合</p>\n<p>​\tHashSet（无序，不可重复，底层HashMap） </p>\n<p>​\tLinkedHashSet （有序，不可重复，底层链表 和 哈希表）</p>\n<p>​\tTreeSet（无序，不可重复，可排序，底层TreeMap）</p>\n<p>Map集合：</p>\n<p>​    HashMap（无序，不可重复，哈希表结构）</p>\n<p>​    LinkedHashMap（有序，可重复，哈希表结构+链表结构，单向链表）</p>\n<p>​    TreeMap（有序，不可重复，可排序，默认升序，底层结构红黑树）</p>\n<h1 id=\"二-map集合的使用\"><a href=\"#二-map集合的使用\" class=\"headerlink\" title=\"二.map集合的使用\"></a>二.map集合的使用</h1><p>​\t\t1、一般情况下，我们用的最多的是HashMap。HashMap里面存入的键值对在取出的时候是随机的，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。在Map 中<strong>插入、删除和定位元素</strong>，HashMap 是最好的选择。<br>　　2、TreeMap取出来的是排序后的键值对。但如果您要<strong>按自然顺序或自定义顺序遍历键</strong>，那么TreeMap会更好。<br>　　3、LinkedHashMap 是HashMap的一个子类，它内部有一个链表，保持Key插入的顺序。如果需要<strong>输出的顺序和输入的相同</strong>,那么用LinkedHashMap可以实现,它还可以按读取顺序来排列，像连接池中可以应用。</p>\n"},{"title":"Java数据结构哈希表的类实现","date":"2021-12-25T02:26:16.000Z","_content":"\n# 1.定义\n\n哈希表是将一组关键字根据散列算法，确定存放位置的数据结构\n\n\n\n# 2.用途\n\n哈希表由于是算法计算出的存储位置，可以不用遍历，直接根据关键字获取vaule，大大提升查询效率\n\n在HashMap，HashSet，LinkedHashSet ，LinkedHashMap中(带hash)都可以找到哈希表的实现\n\n\n\n# 3.使用哈希表带来的问题\n\nhash冲突，关键字不一样，但是f(key)一样\n\n## 1）如何减少hash冲突\n\n使用更好的散列算法\n\n## 2）如何处理hash冲突\n\n再哈希法即选取若干个不同的哈希函数，在产生哈希冲突的时候计算另一个哈希函数，直到不再发生冲突为止。\n","source":"_posts/Java数据结构哈希表的类实现.md","raw":"---\ntitle: Java数据结构哈希表的类实现\ndate: 2021-12-25 10:26:16\ntags: [JAVA, 底层, 数据结构]\ncategories:\n- [技术, JAVA]\n---\n\n# 1.定义\n\n哈希表是将一组关键字根据散列算法，确定存放位置的数据结构\n\n\n\n# 2.用途\n\n哈希表由于是算法计算出的存储位置，可以不用遍历，直接根据关键字获取vaule，大大提升查询效率\n\n在HashMap，HashSet，LinkedHashSet ，LinkedHashMap中(带hash)都可以找到哈希表的实现\n\n\n\n# 3.使用哈希表带来的问题\n\nhash冲突，关键字不一样，但是f(key)一样\n\n## 1）如何减少hash冲突\n\n使用更好的散列算法\n\n## 2）如何处理hash冲突\n\n再哈希法即选取若干个不同的哈希函数，在产生哈希冲突的时候计算另一个哈希函数，直到不再发生冲突为止。\n","slug":"Java数据结构哈希表的类实现","published":1,"updated":"2024-04-24T07:34:25.924Z","_id":"clswmim4n000070apfe2m6c7f","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h1><p>哈希表是将一组关键字根据散列算法，确定存放位置的数据结构</p>\n<h1 id=\"2-用途\"><a href=\"#2-用途\" class=\"headerlink\" title=\"2.用途\"></a>2.用途</h1><p>哈希表由于是算法计算出的存储位置，可以不用遍历，直接根据关键字获取vaule，大大提升查询效率</p>\n<p>在HashMap，HashSet，LinkedHashSet ，LinkedHashMap中(带hash)都可以找到哈希表的实现</p>\n<h1 id=\"3-使用哈希表带来的问题\"><a href=\"#3-使用哈希表带来的问题\" class=\"headerlink\" title=\"3.使用哈希表带来的问题\"></a>3.使用哈希表带来的问题</h1><p>hash冲突，关键字不一样，但是f(key)一样</p>\n<h2 id=\"1）如何减少hash冲突\"><a href=\"#1）如何减少hash冲突\" class=\"headerlink\" title=\"1）如何减少hash冲突\"></a>1）如何减少hash冲突</h2><p>使用更好的散列算法</p>\n<h2 id=\"2）如何处理hash冲突\"><a href=\"#2）如何处理hash冲突\" class=\"headerlink\" title=\"2）如何处理hash冲突\"></a>2）如何处理hash冲突</h2><p>再哈希法即选取若干个不同的哈希函数，在产生哈希冲突的时候计算另一个哈希函数，直到不再发生冲突为止。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h1><p>哈希表是将一组关键字根据散列算法，确定存放位置的数据结构</p>\n<h1 id=\"2-用途\"><a href=\"#2-用途\" class=\"headerlink\" title=\"2.用途\"></a>2.用途</h1><p>哈希表由于是算法计算出的存储位置，可以不用遍历，直接根据关键字获取vaule，大大提升查询效率</p>\n<p>在HashMap，HashSet，LinkedHashSet ，LinkedHashMap中(带hash)都可以找到哈希表的实现</p>\n<h1 id=\"3-使用哈希表带来的问题\"><a href=\"#3-使用哈希表带来的问题\" class=\"headerlink\" title=\"3.使用哈希表带来的问题\"></a>3.使用哈希表带来的问题</h1><p>hash冲突，关键字不一样，但是f(key)一样</p>\n<h2 id=\"1）如何减少hash冲突\"><a href=\"#1）如何减少hash冲突\" class=\"headerlink\" title=\"1）如何减少hash冲突\"></a>1）如何减少hash冲突</h2><p>使用更好的散列算法</p>\n<h2 id=\"2）如何处理hash冲突\"><a href=\"#2）如何处理hash冲突\" class=\"headerlink\" title=\"2）如何处理hash冲突\"></a>2）如何处理hash冲突</h2><p>再哈希法即选取若干个不同的哈希函数，在产生哈希冲突的时候计算另一个哈希函数，直到不再发生冲突为止。</p>\n"},{"title":"JavaWeb简介","date":"2022-02-23T01:25:21.000Z","_content":"\n# 一.基本概念\n\n## 1.定义\n\n静态web：数据始终不会发生变化\n\n动态web：数据在不同时间不同地点发生变化\n\n在Java中，动态web资源开发的技术统称JavaWeb\n\n\n\n## 2.web应用\n\n一个web应用应该由多部分组成：\n\n- html，css，js\n- jsp,servlet\n- Java程序\n- jar包\n- 配置文件\n\n\n\n## 3.静态web\n\n![静态web](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240229112731.png)\n\n缺点：\n\n1. 页面无法动态更新\n2. 无法和数据库交互\n\n\n\n## 4.动态web\n\n![动态web](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240229111501.png)\n\n缺点：\n\n1. 动态web资源出现错误，重新编写后台程序，重新发布\n\n\n\n# 二. web服务器\n\n服务器是一个被动的操作，用来处理用户请求和返回响应，常见的有IIS和tomcat（实际运行JSP和Servlet）\n\n## 1. 一个具体的servlet实现\n\n### 1.1 继承servlet实现类HttpServlet，重写doGet方法，doPost方法\n\n```java\npackage com.example;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * @author user \n */\npublic class HelloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // get方法操作逻辑\n        PrintWriter writer = resp.getWriter();\n        writer.println(\"hello\");\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doPost(req, resp);\n    }\n}\n```\n\n### 1.2 在web.xml文件里注册servlet，并映射路径\n\n原理：浏览器发送请求到web服务器，为了能找到需要的资源，在web服务中注册Servlet并配置访问路径\n\n```java\n  <servlet>\n    <servlet-name>hello</servlet-name>\n    <servlet-class>com.example.HelloServlet</servlet-class>\n  </servlet>\n  \n  <servlet-mapping>\n    <servlet-name>hello</servlet-name>\n    <url-pattern>/hello</url-pattern>\n  </servlet-mapping>\n```\n\n### 1.3 配置tomcat\n\n![配置tomcat](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304094943.png)\n\n需要在Depolyment中添加项目发布路径\n\n### 1.4 发送请求，访问路径\n\n![请求结果](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304095259.png)\n\n## 2. Servlet原理\n\nServlet由web服务器调用\n\n![Servlet原理](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304101917.png)\n\n## 3. Servlet的\n\n### 3.1 ServletContext\n\nweb容器启动的时候，会为每个web程序都创建一个对应的ServletContext对象，他代表当前的web应用\n\n- 共享数据 -> session来做\n- 请求转发（dispacher）-> request来做\n- 读取资源文件（properties）\n- 获取初始化参数\n\n### 3.2 Cookie,Session\n\n#### 3.2.1 会话\n\n会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程称之为会话。\n\n有状态会话\n\n#### 3.2.2 保存会话的两种技术\n\nCookie\n\n- 客户端技术\n\nSession\n\n- 服务器技术\n\n#### 3.2.3 Cookie\n\n![Cookie](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240307182027.png)\n\n- 保存到本地目录下appdata\n- 一个cookie只能保存一个信息\n- 一个web站点可以给浏览器发送多个cookie\n- 删除cookie：\n\n1. 不设置过期时间，关闭浏览器，自动失效\n2. 设置过期时间为0\n\n```java\npackage com.example;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\n/**\n * @author user liujing\n */\npublic class HelloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Cookie[] cookies = req.getCookies();\n        for (Cookie cookie : cookies){\n            resp.getWriter().println(cookie.toString());\n        }\n\n        Cookie cookie = new Cookie(\"name\", \"name\");\n        resp.addCookie(cookie);\n        \n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doPost(req, resp);\n    }\n\n}\n```\n\n\n\n#### 3.2.4 Session\n\n![Session](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240307181453.png)\n\n服务器给每个用户（浏览器）创建一个Session对象，浏览器不关，Session就存在\n\nobject类型，保存用户信息\n\n```java\npackage com.example;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\n/**\n * @author user \n */\npublic class HelloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        HttpSession session = req.getSession();\n        session.setAttribute(\"name\", \"name\");\n\n        if (session.isNew()){\n            resp.getWriter().print(\"session新创建\" + session.getId());\n        }else {\n            resp.getWriter().print(\"session已经创建\" + session.getId());\n        }\n        \n        // 注销session，但是马上会生成一个新的\n        session.invalidate();\n\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doPost(req, resp);\n    }\n}\n```\n\n","source":"_posts/JavaWeb简介.md","raw":"---\ntitle: JavaWeb简介\ndate: 2022-02-23 09:25:21\ntags: [JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.基本概念\n\n## 1.定义\n\n静态web：数据始终不会发生变化\n\n动态web：数据在不同时间不同地点发生变化\n\n在Java中，动态web资源开发的技术统称JavaWeb\n\n\n\n## 2.web应用\n\n一个web应用应该由多部分组成：\n\n- html，css，js\n- jsp,servlet\n- Java程序\n- jar包\n- 配置文件\n\n\n\n## 3.静态web\n\n![静态web](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240229112731.png)\n\n缺点：\n\n1. 页面无法动态更新\n2. 无法和数据库交互\n\n\n\n## 4.动态web\n\n![动态web](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240229111501.png)\n\n缺点：\n\n1. 动态web资源出现错误，重新编写后台程序，重新发布\n\n\n\n# 二. web服务器\n\n服务器是一个被动的操作，用来处理用户请求和返回响应，常见的有IIS和tomcat（实际运行JSP和Servlet）\n\n## 1. 一个具体的servlet实现\n\n### 1.1 继承servlet实现类HttpServlet，重写doGet方法，doPost方法\n\n```java\npackage com.example;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * @author user \n */\npublic class HelloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // get方法操作逻辑\n        PrintWriter writer = resp.getWriter();\n        writer.println(\"hello\");\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doPost(req, resp);\n    }\n}\n```\n\n### 1.2 在web.xml文件里注册servlet，并映射路径\n\n原理：浏览器发送请求到web服务器，为了能找到需要的资源，在web服务中注册Servlet并配置访问路径\n\n```java\n  <servlet>\n    <servlet-name>hello</servlet-name>\n    <servlet-class>com.example.HelloServlet</servlet-class>\n  </servlet>\n  \n  <servlet-mapping>\n    <servlet-name>hello</servlet-name>\n    <url-pattern>/hello</url-pattern>\n  </servlet-mapping>\n```\n\n### 1.3 配置tomcat\n\n![配置tomcat](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304094943.png)\n\n需要在Depolyment中添加项目发布路径\n\n### 1.4 发送请求，访问路径\n\n![请求结果](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304095259.png)\n\n## 2. Servlet原理\n\nServlet由web服务器调用\n\n![Servlet原理](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304101917.png)\n\n## 3. Servlet的\n\n### 3.1 ServletContext\n\nweb容器启动的时候，会为每个web程序都创建一个对应的ServletContext对象，他代表当前的web应用\n\n- 共享数据 -> session来做\n- 请求转发（dispacher）-> request来做\n- 读取资源文件（properties）\n- 获取初始化参数\n\n### 3.2 Cookie,Session\n\n#### 3.2.1 会话\n\n会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程称之为会话。\n\n有状态会话\n\n#### 3.2.2 保存会话的两种技术\n\nCookie\n\n- 客户端技术\n\nSession\n\n- 服务器技术\n\n#### 3.2.3 Cookie\n\n![Cookie](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240307182027.png)\n\n- 保存到本地目录下appdata\n- 一个cookie只能保存一个信息\n- 一个web站点可以给浏览器发送多个cookie\n- 删除cookie：\n\n1. 不设置过期时间，关闭浏览器，自动失效\n2. 设置过期时间为0\n\n```java\npackage com.example;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\n/**\n * @author user liujing\n */\npublic class HelloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Cookie[] cookies = req.getCookies();\n        for (Cookie cookie : cookies){\n            resp.getWriter().println(cookie.toString());\n        }\n\n        Cookie cookie = new Cookie(\"name\", \"name\");\n        resp.addCookie(cookie);\n        \n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doPost(req, resp);\n    }\n\n}\n```\n\n\n\n#### 3.2.4 Session\n\n![Session](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240307181453.png)\n\n服务器给每个用户（浏览器）创建一个Session对象，浏览器不关，Session就存在\n\nobject类型，保存用户信息\n\n```java\npackage com.example;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\n/**\n * @author user \n */\npublic class HelloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        HttpSession session = req.getSession();\n        session.setAttribute(\"name\", \"name\");\n\n        if (session.isNew()){\n            resp.getWriter().print(\"session新创建\" + session.getId());\n        }else {\n            resp.getWriter().print(\"session已经创建\" + session.getId());\n        }\n        \n        // 注销session，但是马上会生成一个新的\n        session.invalidate();\n\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doPost(req, resp);\n    }\n}\n```\n\n","slug":"JavaWeb简介","published":1,"updated":"2024-04-24T07:34:25.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj99390000a4ue11hvaeyf","content":"<h1 id=\"一-基本概念\"><a href=\"#一-基本概念\" class=\"headerlink\" title=\"一.基本概念\"></a>一.基本概念</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>静态web：数据始终不会发生变化</p>\n<p>动态web：数据在不同时间不同地点发生变化</p>\n<p>在Java中，动态web资源开发的技术统称JavaWeb</p>\n<h2 id=\"2-web应用\"><a href=\"#2-web应用\" class=\"headerlink\" title=\"2.web应用\"></a>2.web应用</h2><p>一个web应用应该由多部分组成：</p>\n<ul>\n<li>html，css，js</li>\n<li>jsp,servlet</li>\n<li>Java程序</li>\n<li>jar包</li>\n<li>配置文件</li>\n</ul>\n<h2 id=\"3-静态web\"><a href=\"#3-静态web\" class=\"headerlink\" title=\"3.静态web\"></a>3.静态web</h2><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240229112731.png\" alt=\"静态web\"></p>\n<p>缺点：</p>\n<ol>\n<li>页面无法动态更新</li>\n<li>无法和数据库交互</li>\n</ol>\n<h2 id=\"4-动态web\"><a href=\"#4-动态web\" class=\"headerlink\" title=\"4.动态web\"></a>4.动态web</h2><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240229111501.png\" alt=\"动态web\"></p>\n<p>缺点：</p>\n<ol>\n<li>动态web资源出现错误，重新编写后台程序，重新发布</li>\n</ol>\n<h1 id=\"二-web服务器\"><a href=\"#二-web服务器\" class=\"headerlink\" title=\"二. web服务器\"></a>二. web服务器</h1><p>服务器是一个被动的操作，用来处理用户请求和返回响应，常见的有IIS和tomcat（实际运行JSP和Servlet）</p>\n<h2 id=\"1-一个具体的servlet实现\"><a href=\"#1-一个具体的servlet实现\" class=\"headerlink\" title=\"1. 一个具体的servlet实现\"></a>1. 一个具体的servlet实现</h2><h3 id=\"1-1-继承servlet实现类HttpServlet，重写doGet方法，doPost方法\"><a href=\"#1-1-继承servlet实现类HttpServlet，重写doGet方法，doPost方法\" class=\"headerlink\" title=\"1.1 继承servlet实现类HttpServlet，重写doGet方法，doPost方法\"></a>1.1 继承servlet实现类HttpServlet，重写doGet方法，doPost方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> user </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// get方法操作逻辑</span></span><br><span class=\"line\">        <span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> resp.getWriter();</span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-在web-xml文件里注册servlet，并映射路径\"><a href=\"#1-2-在web-xml文件里注册servlet，并映射路径\" class=\"headerlink\" title=\"1.2 在web.xml文件里注册servlet，并映射路径\"></a>1.2 在web.xml文件里注册servlet，并映射路径</h3><p>原理：浏览器发送请求到web服务器，为了能找到需要的资源，在web服务中注册Servlet并配置访问路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;servlet-class&gt;com.example.HelloServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-配置tomcat\"><a href=\"#1-3-配置tomcat\" class=\"headerlink\" title=\"1.3 配置tomcat\"></a>1.3 配置tomcat</h3><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304094943.png\" alt=\"配置tomcat\"></p>\n<p>需要在Depolyment中添加项目发布路径</p>\n<h3 id=\"1-4-发送请求，访问路径\"><a href=\"#1-4-发送请求，访问路径\" class=\"headerlink\" title=\"1.4 发送请求，访问路径\"></a>1.4 发送请求，访问路径</h3><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304095259.png\" alt=\"请求结果\"></p>\n<h2 id=\"2-Servlet原理\"><a href=\"#2-Servlet原理\" class=\"headerlink\" title=\"2. Servlet原理\"></a>2. Servlet原理</h2><p>Servlet由web服务器调用</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304101917.png\" alt=\"Servlet原理\"></p>\n<h2 id=\"3-Servlet的\"><a href=\"#3-Servlet的\" class=\"headerlink\" title=\"3. Servlet的\"></a>3. Servlet的</h2><h3 id=\"3-1-ServletContext\"><a href=\"#3-1-ServletContext\" class=\"headerlink\" title=\"3.1 ServletContext\"></a>3.1 ServletContext</h3><p>web容器启动的时候，会为每个web程序都创建一个对应的ServletContext对象，他代表当前的web应用</p>\n<ul>\n<li>共享数据 -&gt; session来做</li>\n<li>请求转发（dispacher）-&gt; request来做</li>\n<li>读取资源文件（properties）</li>\n<li>获取初始化参数</li>\n</ul>\n<h3 id=\"3-2-Cookie-Session\"><a href=\"#3-2-Cookie-Session\" class=\"headerlink\" title=\"3.2 Cookie,Session\"></a>3.2 Cookie,Session</h3><h4 id=\"3-2-1-会话\"><a href=\"#3-2-1-会话\" class=\"headerlink\" title=\"3.2.1 会话\"></a>3.2.1 会话</h4><p>会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程称之为会话。</p>\n<p>有状态会话</p>\n<h4 id=\"3-2-2-保存会话的两种技术\"><a href=\"#3-2-2-保存会话的两种技术\" class=\"headerlink\" title=\"3.2.2 保存会话的两种技术\"></a>3.2.2 保存会话的两种技术</h4><p>Cookie</p>\n<ul>\n<li>客户端技术</li>\n</ul>\n<p>Session</p>\n<ul>\n<li>服务器技术</li>\n</ul>\n<h4 id=\"3-2-3-Cookie\"><a href=\"#3-2-3-Cookie\" class=\"headerlink\" title=\"3.2.3 Cookie\"></a>3.2.3 Cookie</h4><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240307182027.png\" alt=\"Cookie\"></p>\n<ul>\n<li>保存到本地目录下appdata</li>\n<li>一个cookie只能保存一个信息</li>\n<li>一个web站点可以给浏览器发送多个cookie</li>\n<li>删除cookie：</li>\n</ul>\n<ol>\n<li>不设置过期时间，关闭浏览器，自动失效</li>\n<li>设置过期时间为0</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> user liujing</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        Cookie[] cookies = req.getCookies();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Cookie cookie : cookies)&#123;</span><br><span class=\"line\">            resp.getWriter().println(cookie.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Cookie</span> <span class=\"variable\">cookie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cookie</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        resp.addCookie(cookie);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-2-4-Session\"><a href=\"#3-2-4-Session\" class=\"headerlink\" title=\"3.2.4 Session\"></a>3.2.4 Session</h4><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240307181453.png\" alt=\"Session\"></p>\n<p>服务器给每个用户（浏览器）创建一个Session对象，浏览器不关，Session就存在</p>\n<p>object类型，保存用户信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> user </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">HttpSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> req.getSession();</span><br><span class=\"line\">        session.setAttribute(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session.isNew())&#123;</span><br><span class=\"line\">            resp.getWriter().print(<span class=\"string\">&quot;session新创建&quot;</span> + session.getId());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.getWriter().print(<span class=\"string\">&quot;session已经创建&quot;</span> + session.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 注销session，但是马上会生成一个新的</span></span><br><span class=\"line\">        session.invalidate();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基本概念\"><a href=\"#一-基本概念\" class=\"headerlink\" title=\"一.基本概念\"></a>一.基本概念</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>静态web：数据始终不会发生变化</p>\n<p>动态web：数据在不同时间不同地点发生变化</p>\n<p>在Java中，动态web资源开发的技术统称JavaWeb</p>\n<h2 id=\"2-web应用\"><a href=\"#2-web应用\" class=\"headerlink\" title=\"2.web应用\"></a>2.web应用</h2><p>一个web应用应该由多部分组成：</p>\n<ul>\n<li>html，css，js</li>\n<li>jsp,servlet</li>\n<li>Java程序</li>\n<li>jar包</li>\n<li>配置文件</li>\n</ul>\n<h2 id=\"3-静态web\"><a href=\"#3-静态web\" class=\"headerlink\" title=\"3.静态web\"></a>3.静态web</h2><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240229112731.png\" alt=\"静态web\"></p>\n<p>缺点：</p>\n<ol>\n<li>页面无法动态更新</li>\n<li>无法和数据库交互</li>\n</ol>\n<h2 id=\"4-动态web\"><a href=\"#4-动态web\" class=\"headerlink\" title=\"4.动态web\"></a>4.动态web</h2><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240229111501.png\" alt=\"动态web\"></p>\n<p>缺点：</p>\n<ol>\n<li>动态web资源出现错误，重新编写后台程序，重新发布</li>\n</ol>\n<h1 id=\"二-web服务器\"><a href=\"#二-web服务器\" class=\"headerlink\" title=\"二. web服务器\"></a>二. web服务器</h1><p>服务器是一个被动的操作，用来处理用户请求和返回响应，常见的有IIS和tomcat（实际运行JSP和Servlet）</p>\n<h2 id=\"1-一个具体的servlet实现\"><a href=\"#1-一个具体的servlet实现\" class=\"headerlink\" title=\"1. 一个具体的servlet实现\"></a>1. 一个具体的servlet实现</h2><h3 id=\"1-1-继承servlet实现类HttpServlet，重写doGet方法，doPost方法\"><a href=\"#1-1-继承servlet实现类HttpServlet，重写doGet方法，doPost方法\" class=\"headerlink\" title=\"1.1 继承servlet实现类HttpServlet，重写doGet方法，doPost方法\"></a>1.1 继承servlet实现类HttpServlet，重写doGet方法，doPost方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> user </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// get方法操作逻辑</span></span><br><span class=\"line\">        <span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> resp.getWriter();</span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-在web-xml文件里注册servlet，并映射路径\"><a href=\"#1-2-在web-xml文件里注册servlet，并映射路径\" class=\"headerlink\" title=\"1.2 在web.xml文件里注册servlet，并映射路径\"></a>1.2 在web.xml文件里注册servlet，并映射路径</h3><p>原理：浏览器发送请求到web服务器，为了能找到需要的资源，在web服务中注册Servlet并配置访问路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;servlet-class&gt;com.example.HelloServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-配置tomcat\"><a href=\"#1-3-配置tomcat\" class=\"headerlink\" title=\"1.3 配置tomcat\"></a>1.3 配置tomcat</h3><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304094943.png\" alt=\"配置tomcat\"></p>\n<p>需要在Depolyment中添加项目发布路径</p>\n<h3 id=\"1-4-发送请求，访问路径\"><a href=\"#1-4-发送请求，访问路径\" class=\"headerlink\" title=\"1.4 发送请求，访问路径\"></a>1.4 发送请求，访问路径</h3><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304095259.png\" alt=\"请求结果\"></p>\n<h2 id=\"2-Servlet原理\"><a href=\"#2-Servlet原理\" class=\"headerlink\" title=\"2. Servlet原理\"></a>2. Servlet原理</h2><p>Servlet由web服务器调用</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240304101917.png\" alt=\"Servlet原理\"></p>\n<h2 id=\"3-Servlet的\"><a href=\"#3-Servlet的\" class=\"headerlink\" title=\"3. Servlet的\"></a>3. Servlet的</h2><h3 id=\"3-1-ServletContext\"><a href=\"#3-1-ServletContext\" class=\"headerlink\" title=\"3.1 ServletContext\"></a>3.1 ServletContext</h3><p>web容器启动的时候，会为每个web程序都创建一个对应的ServletContext对象，他代表当前的web应用</p>\n<ul>\n<li>共享数据 -&gt; session来做</li>\n<li>请求转发（dispacher）-&gt; request来做</li>\n<li>读取资源文件（properties）</li>\n<li>获取初始化参数</li>\n</ul>\n<h3 id=\"3-2-Cookie-Session\"><a href=\"#3-2-Cookie-Session\" class=\"headerlink\" title=\"3.2 Cookie,Session\"></a>3.2 Cookie,Session</h3><h4 id=\"3-2-1-会话\"><a href=\"#3-2-1-会话\" class=\"headerlink\" title=\"3.2.1 会话\"></a>3.2.1 会话</h4><p>会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程称之为会话。</p>\n<p>有状态会话</p>\n<h4 id=\"3-2-2-保存会话的两种技术\"><a href=\"#3-2-2-保存会话的两种技术\" class=\"headerlink\" title=\"3.2.2 保存会话的两种技术\"></a>3.2.2 保存会话的两种技术</h4><p>Cookie</p>\n<ul>\n<li>客户端技术</li>\n</ul>\n<p>Session</p>\n<ul>\n<li>服务器技术</li>\n</ul>\n<h4 id=\"3-2-3-Cookie\"><a href=\"#3-2-3-Cookie\" class=\"headerlink\" title=\"3.2.3 Cookie\"></a>3.2.3 Cookie</h4><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240307182027.png\" alt=\"Cookie\"></p>\n<ul>\n<li>保存到本地目录下appdata</li>\n<li>一个cookie只能保存一个信息</li>\n<li>一个web站点可以给浏览器发送多个cookie</li>\n<li>删除cookie：</li>\n</ul>\n<ol>\n<li>不设置过期时间，关闭浏览器，自动失效</li>\n<li>设置过期时间为0</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> user liujing</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        Cookie[] cookies = req.getCookies();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Cookie cookie : cookies)&#123;</span><br><span class=\"line\">            resp.getWriter().println(cookie.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Cookie</span> <span class=\"variable\">cookie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cookie</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        resp.addCookie(cookie);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-2-4-Session\"><a href=\"#3-2-4-Session\" class=\"headerlink\" title=\"3.2.4 Session\"></a>3.2.4 Session</h4><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240307181453.png\" alt=\"Session\"></p>\n<p>服务器给每个用户（浏览器）创建一个Session对象，浏览器不关，Session就存在</p>\n<p>object类型，保存用户信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> user </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">HttpSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> req.getSession();</span><br><span class=\"line\">        session.setAttribute(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session.isNew())&#123;</span><br><span class=\"line\">            resp.getWriter().print(<span class=\"string\">&quot;session新创建&quot;</span> + session.getId());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.getWriter().print(<span class=\"string\">&quot;session已经创建&quot;</span> + session.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 注销session，但是马上会生成一个新的</span></span><br><span class=\"line\">        session.invalidate();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Maven高级","date":"2022-06-10T07:36:09.000Z","_content":"\n1. 当某个项目被修改时，他的私服并未修改，其他项目不能使用\n\n   聚合：为所有模块添加父模块，统一管理，同时编译，同时部署，父模块仅作为项目管理用\n\n2. 当项目之间依赖版本出现冲突时\n\n    继承：在父模块中加入版本，子模块直接引用\n\n3. 如何添加版本\n\n   通过自定义属性标签\n\n   ```\n   <properties>\n       <自定义属性名>属性值</自定义属性名>\n   </properties>\n   ```\n\n   在pom文件中，还可以获取以下属性：\n\n   - 自定义属性\n   - maven内置属性\n   - setting文件夹中的属性\n   - Java系统属性\n   - 环境变量属性\n\n4. 资源配置\n\n   ```\n   <resources>\n         引入配置文件信息\n   </resources>\n   ```\n\n5. 版本管理\n\n   - snapshot 快照版本\n   - release 发布版本\n\n​      \n\n   \n","source":"_posts/Maven高级.md","raw":"---\ntitle: Maven高级\ndate: 2022-06-10 15:36:09\ntags: [maven, JAVA, 项目管理]\ncategories:\n- [技术, JAVA]\n---\n\n1. 当某个项目被修改时，他的私服并未修改，其他项目不能使用\n\n   聚合：为所有模块添加父模块，统一管理，同时编译，同时部署，父模块仅作为项目管理用\n\n2. 当项目之间依赖版本出现冲突时\n\n    继承：在父模块中加入版本，子模块直接引用\n\n3. 如何添加版本\n\n   通过自定义属性标签\n\n   ```\n   <properties>\n       <自定义属性名>属性值</自定义属性名>\n   </properties>\n   ```\n\n   在pom文件中，还可以获取以下属性：\n\n   - 自定义属性\n   - maven内置属性\n   - setting文件夹中的属性\n   - Java系统属性\n   - 环境变量属性\n\n4. 资源配置\n\n   ```\n   <resources>\n         引入配置文件信息\n   </resources>\n   ```\n\n5. 版本管理\n\n   - snapshot 快照版本\n   - release 发布版本\n\n​      \n\n   \n","slug":"Maven高级","published":1,"updated":"2024-04-24T07:34:25.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj993k0002a4ueevh53tqi","content":"<ol>\n<li><p>当某个项目被修改时，他的私服并未修改，其他项目不能使用</p>\n<p>聚合：为所有模块添加父模块，统一管理，同时编译，同时部署，父模块仅作为项目管理用</p>\n</li>\n<li><p>当项目之间依赖版本出现冲突时</p>\n<p> 继承：在父模块中加入版本，子模块直接引用</p>\n</li>\n<li><p>如何添加版本</p>\n<p>通过自定义属性标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;自定义属性名&gt;属性值&lt;/自定义属性名&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在pom文件中，还可以获取以下属性：</p>\n<ul>\n<li>自定义属性</li>\n<li>maven内置属性</li>\n<li>setting文件夹中的属性</li>\n<li>Java系统属性</li>\n<li>环境变量属性</li>\n</ul>\n</li>\n<li><p>资源配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">      引入配置文件信息</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本管理</p>\n<ul>\n<li>snapshot 快照版本</li>\n<li>release 发布版本</li>\n</ul>\n</li>\n</ol>\n<p>​      </p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>当某个项目被修改时，他的私服并未修改，其他项目不能使用</p>\n<p>聚合：为所有模块添加父模块，统一管理，同时编译，同时部署，父模块仅作为项目管理用</p>\n</li>\n<li><p>当项目之间依赖版本出现冲突时</p>\n<p> 继承：在父模块中加入版本，子模块直接引用</p>\n</li>\n<li><p>如何添加版本</p>\n<p>通过自定义属性标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;自定义属性名&gt;属性值&lt;/自定义属性名&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在pom文件中，还可以获取以下属性：</p>\n<ul>\n<li>自定义属性</li>\n<li>maven内置属性</li>\n<li>setting文件夹中的属性</li>\n<li>Java系统属性</li>\n<li>环境变量属性</li>\n</ul>\n</li>\n<li><p>资源配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">      引入配置文件信息</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本管理</p>\n<ul>\n<li>snapshot 快照版本</li>\n<li>release 发布版本</li>\n</ul>\n</li>\n</ol>\n<p>​      </p>\n"},{"title":"Maven初级","date":"2022-06-08T06:39:27.000Z","_content":"\n# 一.概述\n\nMaven的两大功能，依赖管理和构建项目\n\n\n\n# 二.依赖管理\n\n## 1.仓库\n\n- 本地仓库：在setting.xml文件配置的，本机存放依赖的仓库\n- 私服：公司搭建的局域网仓库，包含中央仓库+私有\n- 远程仓库：中央仓库，由maven 官方管理，具体地址在setting.xml文件中配置\n\n依赖的获取顺序，本地仓库 -》私服 -》 远程仓库\n\n## 2.坐标\n\n```\n<dependency>\n       <groupId>组织名</groupId>\n       <artifactId>模块名</artifactId>\n       <version>版本号</version>\n</dependency>\n```\n\n## 3.依赖传递\n\n### 1）原则\n\n项目引用时，依赖也被引用\n\n### 2）依赖传递\n\n![maven初级1](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/maven初级1.png))\n\n\n\n### 3）解决依赖冲突\n\n总原则：不是我用的就调\n\n#### （1）scope标签\n\n1.设定依赖使用范围，范围包括：\n\n- 主程序范围内有效（main文件夹范围内）\n- 测试程序范围内有效（test文件夹范围内）\n- 是否参与打包（pacakage指令范围内）\n\n|     scope     | 主代码 | 测试代码 | 打包 |    示例     |\n| :-----------: | :----: | :------: | :--: | :---------: |\n| compile(默认) |   Y    |    Y     |  Y   |    log4j    |\n|     test      |        |    Y     |      |    junit    |\n|   provided    |   Y    |    Y     |      | servlet_api |\n|    runtime    |        |          |  Y   |    jdbc     |\n\n2.依赖范围传递\n\n| 横轴是直接依赖，纵轴是简介依赖 | compile | test | provided | runtime |\n| ------------------------------ | ------- | ---- | -------- | ------- |\n| compile                        | compile | test | provided | runtime |\n| test                           |         |      |          |         |\n| provided                       |         |      |          |         |\n| runtime                        | runtime | test | provided | runtime |\n\n3.示例\n\n```\n<dependency>\n      <groupId>org.dromara.hutool</groupId>\n      <artifactId>hutool-bom</artifactId>\n      <version>${hutool.version}</version>\n      <scope>import</scope>\n</dependency>\n```\n\n#### （2）exclude标签\n\n在引用项目使用，主动断开被引用项目\n\n## 二.项目构建\n\n根据插件来实现对项目生命周期的操作\n\n- mvn compile 编译\n- mvn clean 清理\n- mvn test 测试\n- mvn package 打包\n- mvn install 安装到本地仓库\n- mvn depoly 部署到私服\n\n插件从上至下执行，和生命周期相关\n\n除了生命周期插件，在pom文件中还可以引入其他插件，比如maven打包插件，tomcat插件等\n","source":"_posts/Maven初级.md","raw":"---\ntitle: Maven初级\ndate: 2022-06-08 14:39:27\ntags: [maven, JAVA, 项目管理]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.概述\n\nMaven的两大功能，依赖管理和构建项目\n\n\n\n# 二.依赖管理\n\n## 1.仓库\n\n- 本地仓库：在setting.xml文件配置的，本机存放依赖的仓库\n- 私服：公司搭建的局域网仓库，包含中央仓库+私有\n- 远程仓库：中央仓库，由maven 官方管理，具体地址在setting.xml文件中配置\n\n依赖的获取顺序，本地仓库 -》私服 -》 远程仓库\n\n## 2.坐标\n\n```\n<dependency>\n       <groupId>组织名</groupId>\n       <artifactId>模块名</artifactId>\n       <version>版本号</version>\n</dependency>\n```\n\n## 3.依赖传递\n\n### 1）原则\n\n项目引用时，依赖也被引用\n\n### 2）依赖传递\n\n![maven初级1](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/maven初级1.png))\n\n\n\n### 3）解决依赖冲突\n\n总原则：不是我用的就调\n\n#### （1）scope标签\n\n1.设定依赖使用范围，范围包括：\n\n- 主程序范围内有效（main文件夹范围内）\n- 测试程序范围内有效（test文件夹范围内）\n- 是否参与打包（pacakage指令范围内）\n\n|     scope     | 主代码 | 测试代码 | 打包 |    示例     |\n| :-----------: | :----: | :------: | :--: | :---------: |\n| compile(默认) |   Y    |    Y     |  Y   |    log4j    |\n|     test      |        |    Y     |      |    junit    |\n|   provided    |   Y    |    Y     |      | servlet_api |\n|    runtime    |        |          |  Y   |    jdbc     |\n\n2.依赖范围传递\n\n| 横轴是直接依赖，纵轴是简介依赖 | compile | test | provided | runtime |\n| ------------------------------ | ------- | ---- | -------- | ------- |\n| compile                        | compile | test | provided | runtime |\n| test                           |         |      |          |         |\n| provided                       |         |      |          |         |\n| runtime                        | runtime | test | provided | runtime |\n\n3.示例\n\n```\n<dependency>\n      <groupId>org.dromara.hutool</groupId>\n      <artifactId>hutool-bom</artifactId>\n      <version>${hutool.version}</version>\n      <scope>import</scope>\n</dependency>\n```\n\n#### （2）exclude标签\n\n在引用项目使用，主动断开被引用项目\n\n## 二.项目构建\n\n根据插件来实现对项目生命周期的操作\n\n- mvn compile 编译\n- mvn clean 清理\n- mvn test 测试\n- mvn package 打包\n- mvn install 安装到本地仓库\n- mvn depoly 部署到私服\n\n插件从上至下执行，和生命周期相关\n\n除了生命周期插件，在pom文件中还可以引入其他插件，比如maven打包插件，tomcat插件等\n","slug":"Maven初级","published":1,"updated":"2024-04-24T07:34:25.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj993l0003a4ue7w185e85","content":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一.概述\"></a>一.概述</h1><p>Maven的两大功能，依赖管理和构建项目</p>\n<h1 id=\"二-依赖管理\"><a href=\"#二-依赖管理\" class=\"headerlink\" title=\"二.依赖管理\"></a>二.依赖管理</h1><h2 id=\"1-仓库\"><a href=\"#1-仓库\" class=\"headerlink\" title=\"1.仓库\"></a>1.仓库</h2><ul>\n<li>本地仓库：在setting.xml文件配置的，本机存放依赖的仓库</li>\n<li>私服：公司搭建的局域网仓库，包含中央仓库+私有</li>\n<li>远程仓库：中央仓库，由maven 官方管理，具体地址在setting.xml文件中配置</li>\n</ul>\n<p>依赖的获取顺序，本地仓库 -》私服 -》 远程仓库</p>\n<h2 id=\"2-坐标\"><a href=\"#2-坐标\" class=\"headerlink\" title=\"2.坐标\"></a>2.坐标</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">       &lt;groupId&gt;组织名&lt;/groupId&gt;</span><br><span class=\"line\">       &lt;artifactId&gt;模块名&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;version&gt;版本号&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-依赖传递\"><a href=\"#3-依赖传递\" class=\"headerlink\" title=\"3.依赖传递\"></a>3.依赖传递</h2><h3 id=\"1）原则\"><a href=\"#1）原则\" class=\"headerlink\" title=\"1）原则\"></a>1）原则</h3><p>项目引用时，依赖也被引用</p>\n<h3 id=\"2）依赖传递\"><a href=\"#2）依赖传递\" class=\"headerlink\" title=\"2）依赖传递\"></a>2）依赖传递</h3><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/maven%E5%88%9D%E7%BA%A71.png\" alt=\"maven初级1\">)</p>\n<h3 id=\"3）解决依赖冲突\"><a href=\"#3）解决依赖冲突\" class=\"headerlink\" title=\"3）解决依赖冲突\"></a>3）解决依赖冲突</h3><p>总原则：不是我用的就调</p>\n<h4 id=\"（1）scope标签\"><a href=\"#（1）scope标签\" class=\"headerlink\" title=\"（1）scope标签\"></a>（1）scope标签</h4><p>1.设定依赖使用范围，范围包括：</p>\n<ul>\n<li>主程序范围内有效（main文件夹范围内）</li>\n<li>测试程序范围内有效（test文件夹范围内）</li>\n<li>是否参与打包（pacakage指令范围内）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">scope</th>\n<th align=\"center\">主代码</th>\n<th align=\"center\">测试代码</th>\n<th align=\"center\">打包</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">compile(默认)</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">log4j</td>\n</tr>\n<tr>\n<td align=\"center\">test</td>\n<td align=\"center\"></td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n<td align=\"center\">junit</td>\n</tr>\n<tr>\n<td align=\"center\">provided</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n<td align=\"center\">servlet_api</td>\n</tr>\n<tr>\n<td align=\"center\">runtime</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Y</td>\n<td align=\"center\">jdbc</td>\n</tr>\n</tbody></table>\n<p>2.依赖范围传递</p>\n<table>\n<thead>\n<tr>\n<th>横轴是直接依赖，纵轴是简介依赖</th>\n<th>compile</th>\n<th>test</th>\n<th>provided</th>\n<th>runtime</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile</td>\n<td>compile</td>\n<td>test</td>\n<td>provided</td>\n<td>runtime</td>\n</tr>\n<tr>\n<td>test</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>provided</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>runtime</td>\n<td>runtime</td>\n<td>test</td>\n<td>provided</td>\n<td>runtime</td>\n</tr>\n</tbody></table>\n<p>3.示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.dromara.hutool&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;hutool-bom&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;$&#123;hutool.version&#125;&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）exclude标签\"><a href=\"#（2）exclude标签\" class=\"headerlink\" title=\"（2）exclude标签\"></a>（2）exclude标签</h4><p>在引用项目使用，主动断开被引用项目</p>\n<h2 id=\"二-项目构建\"><a href=\"#二-项目构建\" class=\"headerlink\" title=\"二.项目构建\"></a>二.项目构建</h2><p>根据插件来实现对项目生命周期的操作</p>\n<ul>\n<li>mvn compile 编译</li>\n<li>mvn clean 清理</li>\n<li>mvn test 测试</li>\n<li>mvn package 打包</li>\n<li>mvn install 安装到本地仓库</li>\n<li>mvn depoly 部署到私服</li>\n</ul>\n<p>插件从上至下执行，和生命周期相关</p>\n<p>除了生命周期插件，在pom文件中还可以引入其他插件，比如maven打包插件，tomcat插件等</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一.概述\"></a>一.概述</h1><p>Maven的两大功能，依赖管理和构建项目</p>\n<h1 id=\"二-依赖管理\"><a href=\"#二-依赖管理\" class=\"headerlink\" title=\"二.依赖管理\"></a>二.依赖管理</h1><h2 id=\"1-仓库\"><a href=\"#1-仓库\" class=\"headerlink\" title=\"1.仓库\"></a>1.仓库</h2><ul>\n<li>本地仓库：在setting.xml文件配置的，本机存放依赖的仓库</li>\n<li>私服：公司搭建的局域网仓库，包含中央仓库+私有</li>\n<li>远程仓库：中央仓库，由maven 官方管理，具体地址在setting.xml文件中配置</li>\n</ul>\n<p>依赖的获取顺序，本地仓库 -》私服 -》 远程仓库</p>\n<h2 id=\"2-坐标\"><a href=\"#2-坐标\" class=\"headerlink\" title=\"2.坐标\"></a>2.坐标</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">       &lt;groupId&gt;组织名&lt;/groupId&gt;</span><br><span class=\"line\">       &lt;artifactId&gt;模块名&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;version&gt;版本号&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-依赖传递\"><a href=\"#3-依赖传递\" class=\"headerlink\" title=\"3.依赖传递\"></a>3.依赖传递</h2><h3 id=\"1）原则\"><a href=\"#1）原则\" class=\"headerlink\" title=\"1）原则\"></a>1）原则</h3><p>项目引用时，依赖也被引用</p>\n<h3 id=\"2）依赖传递\"><a href=\"#2）依赖传递\" class=\"headerlink\" title=\"2）依赖传递\"></a>2）依赖传递</h3><p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/maven%E5%88%9D%E7%BA%A71.png\" alt=\"maven初级1\">)</p>\n<h3 id=\"3）解决依赖冲突\"><a href=\"#3）解决依赖冲突\" class=\"headerlink\" title=\"3）解决依赖冲突\"></a>3）解决依赖冲突</h3><p>总原则：不是我用的就调</p>\n<h4 id=\"（1）scope标签\"><a href=\"#（1）scope标签\" class=\"headerlink\" title=\"（1）scope标签\"></a>（1）scope标签</h4><p>1.设定依赖使用范围，范围包括：</p>\n<ul>\n<li>主程序范围内有效（main文件夹范围内）</li>\n<li>测试程序范围内有效（test文件夹范围内）</li>\n<li>是否参与打包（pacakage指令范围内）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">scope</th>\n<th align=\"center\">主代码</th>\n<th align=\"center\">测试代码</th>\n<th align=\"center\">打包</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">compile(默认)</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">log4j</td>\n</tr>\n<tr>\n<td align=\"center\">test</td>\n<td align=\"center\"></td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n<td align=\"center\">junit</td>\n</tr>\n<tr>\n<td align=\"center\">provided</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n<td align=\"center\">servlet_api</td>\n</tr>\n<tr>\n<td align=\"center\">runtime</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Y</td>\n<td align=\"center\">jdbc</td>\n</tr>\n</tbody></table>\n<p>2.依赖范围传递</p>\n<table>\n<thead>\n<tr>\n<th>横轴是直接依赖，纵轴是简介依赖</th>\n<th>compile</th>\n<th>test</th>\n<th>provided</th>\n<th>runtime</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile</td>\n<td>compile</td>\n<td>test</td>\n<td>provided</td>\n<td>runtime</td>\n</tr>\n<tr>\n<td>test</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>provided</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>runtime</td>\n<td>runtime</td>\n<td>test</td>\n<td>provided</td>\n<td>runtime</td>\n</tr>\n</tbody></table>\n<p>3.示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.dromara.hutool&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;hutool-bom&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;$&#123;hutool.version&#125;&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）exclude标签\"><a href=\"#（2）exclude标签\" class=\"headerlink\" title=\"（2）exclude标签\"></a>（2）exclude标签</h4><p>在引用项目使用，主动断开被引用项目</p>\n<h2 id=\"二-项目构建\"><a href=\"#二-项目构建\" class=\"headerlink\" title=\"二.项目构建\"></a>二.项目构建</h2><p>根据插件来实现对项目生命周期的操作</p>\n<ul>\n<li>mvn compile 编译</li>\n<li>mvn clean 清理</li>\n<li>mvn test 测试</li>\n<li>mvn package 打包</li>\n<li>mvn install 安装到本地仓库</li>\n<li>mvn depoly 部署到私服</li>\n</ul>\n<p>插件从上至下执行，和生命周期相关</p>\n<p>除了生命周期插件，在pom文件中还可以引入其他插件，比如maven打包插件，tomcat插件等</p>\n"},{"title":"Mysql使用技巧","date":"2024-02-28T01:57:26.000Z","_content":"\n# 一.内置函数\n\n1.isnull(exper) 判断exper是否为空，是则返回1，否则返回0\n\n2.ifnull(exper1,exper2)判断exper1是否为空，是则用exper2代替\n\n3.nullif(exper1,exper2)如果expr1= expr2 成立，那么返回值为NULL，否则返回值为  expr1。\n\n\n\nlimit num offset num \n\n如果没有，什么都不返回，如果要求返回null，则加个临时表\n\n\n\n存储过程\n\n查找第n高的薪水\n\n```mysql\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT; \nSET M = N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT DISTINCT salary\n      FROM Employee\n      ORDER BY salary DESC\n      LIMIT M, 1\n );\nEND\n```\n\n","source":"_posts/Mysql内置函数.md","raw":"---\ntitle: Mysql使用技巧\ndate: 2024-02-28 09:57:26\ntags: [Mysql, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.内置函数\n\n1.isnull(exper) 判断exper是否为空，是则返回1，否则返回0\n\n2.ifnull(exper1,exper2)判断exper1是否为空，是则用exper2代替\n\n3.nullif(exper1,exper2)如果expr1= expr2 成立，那么返回值为NULL，否则返回值为  expr1。\n\n\n\nlimit num offset num \n\n如果没有，什么都不返回，如果要求返回null，则加个临时表\n\n\n\n存储过程\n\n查找第n高的薪水\n\n```mysql\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT; \nSET M = N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT DISTINCT salary\n      FROM Employee\n      ORDER BY salary DESC\n      LIMIT M, 1\n );\nEND\n```\n\n","slug":"Mysql内置函数","published":1,"updated":"2024-04-24T07:34:25.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj993n0006a4ue4d5w0rpj","content":"<h1 id=\"一-内置函数\"><a href=\"#一-内置函数\" class=\"headerlink\" title=\"一.内置函数\"></a>一.内置函数</h1><p>1.isnull(exper) 判断exper是否为空，是则返回1，否则返回0</p>\n<p>2.ifnull(exper1,exper2)判断exper1是否为空，是则用exper2代替</p>\n<p>3.nullif(exper1,exper2)如果expr1&#x3D; expr2 成立，那么返回值为NULL，否则返回值为  expr1。</p>\n<p>limit num offset num </p>\n<p>如果没有，什么都不返回，如果要求返回null，则加个临时表</p>\n<p>存储过程</p>\n<p>查找第n高的薪水</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">DECLARE M INT; </span><br><span class=\"line\">SET M = N-1;</span><br><span class=\"line\">  RETURN (</span><br><span class=\"line\">      # Write your MySQL query statement below.</span><br><span class=\"line\">        SELECT DISTINCT salary</span><br><span class=\"line\">      FROM Employee</span><br><span class=\"line\">      ORDER BY salary DESC</span><br><span class=\"line\">      LIMIT M, 1</span><br><span class=\"line\"> );</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-内置函数\"><a href=\"#一-内置函数\" class=\"headerlink\" title=\"一.内置函数\"></a>一.内置函数</h1><p>1.isnull(exper) 判断exper是否为空，是则返回1，否则返回0</p>\n<p>2.ifnull(exper1,exper2)判断exper1是否为空，是则用exper2代替</p>\n<p>3.nullif(exper1,exper2)如果expr1&#x3D; expr2 成立，那么返回值为NULL，否则返回值为  expr1。</p>\n<p>limit num offset num </p>\n<p>如果没有，什么都不返回，如果要求返回null，则加个临时表</p>\n<p>存储过程</p>\n<p>查找第n高的薪水</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">DECLARE M INT; </span><br><span class=\"line\">SET M = N-1;</span><br><span class=\"line\">  RETURN (</span><br><span class=\"line\">      # Write your MySQL query statement below.</span><br><span class=\"line\">        SELECT DISTINCT salary</span><br><span class=\"line\">      FROM Employee</span><br><span class=\"line\">      ORDER BY salary DESC</span><br><span class=\"line\">      LIMIT M, 1</span><br><span class=\"line\"> );</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Mysql慢查询的优化","date":"2023-07-03T07:13:33.000Z","_content":"\n# 一.Mysql慢查询如何优化？\n\n1. 检查是否使用了索引，优化SQL使用索引\n2. 检查所用索引，是否为最有索引\n3. 检查所查字段是否都是必须，是否查询了过多字段，查出了多余数据\n4. 检查表中数据是否过多，是否进行分库分表\n5. 检查数据库所在服务器配置，适当增加资源\n\n\n\n# 二.索引\n\n## 1.定义\n\n索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它 们包含着对数据表里所有记录的引用指针。\n\n\n\n## 2.分类\n\n主键索引:数据列不允许重复，不允许为NULL， 一个表只能有一个主键。 \n\n唯一索引:数据列不允许重复，允许为NULL值， 一个表允许多个列创建唯一索引。 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD UNIQUE(column);\n  ```\n\n   创建唯一索引 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD UNIQUE(column1,column2);\n  ```\n\n   创建唯一组合索引 \n\n普通索引:基本的索引类型，没有唯一性的限制，允许为NULL值。 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD INDEX index_name(column); \n  ```\n\n  创建普通索引 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD INDEX index_name(column1,column2,column3);\n  ```\n\n   创建组合索引 \n\n全文索引：是目前搜索引擎使用的一种关键技术。 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD FULLTEXT(column);\n  ```\n\n   创建全文索引\n\n  \n\n## 3.索引的数据结构\n\nB树的特点：\n\n1. 节点排序\n2. 一个节点存多个元素，多个元素也排序\n\n\n\nB+树的特点：\n\n1. 拥有B树的特点\n2. 叶子节点之间有指针\n3. 叶子节点存储所有元素，并且排好顺序\n\n\n\nMysql索引使用的是B+树，因为索引是用来加快查询速度的，而B+树通过对数据进行排序，叶子节点存储了所有元素，从而使B+树不会太高，而且叶子节点有指针，可以支持全表扫描，范围查找等SQL语句\n\n\n\n## 4.索引失效\n\n1. 查询条件中有or,即使有部分条件带索引也会失效\n2. like查询是以%开头\n3. 如果列类型是字符串，那在查询条件中需要将数据用引号引用起来，否则不走索引\n4. 索引列上参与计算会导致索引失效\n5. 违背最左匹配原则\n6. 如果mysql估计全表扫描要比使用索引要快，会不适用索引\n","source":"_posts/Mysql慢查询的优化.md","raw":"---\ntitle: Mysql慢查询的优化\ndate: 2023-07-03 15:13:33\ntags: [mysql, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.Mysql慢查询如何优化？\n\n1. 检查是否使用了索引，优化SQL使用索引\n2. 检查所用索引，是否为最有索引\n3. 检查所查字段是否都是必须，是否查询了过多字段，查出了多余数据\n4. 检查表中数据是否过多，是否进行分库分表\n5. 检查数据库所在服务器配置，适当增加资源\n\n\n\n# 二.索引\n\n## 1.定义\n\n索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它 们包含着对数据表里所有记录的引用指针。\n\n\n\n## 2.分类\n\n主键索引:数据列不允许重复，不允许为NULL， 一个表只能有一个主键。 \n\n唯一索引:数据列不允许重复，允许为NULL值， 一个表允许多个列创建唯一索引。 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD UNIQUE(column);\n  ```\n\n   创建唯一索引 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD UNIQUE(column1,column2);\n  ```\n\n   创建唯一组合索引 \n\n普通索引:基本的索引类型，没有唯一性的限制，允许为NULL值。 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD INDEX index_name(column); \n  ```\n\n  创建普通索引 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD INDEX index_name(column1,column2,column3);\n  ```\n\n   创建组合索引 \n\n全文索引：是目前搜索引擎使用的一种关键技术。 \n\n- 可以通过\n\n  ```\n  ALTER TABLE table_name ADD FULLTEXT(column);\n  ```\n\n   创建全文索引\n\n  \n\n## 3.索引的数据结构\n\nB树的特点：\n\n1. 节点排序\n2. 一个节点存多个元素，多个元素也排序\n\n\n\nB+树的特点：\n\n1. 拥有B树的特点\n2. 叶子节点之间有指针\n3. 叶子节点存储所有元素，并且排好顺序\n\n\n\nMysql索引使用的是B+树，因为索引是用来加快查询速度的，而B+树通过对数据进行排序，叶子节点存储了所有元素，从而使B+树不会太高，而且叶子节点有指针，可以支持全表扫描，范围查找等SQL语句\n\n\n\n## 4.索引失效\n\n1. 查询条件中有or,即使有部分条件带索引也会失效\n2. like查询是以%开头\n3. 如果列类型是字符串，那在查询条件中需要将数据用引号引用起来，否则不走索引\n4. 索引列上参与计算会导致索引失效\n5. 违背最左匹配原则\n6. 如果mysql估计全表扫描要比使用索引要快，会不适用索引\n","slug":"Mysql慢查询的优化","published":1,"updated":"2024-04-24T07:34:25.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj993r0009a4ue1cjqfh90","content":"<h1 id=\"一-Mysql慢查询如何优化？\"><a href=\"#一-Mysql慢查询如何优化？\" class=\"headerlink\" title=\"一.Mysql慢查询如何优化？\"></a>一.Mysql慢查询如何优化？</h1><ol>\n<li>检查是否使用了索引，优化SQL使用索引</li>\n<li>检查所用索引，是否为最有索引</li>\n<li>检查所查字段是否都是必须，是否查询了过多字段，查出了多余数据</li>\n<li>检查表中数据是否过多，是否进行分库分表</li>\n<li>检查数据库所在服务器配置，适当增加资源</li>\n</ol>\n<h1 id=\"二-索引\"><a href=\"#二-索引\" class=\"headerlink\" title=\"二.索引\"></a>二.索引</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它 们包含着对数据表里所有记录的引用指针。</p>\n<h2 id=\"2-分类\"><a href=\"#2-分类\" class=\"headerlink\" title=\"2.分类\"></a>2.分类</h2><p>主键索引:数据列不允许重复，不允许为NULL， 一个表只能有一个主键。 </p>\n<p>唯一索引:数据列不允许重复，允许为NULL值， 一个表允许多个列创建唯一索引。 </p>\n<ul>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD UNIQUE(column);</span><br></pre></td></tr></table></figure>\n\n<p> 创建唯一索引 </p>\n</li>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD UNIQUE(column1,column2);</span><br></pre></td></tr></table></figure>\n\n<p> 创建唯一组合索引</p>\n</li>\n</ul>\n<p>普通索引:基本的索引类型，没有唯一性的限制，允许为NULL值。 </p>\n<ul>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD INDEX index_name(column); </span><br></pre></td></tr></table></figure>\n\n<p>创建普通索引 </p>\n</li>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD INDEX index_name(column1,column2,column3);</span><br></pre></td></tr></table></figure>\n\n<p> 创建组合索引</p>\n</li>\n</ul>\n<p>全文索引：是目前搜索引擎使用的一种关键技术。 </p>\n<ul>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD FULLTEXT(column);</span><br></pre></td></tr></table></figure>\n\n<p> 创建全文索引</p>\n</li>\n</ul>\n<h2 id=\"3-索引的数据结构\"><a href=\"#3-索引的数据结构\" class=\"headerlink\" title=\"3.索引的数据结构\"></a>3.索引的数据结构</h2><p>B树的特点：</p>\n<ol>\n<li>节点排序</li>\n<li>一个节点存多个元素，多个元素也排序</li>\n</ol>\n<p>B+树的特点：</p>\n<ol>\n<li>拥有B树的特点</li>\n<li>叶子节点之间有指针</li>\n<li>叶子节点存储所有元素，并且排好顺序</li>\n</ol>\n<p>Mysql索引使用的是B+树，因为索引是用来加快查询速度的，而B+树通过对数据进行排序，叶子节点存储了所有元素，从而使B+树不会太高，而且叶子节点有指针，可以支持全表扫描，范围查找等SQL语句</p>\n<h2 id=\"4-索引失效\"><a href=\"#4-索引失效\" class=\"headerlink\" title=\"4.索引失效\"></a>4.索引失效</h2><ol>\n<li>查询条件中有or,即使有部分条件带索引也会失效</li>\n<li>like查询是以%开头</li>\n<li>如果列类型是字符串，那在查询条件中需要将数据用引号引用起来，否则不走索引</li>\n<li>索引列上参与计算会导致索引失效</li>\n<li>违背最左匹配原则</li>\n<li>如果mysql估计全表扫描要比使用索引要快，会不适用索引</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-Mysql慢查询如何优化？\"><a href=\"#一-Mysql慢查询如何优化？\" class=\"headerlink\" title=\"一.Mysql慢查询如何优化？\"></a>一.Mysql慢查询如何优化？</h1><ol>\n<li>检查是否使用了索引，优化SQL使用索引</li>\n<li>检查所用索引，是否为最有索引</li>\n<li>检查所查字段是否都是必须，是否查询了过多字段，查出了多余数据</li>\n<li>检查表中数据是否过多，是否进行分库分表</li>\n<li>检查数据库所在服务器配置，适当增加资源</li>\n</ol>\n<h1 id=\"二-索引\"><a href=\"#二-索引\" class=\"headerlink\" title=\"二.索引\"></a>二.索引</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它 们包含着对数据表里所有记录的引用指针。</p>\n<h2 id=\"2-分类\"><a href=\"#2-分类\" class=\"headerlink\" title=\"2.分类\"></a>2.分类</h2><p>主键索引:数据列不允许重复，不允许为NULL， 一个表只能有一个主键。 </p>\n<p>唯一索引:数据列不允许重复，允许为NULL值， 一个表允许多个列创建唯一索引。 </p>\n<ul>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD UNIQUE(column);</span><br></pre></td></tr></table></figure>\n\n<p> 创建唯一索引 </p>\n</li>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD UNIQUE(column1,column2);</span><br></pre></td></tr></table></figure>\n\n<p> 创建唯一组合索引</p>\n</li>\n</ul>\n<p>普通索引:基本的索引类型，没有唯一性的限制，允许为NULL值。 </p>\n<ul>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD INDEX index_name(column); </span><br></pre></td></tr></table></figure>\n\n<p>创建普通索引 </p>\n</li>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD INDEX index_name(column1,column2,column3);</span><br></pre></td></tr></table></figure>\n\n<p> 创建组合索引</p>\n</li>\n</ul>\n<p>全文索引：是目前搜索引擎使用的一种关键技术。 </p>\n<ul>\n<li><p>可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD FULLTEXT(column);</span><br></pre></td></tr></table></figure>\n\n<p> 创建全文索引</p>\n</li>\n</ul>\n<h2 id=\"3-索引的数据结构\"><a href=\"#3-索引的数据结构\" class=\"headerlink\" title=\"3.索引的数据结构\"></a>3.索引的数据结构</h2><p>B树的特点：</p>\n<ol>\n<li>节点排序</li>\n<li>一个节点存多个元素，多个元素也排序</li>\n</ol>\n<p>B+树的特点：</p>\n<ol>\n<li>拥有B树的特点</li>\n<li>叶子节点之间有指针</li>\n<li>叶子节点存储所有元素，并且排好顺序</li>\n</ol>\n<p>Mysql索引使用的是B+树，因为索引是用来加快查询速度的，而B+树通过对数据进行排序，叶子节点存储了所有元素，从而使B+树不会太高，而且叶子节点有指针，可以支持全表扫描，范围查找等SQL语句</p>\n<h2 id=\"4-索引失效\"><a href=\"#4-索引失效\" class=\"headerlink\" title=\"4.索引失效\"></a>4.索引失效</h2><ol>\n<li>查询条件中有or,即使有部分条件带索引也会失效</li>\n<li>like查询是以%开头</li>\n<li>如果列类型是字符串，那在查询条件中需要将数据用引号引用起来，否则不走索引</li>\n<li>索引列上参与计算会导致索引失效</li>\n<li>违背最左匹配原则</li>\n<li>如果mysql估计全表扫描要比使用索引要快，会不适用索引</li>\n</ol>\n"},{"title":"Mysql的存储机制和锁","date":"2023-04-17T06:30:19.000Z","_content":"\n#### 1.Mysql的存储引擎\n\n默认为InnoDB\n\n还有**MyISAM存储引擎**\n\n\n\n#### 2.InnoDB的特性\n\n1）支持提交，回滚等事务\n\n2）支持完整的外键约束\n\n3）专为大数量设计\n\n4）实现了行级锁，共享锁和排他锁\n\n\n\n#### 3.MyISAM的特性\n\nMyISAM拥有较高的插入、查询速度，但**不支持事物**和行级锁\n\n\n\n#### 4.锁的分类\n\n按锁粒度分：\n\n​\t行锁：锁某行数据，颗粒度最小，并发度高\n\n​\t表锁：锁整张表，颗粒度大，并发度低\n\n​\t间隙锁：锁一个区间\n\n\n\n还可以分为：\n\n​\t共享锁：也就是读锁，一个事务给某行数据加了读锁，其他事务也可以读，但是不能写\n\n​\t排他锁：也就是写锁，一个事务给某行数据加了写锁，其他事务不能读，也不能写\n\n\n\n还可以分为：\n\n​\t乐观锁：并不会真正锁某行记录，而是通过一个版本号来实现\n\n​\t悲观锁：行锁，表锁都是悲观锁\n\n\n\n在事务的隔离级别实现中，需要用锁来解决幻读\n\n\n\n#### 4.事务\n\n##### 1）并发带来的问题\n\n- **脏读：**一个事务读取另一个**未提交**的数据。\n- **不可重复读：**一个事务范围内两个相同的查询却返回了不同数据。\n- **幻读：**一个事务范围内两个相同的查询却返回了不同数据。对应的是插入操作。\n\n**数据库通常会通过锁机制来解决数据并发访问问题，直接使用锁非常麻烦，为此**数据库为用户提供了自动锁机制，用户指定会话的事务隔离级别，数据库就会通过分析SQL语句然后为事务访问的资源加上合适的锁\n\n##### 2）事务的隔离级别\n\n从上到下，由低到高\n\n- Read Uncommited，读未提交，即一个事务可以读取另一个未提交事务的数据；并发操作会导致脏读\n- Read Commited，读操作，即一个事务要等到另一个事务提交后才能读取数据；解决脏读问题；并发操作会导致不可重复读\n- Repeatable Read，重复读，即开始读取数据（事务开启）时，不再允许修改操作；解决不可重复读问题；并发操作会导致幻读（对应insert操作）\n- Serializable，序列化，最高的事务隔离级别，该级别下，事务串行化顺序执行；避免脏读、不可重复读与幻读；但是该级别效率低下，比较消耗数据库性能，一般不用。\n\n![事务的隔离级别](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240223145953.png)\n\n\n\n\n\n\n\n\n\n","source":"_posts/Mysql的存储机制和锁.md","raw":"---\ntitle: Mysql的存储机制和锁\ndate: 2023-04-17 14:30:19\ntags: [mysql, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n#### 1.Mysql的存储引擎\n\n默认为InnoDB\n\n还有**MyISAM存储引擎**\n\n\n\n#### 2.InnoDB的特性\n\n1）支持提交，回滚等事务\n\n2）支持完整的外键约束\n\n3）专为大数量设计\n\n4）实现了行级锁，共享锁和排他锁\n\n\n\n#### 3.MyISAM的特性\n\nMyISAM拥有较高的插入、查询速度，但**不支持事物**和行级锁\n\n\n\n#### 4.锁的分类\n\n按锁粒度分：\n\n​\t行锁：锁某行数据，颗粒度最小，并发度高\n\n​\t表锁：锁整张表，颗粒度大，并发度低\n\n​\t间隙锁：锁一个区间\n\n\n\n还可以分为：\n\n​\t共享锁：也就是读锁，一个事务给某行数据加了读锁，其他事务也可以读，但是不能写\n\n​\t排他锁：也就是写锁，一个事务给某行数据加了写锁，其他事务不能读，也不能写\n\n\n\n还可以分为：\n\n​\t乐观锁：并不会真正锁某行记录，而是通过一个版本号来实现\n\n​\t悲观锁：行锁，表锁都是悲观锁\n\n\n\n在事务的隔离级别实现中，需要用锁来解决幻读\n\n\n\n#### 4.事务\n\n##### 1）并发带来的问题\n\n- **脏读：**一个事务读取另一个**未提交**的数据。\n- **不可重复读：**一个事务范围内两个相同的查询却返回了不同数据。\n- **幻读：**一个事务范围内两个相同的查询却返回了不同数据。对应的是插入操作。\n\n**数据库通常会通过锁机制来解决数据并发访问问题，直接使用锁非常麻烦，为此**数据库为用户提供了自动锁机制，用户指定会话的事务隔离级别，数据库就会通过分析SQL语句然后为事务访问的资源加上合适的锁\n\n##### 2）事务的隔离级别\n\n从上到下，由低到高\n\n- Read Uncommited，读未提交，即一个事务可以读取另一个未提交事务的数据；并发操作会导致脏读\n- Read Commited，读操作，即一个事务要等到另一个事务提交后才能读取数据；解决脏读问题；并发操作会导致不可重复读\n- Repeatable Read，重复读，即开始读取数据（事务开启）时，不再允许修改操作；解决不可重复读问题；并发操作会导致幻读（对应insert操作）\n- Serializable，序列化，最高的事务隔离级别，该级别下，事务串行化顺序执行；避免脏读、不可重复读与幻读；但是该级别效率低下，比较消耗数据库性能，一般不用。\n\n![事务的隔离级别](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240223145953.png)\n\n\n\n\n\n\n\n\n\n","slug":"Mysql的存储机制和锁","published":1,"updated":"2024-04-24T07:34:25.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj993z000ca4uegjma43kw","content":"<h4 id=\"1-Mysql的存储引擎\"><a href=\"#1-Mysql的存储引擎\" class=\"headerlink\" title=\"1.Mysql的存储引擎\"></a>1.Mysql的存储引擎</h4><p>默认为InnoDB</p>\n<p>还有<strong>MyISAM存储引擎</strong></p>\n<h4 id=\"2-InnoDB的特性\"><a href=\"#2-InnoDB的特性\" class=\"headerlink\" title=\"2.InnoDB的特性\"></a>2.InnoDB的特性</h4><p>1）支持提交，回滚等事务</p>\n<p>2）支持完整的外键约束</p>\n<p>3）专为大数量设计</p>\n<p>4）实现了行级锁，共享锁和排他锁</p>\n<h4 id=\"3-MyISAM的特性\"><a href=\"#3-MyISAM的特性\" class=\"headerlink\" title=\"3.MyISAM的特性\"></a>3.MyISAM的特性</h4><p>MyISAM拥有较高的插入、查询速度，但<strong>不支持事物</strong>和行级锁</p>\n<h4 id=\"4-锁的分类\"><a href=\"#4-锁的分类\" class=\"headerlink\" title=\"4.锁的分类\"></a>4.锁的分类</h4><p>按锁粒度分：</p>\n<p>​\t行锁：锁某行数据，颗粒度最小，并发度高</p>\n<p>​\t表锁：锁整张表，颗粒度大，并发度低</p>\n<p>​\t间隙锁：锁一个区间</p>\n<p>还可以分为：</p>\n<p>​\t共享锁：也就是读锁，一个事务给某行数据加了读锁，其他事务也可以读，但是不能写</p>\n<p>​\t排他锁：也就是写锁，一个事务给某行数据加了写锁，其他事务不能读，也不能写</p>\n<p>还可以分为：</p>\n<p>​\t乐观锁：并不会真正锁某行记录，而是通过一个版本号来实现</p>\n<p>​\t悲观锁：行锁，表锁都是悲观锁</p>\n<p>在事务的隔离级别实现中，需要用锁来解决幻读</p>\n<h4 id=\"4-事务\"><a href=\"#4-事务\" class=\"headerlink\" title=\"4.事务\"></a>4.事务</h4><h5 id=\"1）并发带来的问题\"><a href=\"#1）并发带来的问题\" class=\"headerlink\" title=\"1）并发带来的问题\"></a>1）并发带来的问题</h5><ul>\n<li><strong>脏读：</strong>一个事务读取另一个<strong>未提交</strong>的数据。</li>\n<li><strong>不可重复读：</strong>一个事务范围内两个相同的查询却返回了不同数据。</li>\n<li><strong>幻读：</strong>一个事务范围内两个相同的查询却返回了不同数据。对应的是插入操作。</li>\n</ul>\n<p><strong>数据库通常会通过锁机制来解决数据并发访问问题，直接使用锁非常麻烦，为此</strong>数据库为用户提供了自动锁机制，用户指定会话的事务隔离级别，数据库就会通过分析SQL语句然后为事务访问的资源加上合适的锁</p>\n<h5 id=\"2）事务的隔离级别\"><a href=\"#2）事务的隔离级别\" class=\"headerlink\" title=\"2）事务的隔离级别\"></a>2）事务的隔离级别</h5><p>从上到下，由低到高</p>\n<ul>\n<li>Read Uncommited，读未提交，即一个事务可以读取另一个未提交事务的数据；并发操作会导致脏读</li>\n<li>Read Commited，读操作，即一个事务要等到另一个事务提交后才能读取数据；解决脏读问题；并发操作会导致不可重复读</li>\n<li>Repeatable Read，重复读，即开始读取数据（事务开启）时，不再允许修改操作；解决不可重复读问题；并发操作会导致幻读（对应insert操作）</li>\n<li>Serializable，序列化，最高的事务隔离级别，该级别下，事务串行化顺序执行；避免脏读、不可重复读与幻读；但是该级别效率低下，比较消耗数据库性能，一般不用。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240223145953.png\" alt=\"事务的隔离级别\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-Mysql的存储引擎\"><a href=\"#1-Mysql的存储引擎\" class=\"headerlink\" title=\"1.Mysql的存储引擎\"></a>1.Mysql的存储引擎</h4><p>默认为InnoDB</p>\n<p>还有<strong>MyISAM存储引擎</strong></p>\n<h4 id=\"2-InnoDB的特性\"><a href=\"#2-InnoDB的特性\" class=\"headerlink\" title=\"2.InnoDB的特性\"></a>2.InnoDB的特性</h4><p>1）支持提交，回滚等事务</p>\n<p>2）支持完整的外键约束</p>\n<p>3）专为大数量设计</p>\n<p>4）实现了行级锁，共享锁和排他锁</p>\n<h4 id=\"3-MyISAM的特性\"><a href=\"#3-MyISAM的特性\" class=\"headerlink\" title=\"3.MyISAM的特性\"></a>3.MyISAM的特性</h4><p>MyISAM拥有较高的插入、查询速度，但<strong>不支持事物</strong>和行级锁</p>\n<h4 id=\"4-锁的分类\"><a href=\"#4-锁的分类\" class=\"headerlink\" title=\"4.锁的分类\"></a>4.锁的分类</h4><p>按锁粒度分：</p>\n<p>​\t行锁：锁某行数据，颗粒度最小，并发度高</p>\n<p>​\t表锁：锁整张表，颗粒度大，并发度低</p>\n<p>​\t间隙锁：锁一个区间</p>\n<p>还可以分为：</p>\n<p>​\t共享锁：也就是读锁，一个事务给某行数据加了读锁，其他事务也可以读，但是不能写</p>\n<p>​\t排他锁：也就是写锁，一个事务给某行数据加了写锁，其他事务不能读，也不能写</p>\n<p>还可以分为：</p>\n<p>​\t乐观锁：并不会真正锁某行记录，而是通过一个版本号来实现</p>\n<p>​\t悲观锁：行锁，表锁都是悲观锁</p>\n<p>在事务的隔离级别实现中，需要用锁来解决幻读</p>\n<h4 id=\"4-事务\"><a href=\"#4-事务\" class=\"headerlink\" title=\"4.事务\"></a>4.事务</h4><h5 id=\"1）并发带来的问题\"><a href=\"#1）并发带来的问题\" class=\"headerlink\" title=\"1）并发带来的问题\"></a>1）并发带来的问题</h5><ul>\n<li><strong>脏读：</strong>一个事务读取另一个<strong>未提交</strong>的数据。</li>\n<li><strong>不可重复读：</strong>一个事务范围内两个相同的查询却返回了不同数据。</li>\n<li><strong>幻读：</strong>一个事务范围内两个相同的查询却返回了不同数据。对应的是插入操作。</li>\n</ul>\n<p><strong>数据库通常会通过锁机制来解决数据并发访问问题，直接使用锁非常麻烦，为此</strong>数据库为用户提供了自动锁机制，用户指定会话的事务隔离级别，数据库就会通过分析SQL语句然后为事务访问的资源加上合适的锁</p>\n<h5 id=\"2）事务的隔离级别\"><a href=\"#2）事务的隔离级别\" class=\"headerlink\" title=\"2）事务的隔离级别\"></a>2）事务的隔离级别</h5><p>从上到下，由低到高</p>\n<ul>\n<li>Read Uncommited，读未提交，即一个事务可以读取另一个未提交事务的数据；并发操作会导致脏读</li>\n<li>Read Commited，读操作，即一个事务要等到另一个事务提交后才能读取数据；解决脏读问题；并发操作会导致不可重复读</li>\n<li>Repeatable Read，重复读，即开始读取数据（事务开启）时，不再允许修改操作；解决不可重复读问题；并发操作会导致幻读（对应insert操作）</li>\n<li>Serializable，序列化，最高的事务隔离级别，该级别下，事务串行化顺序执行；避免脏读、不可重复读与幻读；但是该级别效率低下，比较消耗数据库性能，一般不用。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240223145953.png\" alt=\"事务的隔离级别\"></p>\n"},{"title":"Spring AOP和代理模式","date":"2023-11-17T10:15:24.000Z","_content":"\n# 一.代理模式\n\n## 1.定义\n\n对一个对象提供一个代理对象，使用代理对象控制对原对象的引用\n\n\n\n![结构类图](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240223182254.png)\n\n\n\nRealSubject类实现Subject接口，Proxy类实现Subject接口，并定义RealSubject对象作为成员变量\n\n客户端不直接依赖代理类\n\n\n\n## 2.分类\n\n- 静态代理：通过代码编译生成代理类\n- 动态代理：运行时动态生成代理类\n\n\n\n## 3.实现\n\n1）jdk的动态代理\n\n自定义Proxy类，实现InvocationHandle接口，重写invoke方法\n\n```\npublic interface Subject {\n    public void rent();\n\n    public void hello(String str);\n}\npublic class SubjectImpl implements Subject{\n    @Override\n    public void rent() {\n        System.out.println(\"I want to rent my house\");\n    }\n\n    @Override\n    public void hello(String str) {\n        System.out.println(\"hello: \" + str);\n    }\n}\npublic class DynamicProxy implements InvocationHandler {\n    // 这个就是要代理的真实对象\n    private Object subject;\n\n    // 构造方法，给要代理的真实对象赋初值\n    public DynamicProxy(Object subject) {\n        this.subject = subject;\n    }\n\n    @Override\n    public Object invoke(Object object, Method method, Object[] args) throws Throwable {\n        // 在代理真实对象前可以添加一些自己的操作\n        System.out.println(\"before rent house\");\n        System.out.println(\"Method:\" + method);\n\n        // 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        Object result = method.invoke(subject, args);\n\n        // 在代理真实对象后也可以添加一些自己的操作\n        System.out.println(\"after rent house\");\n\n        return result;\n    }\n\n}\npublic class Client {\n    public static void main(String[] args) {\n        //    要代理的真实对象\n        Subject realSubject = new SubjectImpl();\n        //   要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n        InvocationHandler handler = new DynamicProxy(realSubject);\n        /*\n         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，来看看其三个参数\n         * 第一个参数 handler.getClass().getClassLoader() ，这里使用handler这个类的ClassLoader对象来加载我们的代理对象\n         * 第二个参数realSubject.getClass().getInterfaces()，这里为代理对象提供的接口是真实对象所实行的接口，\n         * 表示要代理的是该真实对象，这样就能调用这组接口中的方法了\n         * 第三个参数handler， 这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n         */\n        Subject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject.getClass().getInterfaces(), handler);\n        System.out.println(subject.getClass().getName());\n        subject.rent();\n        subject.hello(\"world\");\n\n    }\n```\n\n自定义工厂类，返回代理对象\n\n\n\n","source":"_posts/Spring-AOP和代理模式.md","raw":"---\ntitle: Spring AOP和代理模式\ndate: 2023-11-17 18:15:24\ntags: [Spring, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.代理模式\n\n## 1.定义\n\n对一个对象提供一个代理对象，使用代理对象控制对原对象的引用\n\n\n\n![结构类图](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240223182254.png)\n\n\n\nRealSubject类实现Subject接口，Proxy类实现Subject接口，并定义RealSubject对象作为成员变量\n\n客户端不直接依赖代理类\n\n\n\n## 2.分类\n\n- 静态代理：通过代码编译生成代理类\n- 动态代理：运行时动态生成代理类\n\n\n\n## 3.实现\n\n1）jdk的动态代理\n\n自定义Proxy类，实现InvocationHandle接口，重写invoke方法\n\n```\npublic interface Subject {\n    public void rent();\n\n    public void hello(String str);\n}\npublic class SubjectImpl implements Subject{\n    @Override\n    public void rent() {\n        System.out.println(\"I want to rent my house\");\n    }\n\n    @Override\n    public void hello(String str) {\n        System.out.println(\"hello: \" + str);\n    }\n}\npublic class DynamicProxy implements InvocationHandler {\n    // 这个就是要代理的真实对象\n    private Object subject;\n\n    // 构造方法，给要代理的真实对象赋初值\n    public DynamicProxy(Object subject) {\n        this.subject = subject;\n    }\n\n    @Override\n    public Object invoke(Object object, Method method, Object[] args) throws Throwable {\n        // 在代理真实对象前可以添加一些自己的操作\n        System.out.println(\"before rent house\");\n        System.out.println(\"Method:\" + method);\n\n        // 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        Object result = method.invoke(subject, args);\n\n        // 在代理真实对象后也可以添加一些自己的操作\n        System.out.println(\"after rent house\");\n\n        return result;\n    }\n\n}\npublic class Client {\n    public static void main(String[] args) {\n        //    要代理的真实对象\n        Subject realSubject = new SubjectImpl();\n        //   要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n        InvocationHandler handler = new DynamicProxy(realSubject);\n        /*\n         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，来看看其三个参数\n         * 第一个参数 handler.getClass().getClassLoader() ，这里使用handler这个类的ClassLoader对象来加载我们的代理对象\n         * 第二个参数realSubject.getClass().getInterfaces()，这里为代理对象提供的接口是真实对象所实行的接口，\n         * 表示要代理的是该真实对象，这样就能调用这组接口中的方法了\n         * 第三个参数handler， 这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n         */\n        Subject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject.getClass().getInterfaces(), handler);\n        System.out.println(subject.getClass().getName());\n        subject.rent();\n        subject.hello(\"world\");\n\n    }\n```\n\n自定义工厂类，返回代理对象\n\n\n\n","slug":"Spring-AOP和代理模式","published":1,"updated":"2024-04-24T07:34:25.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj9940000fa4ue8onv4bp5","content":"<h1 id=\"一-代理模式\"><a href=\"#一-代理模式\" class=\"headerlink\" title=\"一.代理模式\"></a>一.代理模式</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>对一个对象提供一个代理对象，使用代理对象控制对原对象的引用</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240223182254.png\" alt=\"结构类图\"></p>\n<p>RealSubject类实现Subject接口，Proxy类实现Subject接口，并定义RealSubject对象作为成员变量</p>\n<p>客户端不直接依赖代理类</p>\n<h2 id=\"2-分类\"><a href=\"#2-分类\" class=\"headerlink\" title=\"2.分类\"></a>2.分类</h2><ul>\n<li>静态代理：通过代码编译生成代理类</li>\n<li>动态代理：运行时动态生成代理类</li>\n</ul>\n<h2 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h2><p>1）jdk的动态代理</p>\n<p>自定义Proxy类，实现InvocationHandle接口，重写invoke方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Subject &#123;</span><br><span class=\"line\">    public void rent();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void hello(String str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class SubjectImpl implements Subject&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void rent() &#123;</span><br><span class=\"line\">        System.out.println(&quot;I want to rent my house&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void hello(String str) &#123;</span><br><span class=\"line\">        System.out.println(&quot;hello: &quot; + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class DynamicProxy implements InvocationHandler &#123;</span><br><span class=\"line\">    // 这个就是要代理的真实对象</span><br><span class=\"line\">    private Object subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 构造方法，给要代理的真实对象赋初值</span><br><span class=\"line\">    public DynamicProxy(Object subject) &#123;</span><br><span class=\"line\">        this.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object object, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">        // 在代理真实对象前可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before rent house&quot;);</span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        Object result = method.invoke(subject, args);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 在代理真实对象后也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after rent house&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        //    要代理的真实对象</span><br><span class=\"line\">        Subject realSubject = new SubjectImpl();</span><br><span class=\"line\">        //   要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span><br><span class=\"line\">        InvocationHandler handler = new DynamicProxy(realSubject);</span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，来看看其三个参数</span><br><span class=\"line\">         * 第一个参数 handler.getClass().getClassLoader() ，这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span><br><span class=\"line\">         * 第二个参数realSubject.getClass().getInterfaces()，这里为代理对象提供的接口是真实对象所实行的接口，</span><br><span class=\"line\">         * 表示要代理的是该真实对象，这样就能调用这组接口中的方法了</span><br><span class=\"line\">         * 第三个参数handler， 这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span><br><span class=\"line\">         */</span><br><span class=\"line\">        Subject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject.getClass().getInterfaces(), handler);</span><br><span class=\"line\">        System.out.println(subject.getClass().getName());</span><br><span class=\"line\">        subject.rent();</span><br><span class=\"line\">        subject.hello(&quot;world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义工厂类，返回代理对象</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-代理模式\"><a href=\"#一-代理模式\" class=\"headerlink\" title=\"一.代理模式\"></a>一.代理模式</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>对一个对象提供一个代理对象，使用代理对象控制对原对象的引用</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240223182254.png\" alt=\"结构类图\"></p>\n<p>RealSubject类实现Subject接口，Proxy类实现Subject接口，并定义RealSubject对象作为成员变量</p>\n<p>客户端不直接依赖代理类</p>\n<h2 id=\"2-分类\"><a href=\"#2-分类\" class=\"headerlink\" title=\"2.分类\"></a>2.分类</h2><ul>\n<li>静态代理：通过代码编译生成代理类</li>\n<li>动态代理：运行时动态生成代理类</li>\n</ul>\n<h2 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h2><p>1）jdk的动态代理</p>\n<p>自定义Proxy类，实现InvocationHandle接口，重写invoke方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Subject &#123;</span><br><span class=\"line\">    public void rent();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void hello(String str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class SubjectImpl implements Subject&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void rent() &#123;</span><br><span class=\"line\">        System.out.println(&quot;I want to rent my house&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void hello(String str) &#123;</span><br><span class=\"line\">        System.out.println(&quot;hello: &quot; + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class DynamicProxy implements InvocationHandler &#123;</span><br><span class=\"line\">    // 这个就是要代理的真实对象</span><br><span class=\"line\">    private Object subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 构造方法，给要代理的真实对象赋初值</span><br><span class=\"line\">    public DynamicProxy(Object subject) &#123;</span><br><span class=\"line\">        this.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object object, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">        // 在代理真实对象前可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before rent house&quot;);</span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        Object result = method.invoke(subject, args);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 在代理真实对象后也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after rent house&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        //    要代理的真实对象</span><br><span class=\"line\">        Subject realSubject = new SubjectImpl();</span><br><span class=\"line\">        //   要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span><br><span class=\"line\">        InvocationHandler handler = new DynamicProxy(realSubject);</span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，来看看其三个参数</span><br><span class=\"line\">         * 第一个参数 handler.getClass().getClassLoader() ，这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span><br><span class=\"line\">         * 第二个参数realSubject.getClass().getInterfaces()，这里为代理对象提供的接口是真实对象所实行的接口，</span><br><span class=\"line\">         * 表示要代理的是该真实对象，这样就能调用这组接口中的方法了</span><br><span class=\"line\">         * 第三个参数handler， 这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span><br><span class=\"line\">         */</span><br><span class=\"line\">        Subject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject.getClass().getInterfaces(), handler);</span><br><span class=\"line\">        System.out.println(subject.getClass().getName());</span><br><span class=\"line\">        subject.rent();</span><br><span class=\"line\">        subject.hello(&quot;world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义工厂类，返回代理对象</p>\n"},{"title":"SpringMVC简介","date":"2022-03-02T08:30:33.000Z","_content":"\n# 一.MVC\n\n## 1.定义\n\n一种软件架构思想，将软件按照模型，视图，控制器来划分\n\nM：Model，模型层，指工程中的JavaBean，作用是处理数据\n\nV：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据\n\nC：Controller，控制层，指工程中的servlet，作用是接受请求和相应浏览器\n\n\n\n## 2.工作流程\n\n用户通过视图层发送请求到服务器，在服务器中请求被Controller接受，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到对应的View视图，渲染数据后最终响应给浏览器。\n\n\n\n# 二.SpringMVC\n\nspringMVC是spring的一个子项目，是spring为表述层（前台页面+servlet）提供的一整套完备的解决方案。\n\n","source":"_posts/SpringMVC简介.md","raw":"---\ntitle: SpringMVC简介\ndate: 2022-03-02 16:30:33\ntags: [Spring, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.MVC\n\n## 1.定义\n\n一种软件架构思想，将软件按照模型，视图，控制器来划分\n\nM：Model，模型层，指工程中的JavaBean，作用是处理数据\n\nV：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据\n\nC：Controller，控制层，指工程中的servlet，作用是接受请求和相应浏览器\n\n\n\n## 2.工作流程\n\n用户通过视图层发送请求到服务器，在服务器中请求被Controller接受，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到对应的View视图，渲染数据后最终响应给浏览器。\n\n\n\n# 二.SpringMVC\n\nspringMVC是spring的一个子项目，是spring为表述层（前台页面+servlet）提供的一整套完备的解决方案。\n\n","slug":"SpringMVC简介","published":1,"updated":"2024-04-24T07:34:25.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj9946000na4ue92k55xaq","content":"<h1 id=\"一-MVC\"><a href=\"#一-MVC\" class=\"headerlink\" title=\"一.MVC\"></a>一.MVC</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>一种软件架构思想，将软件按照模型，视图，控制器来划分</p>\n<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>\n<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>\n<p>C：Controller，控制层，指工程中的servlet，作用是接受请求和相应浏览器</p>\n<h2 id=\"2-工作流程\"><a href=\"#2-工作流程\" class=\"headerlink\" title=\"2.工作流程\"></a>2.工作流程</h2><p>用户通过视图层发送请求到服务器，在服务器中请求被Controller接受，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到对应的View视图，渲染数据后最终响应给浏览器。</p>\n<h1 id=\"二-SpringMVC\"><a href=\"#二-SpringMVC\" class=\"headerlink\" title=\"二.SpringMVC\"></a>二.SpringMVC</h1><p>springMVC是spring的一个子项目，是spring为表述层（前台页面+servlet）提供的一整套完备的解决方案。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-MVC\"><a href=\"#一-MVC\" class=\"headerlink\" title=\"一.MVC\"></a>一.MVC</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>一种软件架构思想，将软件按照模型，视图，控制器来划分</p>\n<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>\n<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>\n<p>C：Controller，控制层，指工程中的servlet，作用是接受请求和相应浏览器</p>\n<h2 id=\"2-工作流程\"><a href=\"#2-工作流程\" class=\"headerlink\" title=\"2.工作流程\"></a>2.工作流程</h2><p>用户通过视图层发送请求到服务器，在服务器中请求被Controller接受，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到对应的View视图，渲染数据后最终响应给浏览器。</p>\n<h1 id=\"二-SpringMVC\"><a href=\"#二-SpringMVC\" class=\"headerlink\" title=\"二.SpringMVC\"></a>二.SpringMVC</h1><p>springMVC是spring的一个子项目，是spring为表述层（前台页面+servlet）提供的一整套完备的解决方案。</p>\n"},{"title":"Springboot及其它第三方框架注解","date":"2024-04-24T03:01:40.000Z","_content":"\n## @JsonFormat\n\n从mongo里面读出来的时间类型，在实体类里面用Date接收，然后将bean传给前端的时候json中是Sun Apr 28 16:02:56 CST 2019这么显示的，但是前端要的是2019-4-28 16:02:56这样子的显示格式，而且mongo中的时间类型的时区转换到实体类里面还不一样。\n\n主要就是解决实体类和json之间互相转换的时候时间类型格式和时区不一致的问题，当然也可以用在枚举中和集合里面。\n\n```java\npublic class Param {\n    @JsonFormat(shape = JsonFormat.Shape.STRING , pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"Asia/Shanghai\")\n    private Date date;\n\n    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n}\n```\n\n\n\n## @DateTimeFormat\n\n与@JsonFormat类似，也是对时间格式进行规范的。主要处理前端时间类型与后端pojo对象中的成员变量进行数据绑定，所约束的时间格式并不会影响后端返回前端的时间类型数据格式。\n\n\n\n## @Autowired\n\n启用注解注入后，可以在属性、Setter 和构造器上使用自动装配。\n\n### 一.@Autowired使用\n\n#### 1.在属性上使用 @Autowired\n\n使用 `@Autowired` 对属性进行注解。这样就不需要使用 Getter 和 Setter 了。\n\n#### 2.在 Setter 方法上使用 @Autowired\n\n#### 3.在构造函数上使用 @Autowired\n\n#### 4.@Autowired 和可选依赖\n\n在构建 Bean 时，`@Autowired` 依赖应该可用。否则，如果 Spring 无法解析用于装配的 Bean，它就会阻止 Spring 容器成功启动，并抛出 `NoSuchBeanDefinitionException` 异常：\n\n```java\nCaused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: \nNo qualifying bean of type [com.autowire.sample.FooDAO] found for dependency: \nexpected at least 1 bean which qualifies as autowire candidate for this dependency. \nDependency annotations: \n{@org.springframework.beans.factory.annotation.Autowired(required=true)}\n```\n\n要解决这个问题，需要声明一个 `required` 类型的 Bean：\n\n```java\npublic class FooService {\n    @Autowired(required = false)\n    private FooDAO dataAccessor; \n}\n```\n\n### 二.自动装配消岐\n\n默认情况下，Spring 按类型解析 `@Autowired` 依赖。如果容器中存在多个相同类型的 Bean，框架将抛出异常。\n\n要解决这一冲突，需要明确告诉 Spring 要注入哪个 Bean。\n\n#### 1.使用 @Qualifier 进行自动装配\n\n```java\n@Component(\"fooFormatter\")\npublic class FooFormatter implements Formatter {\n    public String format() {\n        return \"foo\";\n    }\n}\n@Component(\"barFormatter\")\npublic class BarFormatter implements Formatter {\n    public String format() {\n        return \"bar\";\n    }\n}\n```\n\n此时由于有两种类型的bean对象，Spring会抛出`NoUniqueBeanDefinitionException` 异常，此时使用@Qualifier注解缩小实现范围来避免这种情况。有多个相同类型的bean，最好使用@Qualifier注解。\n\n```java\npublic class FooService {\n    @Autowired\n    @Qualifier(\"fooFormatter\")\n    private Formatter formatter;\n}\n```\n\n#### 2.根据 Bean 名称装配\n\nSpring 使用 Bean 的名称作为默认 Qualifier value。它会检查容器，并查找与要自动装配的属性名称完全相同的 Bean 来进行装配。\n\n因此，在如下示例中，Spring 将 `fooFormatter` 属性名与 `FooFormatter` 实现相匹配。因此，在构建 `FooService` 时，它会注入该特定实现：\n\n```java\npublic class FooService {\n @Qualifier \n private Formatter fooFormatter; \n}\n```\n\n\n\n## @Resource\n\n@Resource注解默认通过byName方式注入，如果没有匹配则通过byType注入。**byName就是变量名去匹配bean的id属性，而byType则是变量类型去匹配bean的class属性**。\n\n```java\n// 1. 默认方式：byName\n@Resource  \nprivate UserService userDao; \n\n// 2. 指定byName\n@Resource(name=\"userService\")  \nprivate UserService userService; \n\n// 3. 指定byType\n@Resource(type=UserService.class)  \nprivate UserService userService; \n\n// 4. 指定byName和byType\n@Resource(name=\"userService\",type=UserService.class)  \nprivate UserService userService; \n\n```\n\n1. 既没指定name属性，也没指定type属性：默认通过byName方式注入，如果byName匹配失败，则使用byType方式注入（也就是上面的那个例子）\n2. 指定name属性：通过byName方式注入，把变量名和IOC容器中的id去匹配，匹配失败则报错\n3. 指定type属性：通过byType方式注入，在IOC容器中匹配对应的类型，如果匹配不到或者匹配到多个则报错\n4. 同时指定name属性和type属性：在IOC容器中匹配，名字和类型同时匹配则成功，否则失败\n   \n","source":"_posts/Springboot及其它第三方框架注解.md","raw":"---\ntitle: Springboot及其它第三方框架注解\ndate: 2024-04-24 11:01:40\ntags: [Spring, JAVA]\ncategories:\n- [技术, JAVA, 实践]\n---\n\n## @JsonFormat\n\n从mongo里面读出来的时间类型，在实体类里面用Date接收，然后将bean传给前端的时候json中是Sun Apr 28 16:02:56 CST 2019这么显示的，但是前端要的是2019-4-28 16:02:56这样子的显示格式，而且mongo中的时间类型的时区转换到实体类里面还不一样。\n\n主要就是解决实体类和json之间互相转换的时候时间类型格式和时区不一致的问题，当然也可以用在枚举中和集合里面。\n\n```java\npublic class Param {\n    @JsonFormat(shape = JsonFormat.Shape.STRING , pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"Asia/Shanghai\")\n    private Date date;\n\n    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n}\n```\n\n\n\n## @DateTimeFormat\n\n与@JsonFormat类似，也是对时间格式进行规范的。主要处理前端时间类型与后端pojo对象中的成员变量进行数据绑定，所约束的时间格式并不会影响后端返回前端的时间类型数据格式。\n\n\n\n## @Autowired\n\n启用注解注入后，可以在属性、Setter 和构造器上使用自动装配。\n\n### 一.@Autowired使用\n\n#### 1.在属性上使用 @Autowired\n\n使用 `@Autowired` 对属性进行注解。这样就不需要使用 Getter 和 Setter 了。\n\n#### 2.在 Setter 方法上使用 @Autowired\n\n#### 3.在构造函数上使用 @Autowired\n\n#### 4.@Autowired 和可选依赖\n\n在构建 Bean 时，`@Autowired` 依赖应该可用。否则，如果 Spring 无法解析用于装配的 Bean，它就会阻止 Spring 容器成功启动，并抛出 `NoSuchBeanDefinitionException` 异常：\n\n```java\nCaused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: \nNo qualifying bean of type [com.autowire.sample.FooDAO] found for dependency: \nexpected at least 1 bean which qualifies as autowire candidate for this dependency. \nDependency annotations: \n{@org.springframework.beans.factory.annotation.Autowired(required=true)}\n```\n\n要解决这个问题，需要声明一个 `required` 类型的 Bean：\n\n```java\npublic class FooService {\n    @Autowired(required = false)\n    private FooDAO dataAccessor; \n}\n```\n\n### 二.自动装配消岐\n\n默认情况下，Spring 按类型解析 `@Autowired` 依赖。如果容器中存在多个相同类型的 Bean，框架将抛出异常。\n\n要解决这一冲突，需要明确告诉 Spring 要注入哪个 Bean。\n\n#### 1.使用 @Qualifier 进行自动装配\n\n```java\n@Component(\"fooFormatter\")\npublic class FooFormatter implements Formatter {\n    public String format() {\n        return \"foo\";\n    }\n}\n@Component(\"barFormatter\")\npublic class BarFormatter implements Formatter {\n    public String format() {\n        return \"bar\";\n    }\n}\n```\n\n此时由于有两种类型的bean对象，Spring会抛出`NoUniqueBeanDefinitionException` 异常，此时使用@Qualifier注解缩小实现范围来避免这种情况。有多个相同类型的bean，最好使用@Qualifier注解。\n\n```java\npublic class FooService {\n    @Autowired\n    @Qualifier(\"fooFormatter\")\n    private Formatter formatter;\n}\n```\n\n#### 2.根据 Bean 名称装配\n\nSpring 使用 Bean 的名称作为默认 Qualifier value。它会检查容器，并查找与要自动装配的属性名称完全相同的 Bean 来进行装配。\n\n因此，在如下示例中，Spring 将 `fooFormatter` 属性名与 `FooFormatter` 实现相匹配。因此，在构建 `FooService` 时，它会注入该特定实现：\n\n```java\npublic class FooService {\n @Qualifier \n private Formatter fooFormatter; \n}\n```\n\n\n\n## @Resource\n\n@Resource注解默认通过byName方式注入，如果没有匹配则通过byType注入。**byName就是变量名去匹配bean的id属性，而byType则是变量类型去匹配bean的class属性**。\n\n```java\n// 1. 默认方式：byName\n@Resource  \nprivate UserService userDao; \n\n// 2. 指定byName\n@Resource(name=\"userService\")  \nprivate UserService userService; \n\n// 3. 指定byType\n@Resource(type=UserService.class)  \nprivate UserService userService; \n\n// 4. 指定byName和byType\n@Resource(name=\"userService\",type=UserService.class)  \nprivate UserService userService; \n\n```\n\n1. 既没指定name属性，也没指定type属性：默认通过byName方式注入，如果byName匹配失败，则使用byType方式注入（也就是上面的那个例子）\n2. 指定name属性：通过byName方式注入，把变量名和IOC容器中的id去匹配，匹配失败则报错\n3. 指定type属性：通过byType方式注入，在IOC容器中匹配对应的类型，如果匹配不到或者匹配到多个则报错\n4. 同时指定name属性和type属性：在IOC容器中匹配，名字和类型同时匹配则成功，否则失败\n   \n","slug":"Springboot及其它第三方框架注解","published":1,"updated":"2024-04-24T08:07:53.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj994b000ra4ueghupevnu","content":"<h2 id=\"JsonFormat\"><a href=\"#JsonFormat\" class=\"headerlink\" title=\"@JsonFormat\"></a>@JsonFormat</h2><p>从mongo里面读出来的时间类型，在实体类里面用Date接收，然后将bean传给前端的时候json中是Sun Apr 28 16:02:56 CST 2019这么显示的，但是前端要的是2019-4-28 16:02:56这样子的显示格式，而且mongo中的时间类型的时区转换到实体类里面还不一样。</p>\n<p>主要就是解决实体类和json之间互相转换的时候时间类型格式和时区不一致的问题，当然也可以用在枚举中和集合里面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Param</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat(shape = JsonFormat.Shape.STRING , pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;Asia/Shanghai&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Date <span class=\"title function_\">getDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDate</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.date = date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DateTimeFormat\"><a href=\"#DateTimeFormat\" class=\"headerlink\" title=\"@DateTimeFormat\"></a>@DateTimeFormat</h2><p>与@JsonFormat类似，也是对时间格式进行规范的。主要处理前端时间类型与后端pojo对象中的成员变量进行数据绑定，所约束的时间格式并不会影响后端返回前端的时间类型数据格式。</p>\n<h2 id=\"Autowired\"><a href=\"#Autowired\" class=\"headerlink\" title=\"@Autowired\"></a>@Autowired</h2><p>启用注解注入后，可以在属性、Setter 和构造器上使用自动装配。</p>\n<h3 id=\"一-Autowired使用\"><a href=\"#一-Autowired使用\" class=\"headerlink\" title=\"一.@Autowired使用\"></a>一.@Autowired使用</h3><h4 id=\"1-在属性上使用-Autowired\"><a href=\"#1-在属性上使用-Autowired\" class=\"headerlink\" title=\"1.在属性上使用 @Autowired\"></a>1.在属性上使用 @Autowired</h4><p>使用 <code>@Autowired</code> 对属性进行注解。这样就不需要使用 Getter 和 Setter 了。</p>\n<h4 id=\"2-在-Setter-方法上使用-Autowired\"><a href=\"#2-在-Setter-方法上使用-Autowired\" class=\"headerlink\" title=\"2.在 Setter 方法上使用 @Autowired\"></a>2.在 Setter 方法上使用 @Autowired</h4><h4 id=\"3-在构造函数上使用-Autowired\"><a href=\"#3-在构造函数上使用-Autowired\" class=\"headerlink\" title=\"3.在构造函数上使用 @Autowired\"></a>3.在构造函数上使用 @Autowired</h4><h4 id=\"4-Autowired-和可选依赖\"><a href=\"#4-Autowired-和可选依赖\" class=\"headerlink\" title=\"4.@Autowired 和可选依赖\"></a>4.@Autowired 和可选依赖</h4><p>在构建 Bean 时，<code>@Autowired</code> 依赖应该可用。否则，如果 Spring 无法解析用于装配的 Bean，它就会阻止 Spring 容器成功启动，并抛出 <code>NoSuchBeanDefinitionException</code> 异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: </span><br><span class=\"line\">No qualifying bean of type [com.autowire.sample.FooDAO] found <span class=\"keyword\">for</span> dependency: </span><br><span class=\"line\">expected at least <span class=\"number\">1</span> bean which qualifies as autowire candidate <span class=\"keyword\">for</span> <span class=\"built_in\">this</span> dependency. </span><br><span class=\"line\">Dependency annotations: </span><br><span class=\"line\">&#123;<span class=\"meta\">@org</span>.springframework.beans.factory.annotation.Autowired(required=<span class=\"literal\">true</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要解决这个问题，需要声明一个 <code>required</code> 类型的 Bean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FooService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FooDAO dataAccessor; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二-自动装配消岐\"><a href=\"#二-自动装配消岐\" class=\"headerlink\" title=\"二.自动装配消岐\"></a>二.自动装配消岐</h3><p>默认情况下，Spring 按类型解析 <code>@Autowired</code> 依赖。如果容器中存在多个相同类型的 Bean，框架将抛出异常。</p>\n<p>要解决这一冲突，需要明确告诉 Spring 要注入哪个 Bean。</p>\n<h4 id=\"1-使用-Qualifier-进行自动装配\"><a href=\"#1-使用-Qualifier-进行自动装配\" class=\"headerlink\" title=\"1.使用 @Qualifier 进行自动装配\"></a>1.使用 @Qualifier 进行自动装配</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;fooFormatter&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FooFormatter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Formatter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">format</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;barFormatter&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BarFormatter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Formatter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">format</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;bar&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时由于有两种类型的bean对象，Spring会抛出<code>NoUniqueBeanDefinitionException</code> 异常，此时使用@Qualifier注解缩小实现范围来避免这种情况。有多个相同类型的bean，最好使用@Qualifier注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FooService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(&quot;fooFormatter&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Formatter formatter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-根据-Bean-名称装配\"><a href=\"#2-根据-Bean-名称装配\" class=\"headerlink\" title=\"2.根据 Bean 名称装配\"></a>2.根据 Bean 名称装配</h4><p>Spring 使用 Bean 的名称作为默认 Qualifier value。它会检查容器，并查找与要自动装配的属性名称完全相同的 Bean 来进行装配。</p>\n<p>因此，在如下示例中，Spring 将 <code>fooFormatter</code> 属性名与 <code>FooFormatter</code> 实现相匹配。因此，在构建 <code>FooService</code> 时，它会注入该特定实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FooService</span> &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Qualifier</span> </span><br><span class=\"line\"> <span class=\"keyword\">private</span> Formatter fooFormatter; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"@Resource\"></a>@Resource</h2><p>@Resource注解默认通过byName方式注入，如果没有匹配则通过byType注入。<strong>byName就是变量名去匹配bean的id属性，而byType则是变量类型去匹配bean的class属性</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 默认方式：byName</span></span><br><span class=\"line\"><span class=\"meta\">@Resource</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userDao; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 指定byName</span></span><br><span class=\"line\"><span class=\"meta\">@Resource(name=&quot;userService&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 指定byType</span></span><br><span class=\"line\"><span class=\"meta\">@Resource(type=UserService.class)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 指定byName和byType</span></span><br><span class=\"line\"><span class=\"meta\">@Resource(name=&quot;userService&quot;,type=UserService.class)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>既没指定name属性，也没指定type属性：默认通过byName方式注入，如果byName匹配失败，则使用byType方式注入（也就是上面的那个例子）</li>\n<li>指定name属性：通过byName方式注入，把变量名和IOC容器中的id去匹配，匹配失败则报错</li>\n<li>指定type属性：通过byType方式注入，在IOC容器中匹配对应的类型，如果匹配不到或者匹配到多个则报错</li>\n<li>同时指定name属性和type属性：在IOC容器中匹配，名字和类型同时匹配则成功，否则失败</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JsonFormat\"><a href=\"#JsonFormat\" class=\"headerlink\" title=\"@JsonFormat\"></a>@JsonFormat</h2><p>从mongo里面读出来的时间类型，在实体类里面用Date接收，然后将bean传给前端的时候json中是Sun Apr 28 16:02:56 CST 2019这么显示的，但是前端要的是2019-4-28 16:02:56这样子的显示格式，而且mongo中的时间类型的时区转换到实体类里面还不一样。</p>\n<p>主要就是解决实体类和json之间互相转换的时候时间类型格式和时区不一致的问题，当然也可以用在枚举中和集合里面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Param</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat(shape = JsonFormat.Shape.STRING , pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;Asia/Shanghai&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Date <span class=\"title function_\">getDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDate</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.date = date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DateTimeFormat\"><a href=\"#DateTimeFormat\" class=\"headerlink\" title=\"@DateTimeFormat\"></a>@DateTimeFormat</h2><p>与@JsonFormat类似，也是对时间格式进行规范的。主要处理前端时间类型与后端pojo对象中的成员变量进行数据绑定，所约束的时间格式并不会影响后端返回前端的时间类型数据格式。</p>\n<h2 id=\"Autowired\"><a href=\"#Autowired\" class=\"headerlink\" title=\"@Autowired\"></a>@Autowired</h2><p>启用注解注入后，可以在属性、Setter 和构造器上使用自动装配。</p>\n<h3 id=\"一-Autowired使用\"><a href=\"#一-Autowired使用\" class=\"headerlink\" title=\"一.@Autowired使用\"></a>一.@Autowired使用</h3><h4 id=\"1-在属性上使用-Autowired\"><a href=\"#1-在属性上使用-Autowired\" class=\"headerlink\" title=\"1.在属性上使用 @Autowired\"></a>1.在属性上使用 @Autowired</h4><p>使用 <code>@Autowired</code> 对属性进行注解。这样就不需要使用 Getter 和 Setter 了。</p>\n<h4 id=\"2-在-Setter-方法上使用-Autowired\"><a href=\"#2-在-Setter-方法上使用-Autowired\" class=\"headerlink\" title=\"2.在 Setter 方法上使用 @Autowired\"></a>2.在 Setter 方法上使用 @Autowired</h4><h4 id=\"3-在构造函数上使用-Autowired\"><a href=\"#3-在构造函数上使用-Autowired\" class=\"headerlink\" title=\"3.在构造函数上使用 @Autowired\"></a>3.在构造函数上使用 @Autowired</h4><h4 id=\"4-Autowired-和可选依赖\"><a href=\"#4-Autowired-和可选依赖\" class=\"headerlink\" title=\"4.@Autowired 和可选依赖\"></a>4.@Autowired 和可选依赖</h4><p>在构建 Bean 时，<code>@Autowired</code> 依赖应该可用。否则，如果 Spring 无法解析用于装配的 Bean，它就会阻止 Spring 容器成功启动，并抛出 <code>NoSuchBeanDefinitionException</code> 异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: </span><br><span class=\"line\">No qualifying bean of type [com.autowire.sample.FooDAO] found <span class=\"keyword\">for</span> dependency: </span><br><span class=\"line\">expected at least <span class=\"number\">1</span> bean which qualifies as autowire candidate <span class=\"keyword\">for</span> <span class=\"built_in\">this</span> dependency. </span><br><span class=\"line\">Dependency annotations: </span><br><span class=\"line\">&#123;<span class=\"meta\">@org</span>.springframework.beans.factory.annotation.Autowired(required=<span class=\"literal\">true</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要解决这个问题，需要声明一个 <code>required</code> 类型的 Bean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FooService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FooDAO dataAccessor; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二-自动装配消岐\"><a href=\"#二-自动装配消岐\" class=\"headerlink\" title=\"二.自动装配消岐\"></a>二.自动装配消岐</h3><p>默认情况下，Spring 按类型解析 <code>@Autowired</code> 依赖。如果容器中存在多个相同类型的 Bean，框架将抛出异常。</p>\n<p>要解决这一冲突，需要明确告诉 Spring 要注入哪个 Bean。</p>\n<h4 id=\"1-使用-Qualifier-进行自动装配\"><a href=\"#1-使用-Qualifier-进行自动装配\" class=\"headerlink\" title=\"1.使用 @Qualifier 进行自动装配\"></a>1.使用 @Qualifier 进行自动装配</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;fooFormatter&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FooFormatter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Formatter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">format</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;barFormatter&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BarFormatter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Formatter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">format</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;bar&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时由于有两种类型的bean对象，Spring会抛出<code>NoUniqueBeanDefinitionException</code> 异常，此时使用@Qualifier注解缩小实现范围来避免这种情况。有多个相同类型的bean，最好使用@Qualifier注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FooService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(&quot;fooFormatter&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Formatter formatter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-根据-Bean-名称装配\"><a href=\"#2-根据-Bean-名称装配\" class=\"headerlink\" title=\"2.根据 Bean 名称装配\"></a>2.根据 Bean 名称装配</h4><p>Spring 使用 Bean 的名称作为默认 Qualifier value。它会检查容器，并查找与要自动装配的属性名称完全相同的 Bean 来进行装配。</p>\n<p>因此，在如下示例中，Spring 将 <code>fooFormatter</code> 属性名与 <code>FooFormatter</code> 实现相匹配。因此，在构建 <code>FooService</code> 时，它会注入该特定实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FooService</span> &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Qualifier</span> </span><br><span class=\"line\"> <span class=\"keyword\">private</span> Formatter fooFormatter; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"@Resource\"></a>@Resource</h2><p>@Resource注解默认通过byName方式注入，如果没有匹配则通过byType注入。<strong>byName就是变量名去匹配bean的id属性，而byType则是变量类型去匹配bean的class属性</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 默认方式：byName</span></span><br><span class=\"line\"><span class=\"meta\">@Resource</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userDao; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 指定byName</span></span><br><span class=\"line\"><span class=\"meta\">@Resource(name=&quot;userService&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 指定byType</span></span><br><span class=\"line\"><span class=\"meta\">@Resource(type=UserService.class)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 指定byName和byType</span></span><br><span class=\"line\"><span class=\"meta\">@Resource(name=&quot;userService&quot;,type=UserService.class)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>既没指定name属性，也没指定type属性：默认通过byName方式注入，如果byName匹配失败，则使用byType方式注入（也就是上面的那个例子）</li>\n<li>指定name属性：通过byName方式注入，把变量名和IOC容器中的id去匹配，匹配失败则报错</li>\n<li>指定type属性：通过byType方式注入，在IOC容器中匹配对应的类型，如果匹配不到或者匹配到多个则报错</li>\n<li>同时指定name属性和type属性：在IOC容器中匹配，名字和类型同时匹配则成功，否则失败</li>\n</ol>\n"},{"title":"jar中没有主清单属性","date":"2023-12-12T03:30:03.000Z","_content":"\n问题：cmd窗口，运行jar包时，出现如下报错\n\n![jar中没有主清单属性](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/jar%E4%B8%AD%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B8%85%E5%8D%95%E5%B1%9E%E6%80%A7.png)\n\n\n\n解决方法：\n\n```\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n```\n\nrepackage：多打了源码Jar包，并将其他代码和环境加入原来jar包（其中加入了主启动类信息，解决了此次报错）\n","source":"_posts/jar中没有主清单属性.md","raw":"---\ntitle: jar中没有主清单属性\ndate: 2023-12-12 11:30:03\ntags: [bug, JAVA, maven]\ncategories:\n- [技术, JAVA, 实践]\n---\n\n问题：cmd窗口，运行jar包时，出现如下报错\n\n![jar中没有主清单属性](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/jar%E4%B8%AD%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B8%85%E5%8D%95%E5%B1%9E%E6%80%A7.png)\n\n\n\n解决方法：\n\n```\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n```\n\nrepackage：多打了源码Jar包，并将其他代码和环境加入原来jar包（其中加入了主启动类信息，解决了此次报错）\n","slug":"jar中没有主清单属性","published":1,"updated":"2024-04-24T07:34:25.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj994m0013a4ue8y3k4qx0","content":"<p>问题：cmd窗口，运行jar包时，出现如下报错</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/jar%E4%B8%AD%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B8%85%E5%8D%95%E5%B1%9E%E6%80%A7.png\" alt=\"jar中没有主清单属性\"></p>\n<p>解决方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n\n<p>repackage：多打了源码Jar包，并将其他代码和环境加入原来jar包（其中加入了主启动类信息，解决了此次报错）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：cmd窗口，运行jar包时，出现如下报错</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/jar%E4%B8%AD%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B8%85%E5%8D%95%E5%B1%9E%E6%80%A7.png\" alt=\"jar中没有主清单属性\"></p>\n<p>解决方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n\n<p>repackage：多打了源码Jar包，并将其他代码和环境加入原来jar包（其中加入了主启动类信息，解决了此次报错）</p>\n"},{"title":"一年中的第几天","date":"2021-01-28T03:33:10.000Z","_content":"\n![一年中的第几天](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240228113219.png)\n\n```\nclass Solution {\n    public int dayOfYear(String date) {\n        int year = Integer.parseInt(date.substring(0, 4));\n        int month = Integer.parseInt(date.substring(5, 7));\n        int day = Integer.parseInt(date.substring(8, 10));\n\n        int[] amount = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if(year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)){\n            amount[1] += 1;\n        }\n\n        int temp = 0;\n        for(int i = 0; i < month-1; i ++){\n            temp += amount[i];\n        }\n\n        return temp + day;\n    }\n}\n```\n\n","source":"_posts/一年中的第几天.md","raw":"---\ntitle: 一年中的第几天\ndate: 2021-01-28 11:33:10\ntags: [算法, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n![一年中的第几天](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240228113219.png)\n\n```\nclass Solution {\n    public int dayOfYear(String date) {\n        int year = Integer.parseInt(date.substring(0, 4));\n        int month = Integer.parseInt(date.substring(5, 7));\n        int day = Integer.parseInt(date.substring(8, 10));\n\n        int[] amount = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if(year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)){\n            amount[1] += 1;\n        }\n\n        int temp = 0;\n        for(int i = 0; i < month-1; i ++){\n            temp += amount[i];\n        }\n\n        return temp + day;\n    }\n}\n```\n\n","slug":"一年中的第几天","published":1,"updated":"2024-04-24T07:34:25.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj994p0016a4uec5pr6gw9","content":"<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240228113219.png\" alt=\"一年中的第几天\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int dayOfYear(String date) &#123;</span><br><span class=\"line\">        int year = Integer.parseInt(date.substring(0, 4));</span><br><span class=\"line\">        int month = Integer.parseInt(date.substring(5, 7));</span><br><span class=\"line\">        int day = Integer.parseInt(date.substring(8, 10));</span><br><span class=\"line\"></span><br><span class=\"line\">        int[] amount = &#123;31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;</span><br><span class=\"line\">        if(year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0))&#123;</span><br><span class=\"line\">            amount[1] += 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int temp = 0;</span><br><span class=\"line\">        for(int i = 0; i &lt; month-1; i ++)&#123;</span><br><span class=\"line\">            temp += amount[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return temp + day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240228113219.png\" alt=\"一年中的第几天\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int dayOfYear(String date) &#123;</span><br><span class=\"line\">        int year = Integer.parseInt(date.substring(0, 4));</span><br><span class=\"line\">        int month = Integer.parseInt(date.substring(5, 7));</span><br><span class=\"line\">        int day = Integer.parseInt(date.substring(8, 10));</span><br><span class=\"line\"></span><br><span class=\"line\">        int[] amount = &#123;31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;</span><br><span class=\"line\">        if(year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0))&#123;</span><br><span class=\"line\">            amount[1] += 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int temp = 0;</span><br><span class=\"line\">        for(int i = 0; i &lt; month-1; i ++)&#123;</span><br><span class=\"line\">            temp += amount[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return temp + day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"线程死锁的解决方案","date":"2023-02-23T01:38:28.000Z","_content":"\n# 一.问题\n\nProcess.waitFor导致死锁\n\n# 二.产生原因\n\n使用Runtime.exec执行命令时，JAVA的线程会创建一个子进程，用于执行命令，而且子进程和JAVA线程会分别独立运行。主线程需要等待脚本进程，即子进程的返回结果和日志信息，在JAVA线程中调用Process.waitFor挂起来等待子进程完成。\n\n子进程执行时，不断的打印日志信息，我们通过Process.getInputStream和 Process.getErrorStream进行获取正常输出日志和错误日志进行处理。\n\n这个时候子进程不断的向JAVA线程写入数据，而JAVA线程调用Process.waitFor后已经阻塞挂起，而子进程在不断的向JAVA线程进行写入数据，当我们的Process.getInputStream的buffer缓冲区被写满，而JAVA线程依然挂起并未消费buffer中的数据，导致子进程无法继续向buffer缓冲区中继续写入数据，导致子进程也挂起。 \n\nJAVA线程和子进程都处于挂起的状态，JAVA线程等待子进程的结束，子进程等待JAVA线程对buffer缓冲区中的数据进行消费。两者在相互等待导致死锁。\n\n综上：由于缓存区的日志信息无法消费，导致线程相互等待，从而发生死锁\n\n# 三.解决方案\n\n创建线程池，每次使用一个线程处理缓存区的日志\n\n``\n\n```text\nprivate static ThreadPoolExecutor executor;\n \nstatic {\n    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n            .setNameFormat(\"cmd-pool-%d\").build();\n    //根据实际情况创建线程池\n    executor = new ThreadPoolExecutor(6, 10, 5,\n            TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(1024),\n            namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n}\n \n/**\n * 流处理\n * @param stream\n */\nprivate static void clearStream(InputStream stream) {\n    //处理buffer的线程\n    executor.execute(new Runnable() {\n        @Override\n        public void run() {\n \n            String line = null;\n \n            try (BufferedReader in = new BufferedReader(new InputStreamReader(stream));) {\n                while ((line = in.readLine()) != null) {\n                    LoggerUtils.debug(CmdExecUtils.class,line);\n                }\n            } catch (IOException e) {\n                LoggerUtils.error(CmdExecUtils.class,\"exec error : {}\", e);\n            }\n        }\n    });\n}\n \npublic static boolean execCommond(String... args) {\n    boolean flg = true;\n    Runtime run = Runtime.getRuntime();\n    try {\n        Process p;\n        if (args != null && args.length == 1) {\n            p = run.exec(args[0]);\n        } else {\n            p = run.exec(args);\n        }\n \n        InputStream stream=p.getInputStream();\n        LoggerUtils.info(CmdExecUtils.class, stream + \"....getInputStream..\");\n \n        //消费正常日志\n        clearStream(stream);\n        //消费错误日志\n        clearStream(p.getErrorStream());\n \n        if (p.waitFor() != 0) {\n            if (p.exitValue() == 1) {\n                LoggerUtils.info(CmdExecUtils.class,\"=============exec=====================命令执行失败!\");\n                flg = false;\n            }\n        }\n \n    } catch (Exception e) {\n        e.printStackTrace();\n        flg = false;\n    }\n    return flg;\n}\n```\n\n# 四.死锁如何避免\n\n1.死锁造成的条件\n\n1）一个资源只能被一个线程使用\n\n2）一个线程在阻塞等待某个资源，不释放占有资源\n\n3）一个线程已经获得的资源，在未使用之前，不能强行进行剥夺\n\n4）线程头尾形成循环等待资源关系\n\n只要不满足其中一个条件，就不会发生死锁\n\n2.在开发过程中，要注意：\n\n1）注意加锁顺序，保证每个线程按照同样的顺序加锁\n\n2）注意加锁时间，对锁设置超时时间\n\n3）检查死锁，预防机制，确保第一时间解决\n\n\n\n# 五.线程池的实现原理\n\n提交一个任务到线程池中，线程池的处理流程如下： \n\n![线程池的处理流程](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpeg)\n\n1）判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。 \n\n2）线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。 \n\n3）判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。\n\n\n\n# 六.线程池的使用\n\n## 1.线程池的创建\n\n查看源码，线程池有七个参数\n\n![线程池参数](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0.png)\n\n### 1）corePoolSize \n\n线程池核心线程大小\n\n线程池中会维护一个最小的线程数量，即使这些线程处理空闲状态，他们也不会被销毁，除非设置了allowCoreThreadTimeOut。这里的最小线程数量即是corePoolSize。任务提交到线程池后，首先会检查当前线程数是否达到了corePoolSize，如果没有达到的话，则会创建一个新线程来处理这个任务。\n\n### 2）maximumPoolSize \n\n线程池最大线程数量\n\n当前线程数达到corePoolSize后，如果继续有任务被提交到线程池，会将任务缓存到工作队列（后面会介绍）中。如果队列也已满，则会去创建一个新线程来出来这个处理。线程池不会无限制的去创建新线程，它会有一个最大线程数量的限制，这个数量即由maximunPoolSize指定。\n\n### 3）keepAliveTime \n\n空闲线程存活时间\n\n一个线程如果处于空闲状态，并且当前的线程数量大于corePoolSize，那么在指定时间后，这个空闲线程会被销毁，这里的指定时间由keepAliveTime来设定\n\n### 4）unit \n\n空闲线程存活时间单位\n\nkeepAliveTime的计量单位\n\n### 5）workQueue \n\n工作队列\n\n新任务被提交后，会先进入到此工作队列中，任务调度时再从队列中取出任务。jdk中提供了四种工作队列：\n\n#### ①ArrayBlockingQueue\n\n基于数组的有界阻塞队列，按FIFO排序。新任务进来后，会放到该队列的队尾，有界的数组可以防止资源耗尽问题。当线程池中线程数量达到corePoolSize后，再有新任务进来，则会将任务放入该队列的队尾，等待被调度。如果队列已经是满的，则创建一个新线程，如果线程数量已经达到maxPoolSize，则会执行拒绝策略。\n\n#### ②LinkedBlockingQuene\n\n基于链表的无界阻塞队列（其实最大容量为Interger.MAX），按照FIFO排序。由于该队列的近似无界性，当线程池中线程数量达到corePoolSize后，再有新任务进来，会一直存入该队列，而基本不会去创建新线程直到maxPoolSize（很难达到Interger.MAX这个数），因此使用该工作队列时，参数maxPoolSize其实是不起作用的。\n\n#### ③SynchronousQuene\n\n一个不缓存任务的阻塞队列，生产者放入一个任务必须等到消费者取出这个任务。也就是说新任务进来时，不会缓存，而是直接被调度执行该任务，如果没有可用线程，则创建新线程，如果线程数量达到maxPoolSize，则执行拒绝策略。\n\n#### ④PriorityBlockingQueue\n\n具有优先级的无界阻塞队列，优先级通过参数Comparator实现。\n\n### 6）threadFactory \n\n线程工厂\n\n创建一个新线程时使用的工厂，可以用来设定线程名、是否为daemon线程等等\n\n### 7）handler \n\n拒绝策略\n\n当工作队列中的任务已到达最大限制，并且线程池中的线程数量也达到最大限制，这时如果有新任务提交进来，该如何处理呢。这里的拒绝策略，就是解决这个问题的，jdk中提供了4中拒绝策略：\n\n#### ①CallerRunsPolicy\n\n该策略下，在调用者线程中直接执行被拒绝任务的run方法，除非线程池已经shutdown，则直接抛弃任务。\n\n#### ②AbortPolicy\n\n该策略下，直接丢弃任务，并抛出RejectedExecutionException异常。\n\n#### ③DiscardPolicy\n\n该策略下，直接丢弃任务，什么都不做。\n\n#### ④DiscardOldestPolicy\n\n该策略下，抛弃进入队列最早的那个任务，然后尝试把这次拒绝的任务放入队列\n\n## 2.向线程池提交任务\n\n可以使用两个方法向线程池提交任务，分别为execute()和submit()方法。\n\nexecute()方法用于提交不需要返回值的任务，所以无法判断任务被线程池执行成功。\n\nsubmit方法用于提交需要返回值的任务。线程池会返回一个Future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用get(long timeout, TimeUnit unit)方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完成。\n\n## 3、关闭线程池\n\n可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。\n\n它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以**无法响应中断的任务可能永远无法终止**。但是它们存在一定的区别，shutdownNow首先将线程池状态设置成STOP，然后尝试停止所有的正在执行或暂停任务线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。\n\n只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于应该调用哪种方法来关闭线程池，应该由线程池的任务特性决定，通常调用shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法（通俗的理解，shutdownNow是强制关闭，返回为未执行任务列表；而shutdown会等待当前任务执行完毕才真正关闭）。\n\n## 4、合理地配置线程池\n\n要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析。\n\n- 任务的性质：CPU密集型任务、IO密集型任务和混合型任务。\n- 任务的优先级：高、中和低。\n- 任务的执行时间：长、中和短。\n- 任务的依赖性：是否依赖其他系统资源，如数据库连接。\n\n性质不同的任务可以用不同规模的线程池分开处理。CPU密集性任务应配置尽可能小的线程，如配置N(cpu) + 1个线程的线程池。由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如2 × N(cpu)。混合型任务，如果可以拆分，将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。如果这两个任务执行时间相差不是很大，则没必要进行分解。可以通过Runtime.getRuntime().availableProcessors()方法获取当前设备的CPU个数。\n\n优先级不同的任务可以使用优先级队列PriorityBlockingQueue来处理。他可以让优先级高的任务先执行。\n\n执行时间不同的任务可以交给不同规模的线程池来处理，或者可以使用优先级队列，让执行时间短的任务先执行。\n\n依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，等待的时间越长，则CPU空闲的时间就越长，那么线程数应该设置得越大，这样才能更好地利用CPU。\n\n**建议使用有界队列**。有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。\n\n## 5、线程池的监控\n\n如果在系统中大量使用线程池，则有必要对线程池进行监控，方便在出现问题时，可以根据线程池的使用状况快速定位问题。可以通过线程池提供的参数进行监控，在监控线程池的时候可以使用以下属性。\n\n- taskCount：线程池需要执行的任务数量。\n- completedTaskCount：线程池在运行过程中已完成的任务数量，小于或等于taskCount。\n- largestPoolSize：线程池曾经创建过的最大线程数量。通过这个数据可以知道线程是否曾经满过。如该数值等于线程池的最大大小，则表示线程池曾经满过。\n- getPoolSize：线程池的线程数量。如果线程池不销毁的话，线程池里的线程不会自动销毁，所以这个值只增不减。\n- getActiveCount：获取活动的线程数。\n\n通过扩展线程池进行监控。可以通过继承线程池来自定义线程池，重写线程池的beforeExecute、afterExecute和terminated方法，也可以在任务执行前、执行后和线程池关闭前执行一些代码来进行监控。例如，监控任务的平均执行时间、最大执行时间和最小执行时间等。这几个方法在线程池里都是空方法。\n","source":"_posts/线程死锁的解决方案.md","raw":"---\ntitle: 线程死锁的解决方案\ndate: 2023-02-23 09:38:28\ntags: [多线程, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n# 一.问题\n\nProcess.waitFor导致死锁\n\n# 二.产生原因\n\n使用Runtime.exec执行命令时，JAVA的线程会创建一个子进程，用于执行命令，而且子进程和JAVA线程会分别独立运行。主线程需要等待脚本进程，即子进程的返回结果和日志信息，在JAVA线程中调用Process.waitFor挂起来等待子进程完成。\n\n子进程执行时，不断的打印日志信息，我们通过Process.getInputStream和 Process.getErrorStream进行获取正常输出日志和错误日志进行处理。\n\n这个时候子进程不断的向JAVA线程写入数据，而JAVA线程调用Process.waitFor后已经阻塞挂起，而子进程在不断的向JAVA线程进行写入数据，当我们的Process.getInputStream的buffer缓冲区被写满，而JAVA线程依然挂起并未消费buffer中的数据，导致子进程无法继续向buffer缓冲区中继续写入数据，导致子进程也挂起。 \n\nJAVA线程和子进程都处于挂起的状态，JAVA线程等待子进程的结束，子进程等待JAVA线程对buffer缓冲区中的数据进行消费。两者在相互等待导致死锁。\n\n综上：由于缓存区的日志信息无法消费，导致线程相互等待，从而发生死锁\n\n# 三.解决方案\n\n创建线程池，每次使用一个线程处理缓存区的日志\n\n``\n\n```text\nprivate static ThreadPoolExecutor executor;\n \nstatic {\n    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n            .setNameFormat(\"cmd-pool-%d\").build();\n    //根据实际情况创建线程池\n    executor = new ThreadPoolExecutor(6, 10, 5,\n            TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(1024),\n            namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n}\n \n/**\n * 流处理\n * @param stream\n */\nprivate static void clearStream(InputStream stream) {\n    //处理buffer的线程\n    executor.execute(new Runnable() {\n        @Override\n        public void run() {\n \n            String line = null;\n \n            try (BufferedReader in = new BufferedReader(new InputStreamReader(stream));) {\n                while ((line = in.readLine()) != null) {\n                    LoggerUtils.debug(CmdExecUtils.class,line);\n                }\n            } catch (IOException e) {\n                LoggerUtils.error(CmdExecUtils.class,\"exec error : {}\", e);\n            }\n        }\n    });\n}\n \npublic static boolean execCommond(String... args) {\n    boolean flg = true;\n    Runtime run = Runtime.getRuntime();\n    try {\n        Process p;\n        if (args != null && args.length == 1) {\n            p = run.exec(args[0]);\n        } else {\n            p = run.exec(args);\n        }\n \n        InputStream stream=p.getInputStream();\n        LoggerUtils.info(CmdExecUtils.class, stream + \"....getInputStream..\");\n \n        //消费正常日志\n        clearStream(stream);\n        //消费错误日志\n        clearStream(p.getErrorStream());\n \n        if (p.waitFor() != 0) {\n            if (p.exitValue() == 1) {\n                LoggerUtils.info(CmdExecUtils.class,\"=============exec=====================命令执行失败!\");\n                flg = false;\n            }\n        }\n \n    } catch (Exception e) {\n        e.printStackTrace();\n        flg = false;\n    }\n    return flg;\n}\n```\n\n# 四.死锁如何避免\n\n1.死锁造成的条件\n\n1）一个资源只能被一个线程使用\n\n2）一个线程在阻塞等待某个资源，不释放占有资源\n\n3）一个线程已经获得的资源，在未使用之前，不能强行进行剥夺\n\n4）线程头尾形成循环等待资源关系\n\n只要不满足其中一个条件，就不会发生死锁\n\n2.在开发过程中，要注意：\n\n1）注意加锁顺序，保证每个线程按照同样的顺序加锁\n\n2）注意加锁时间，对锁设置超时时间\n\n3）检查死锁，预防机制，确保第一时间解决\n\n\n\n# 五.线程池的实现原理\n\n提交一个任务到线程池中，线程池的处理流程如下： \n\n![线程池的处理流程](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpeg)\n\n1）判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。 \n\n2）线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。 \n\n3）判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。\n\n\n\n# 六.线程池的使用\n\n## 1.线程池的创建\n\n查看源码，线程池有七个参数\n\n![线程池参数](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0.png)\n\n### 1）corePoolSize \n\n线程池核心线程大小\n\n线程池中会维护一个最小的线程数量，即使这些线程处理空闲状态，他们也不会被销毁，除非设置了allowCoreThreadTimeOut。这里的最小线程数量即是corePoolSize。任务提交到线程池后，首先会检查当前线程数是否达到了corePoolSize，如果没有达到的话，则会创建一个新线程来处理这个任务。\n\n### 2）maximumPoolSize \n\n线程池最大线程数量\n\n当前线程数达到corePoolSize后，如果继续有任务被提交到线程池，会将任务缓存到工作队列（后面会介绍）中。如果队列也已满，则会去创建一个新线程来出来这个处理。线程池不会无限制的去创建新线程，它会有一个最大线程数量的限制，这个数量即由maximunPoolSize指定。\n\n### 3）keepAliveTime \n\n空闲线程存活时间\n\n一个线程如果处于空闲状态，并且当前的线程数量大于corePoolSize，那么在指定时间后，这个空闲线程会被销毁，这里的指定时间由keepAliveTime来设定\n\n### 4）unit \n\n空闲线程存活时间单位\n\nkeepAliveTime的计量单位\n\n### 5）workQueue \n\n工作队列\n\n新任务被提交后，会先进入到此工作队列中，任务调度时再从队列中取出任务。jdk中提供了四种工作队列：\n\n#### ①ArrayBlockingQueue\n\n基于数组的有界阻塞队列，按FIFO排序。新任务进来后，会放到该队列的队尾，有界的数组可以防止资源耗尽问题。当线程池中线程数量达到corePoolSize后，再有新任务进来，则会将任务放入该队列的队尾，等待被调度。如果队列已经是满的，则创建一个新线程，如果线程数量已经达到maxPoolSize，则会执行拒绝策略。\n\n#### ②LinkedBlockingQuene\n\n基于链表的无界阻塞队列（其实最大容量为Interger.MAX），按照FIFO排序。由于该队列的近似无界性，当线程池中线程数量达到corePoolSize后，再有新任务进来，会一直存入该队列，而基本不会去创建新线程直到maxPoolSize（很难达到Interger.MAX这个数），因此使用该工作队列时，参数maxPoolSize其实是不起作用的。\n\n#### ③SynchronousQuene\n\n一个不缓存任务的阻塞队列，生产者放入一个任务必须等到消费者取出这个任务。也就是说新任务进来时，不会缓存，而是直接被调度执行该任务，如果没有可用线程，则创建新线程，如果线程数量达到maxPoolSize，则执行拒绝策略。\n\n#### ④PriorityBlockingQueue\n\n具有优先级的无界阻塞队列，优先级通过参数Comparator实现。\n\n### 6）threadFactory \n\n线程工厂\n\n创建一个新线程时使用的工厂，可以用来设定线程名、是否为daemon线程等等\n\n### 7）handler \n\n拒绝策略\n\n当工作队列中的任务已到达最大限制，并且线程池中的线程数量也达到最大限制，这时如果有新任务提交进来，该如何处理呢。这里的拒绝策略，就是解决这个问题的，jdk中提供了4中拒绝策略：\n\n#### ①CallerRunsPolicy\n\n该策略下，在调用者线程中直接执行被拒绝任务的run方法，除非线程池已经shutdown，则直接抛弃任务。\n\n#### ②AbortPolicy\n\n该策略下，直接丢弃任务，并抛出RejectedExecutionException异常。\n\n#### ③DiscardPolicy\n\n该策略下，直接丢弃任务，什么都不做。\n\n#### ④DiscardOldestPolicy\n\n该策略下，抛弃进入队列最早的那个任务，然后尝试把这次拒绝的任务放入队列\n\n## 2.向线程池提交任务\n\n可以使用两个方法向线程池提交任务，分别为execute()和submit()方法。\n\nexecute()方法用于提交不需要返回值的任务，所以无法判断任务被线程池执行成功。\n\nsubmit方法用于提交需要返回值的任务。线程池会返回一个Future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用get(long timeout, TimeUnit unit)方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完成。\n\n## 3、关闭线程池\n\n可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。\n\n它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以**无法响应中断的任务可能永远无法终止**。但是它们存在一定的区别，shutdownNow首先将线程池状态设置成STOP，然后尝试停止所有的正在执行或暂停任务线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。\n\n只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于应该调用哪种方法来关闭线程池，应该由线程池的任务特性决定，通常调用shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法（通俗的理解，shutdownNow是强制关闭，返回为未执行任务列表；而shutdown会等待当前任务执行完毕才真正关闭）。\n\n## 4、合理地配置线程池\n\n要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析。\n\n- 任务的性质：CPU密集型任务、IO密集型任务和混合型任务。\n- 任务的优先级：高、中和低。\n- 任务的执行时间：长、中和短。\n- 任务的依赖性：是否依赖其他系统资源，如数据库连接。\n\n性质不同的任务可以用不同规模的线程池分开处理。CPU密集性任务应配置尽可能小的线程，如配置N(cpu) + 1个线程的线程池。由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如2 × N(cpu)。混合型任务，如果可以拆分，将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。如果这两个任务执行时间相差不是很大，则没必要进行分解。可以通过Runtime.getRuntime().availableProcessors()方法获取当前设备的CPU个数。\n\n优先级不同的任务可以使用优先级队列PriorityBlockingQueue来处理。他可以让优先级高的任务先执行。\n\n执行时间不同的任务可以交给不同规模的线程池来处理，或者可以使用优先级队列，让执行时间短的任务先执行。\n\n依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，等待的时间越长，则CPU空闲的时间就越长，那么线程数应该设置得越大，这样才能更好地利用CPU。\n\n**建议使用有界队列**。有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。\n\n## 5、线程池的监控\n\n如果在系统中大量使用线程池，则有必要对线程池进行监控，方便在出现问题时，可以根据线程池的使用状况快速定位问题。可以通过线程池提供的参数进行监控，在监控线程池的时候可以使用以下属性。\n\n- taskCount：线程池需要执行的任务数量。\n- completedTaskCount：线程池在运行过程中已完成的任务数量，小于或等于taskCount。\n- largestPoolSize：线程池曾经创建过的最大线程数量。通过这个数据可以知道线程是否曾经满过。如该数值等于线程池的最大大小，则表示线程池曾经满过。\n- getPoolSize：线程池的线程数量。如果线程池不销毁的话，线程池里的线程不会自动销毁，所以这个值只增不减。\n- getActiveCount：获取活动的线程数。\n\n通过扩展线程池进行监控。可以通过继承线程池来自定义线程池，重写线程池的beforeExecute、afterExecute和terminated方法，也可以在任务执行前、执行后和线程池关闭前执行一些代码来进行监控。例如，监控任务的平均执行时间、最大执行时间和最小执行时间等。这几个方法在线程池里都是空方法。\n","slug":"线程死锁的解决方案","published":1,"updated":"2024-04-24T07:34:25.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj994z001ta4uefoit4juy","content":"<h1 id=\"一-问题\"><a href=\"#一-问题\" class=\"headerlink\" title=\"一.问题\"></a>一.问题</h1><p>Process.waitFor导致死锁</p>\n<h1 id=\"二-产生原因\"><a href=\"#二-产生原因\" class=\"headerlink\" title=\"二.产生原因\"></a>二.产生原因</h1><p>使用Runtime.exec执行命令时，JAVA的线程会创建一个子进程，用于执行命令，而且子进程和JAVA线程会分别独立运行。主线程需要等待脚本进程，即子进程的返回结果和日志信息，在JAVA线程中调用Process.waitFor挂起来等待子进程完成。</p>\n<p>子进程执行时，不断的打印日志信息，我们通过Process.getInputStream和 Process.getErrorStream进行获取正常输出日志和错误日志进行处理。</p>\n<p>这个时候子进程不断的向JAVA线程写入数据，而JAVA线程调用Process.waitFor后已经阻塞挂起，而子进程在不断的向JAVA线程进行写入数据，当我们的Process.getInputStream的buffer缓冲区被写满，而JAVA线程依然挂起并未消费buffer中的数据，导致子进程无法继续向buffer缓冲区中继续写入数据，导致子进程也挂起。 </p>\n<p>JAVA线程和子进程都处于挂起的状态，JAVA线程等待子进程的结束，子进程等待JAVA线程对buffer缓冲区中的数据进行消费。两者在相互等待导致死锁。</p>\n<p>综上：由于缓存区的日志信息无法消费，导致线程相互等待，从而发生死锁</p>\n<h1 id=\"三-解决方案\"><a href=\"#三-解决方案\" class=\"headerlink\" title=\"三.解决方案\"></a>三.解决方案</h1><p>创建线程池，每次使用一个线程处理缓存区的日志</p>\n<p>&#96;&#96;</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static ThreadPoolExecutor executor;</span><br><span class=\"line\"> </span><br><span class=\"line\">static &#123;</span><br><span class=\"line\">    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()</span><br><span class=\"line\">            .setNameFormat(&quot;cmd-pool-%d&quot;).build();</span><br><span class=\"line\">    //根据实际情况创建线程池</span><br><span class=\"line\">    executor = new ThreadPoolExecutor(6, 10, 5,</span><br><span class=\"line\">            TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(1024),</span><br><span class=\"line\">            namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 流处理</span><br><span class=\"line\"> * @param stream</span><br><span class=\"line\"> */</span><br><span class=\"line\">private static void clearStream(InputStream stream) &#123;</span><br><span class=\"line\">    //处理buffer的线程</span><br><span class=\"line\">    executor.execute(new Runnable() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            String line = null;</span><br><span class=\"line\"> </span><br><span class=\"line\">            try (BufferedReader in = new BufferedReader(new InputStreamReader(stream));) &#123;</span><br><span class=\"line\">                while ((line = in.readLine()) != null) &#123;</span><br><span class=\"line\">                    LoggerUtils.debug(CmdExecUtils.class,line);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                LoggerUtils.error(CmdExecUtils.class,&quot;exec error : &#123;&#125;&quot;, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public static boolean execCommond(String... args) &#123;</span><br><span class=\"line\">    boolean flg = true;</span><br><span class=\"line\">    Runtime run = Runtime.getRuntime();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Process p;</span><br><span class=\"line\">        if (args != null &amp;&amp; args.length == 1) &#123;</span><br><span class=\"line\">            p = run.exec(args[0]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            p = run.exec(args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        InputStream stream=p.getInputStream();</span><br><span class=\"line\">        LoggerUtils.info(CmdExecUtils.class, stream + &quot;....getInputStream..&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        //消费正常日志</span><br><span class=\"line\">        clearStream(stream);</span><br><span class=\"line\">        //消费错误日志</span><br><span class=\"line\">        clearStream(p.getErrorStream());</span><br><span class=\"line\"> </span><br><span class=\"line\">        if (p.waitFor() != 0) &#123;</span><br><span class=\"line\">            if (p.exitValue() == 1) &#123;</span><br><span class=\"line\">                LoggerUtils.info(CmdExecUtils.class,&quot;=============exec=====================命令执行失败!&quot;);</span><br><span class=\"line\">                flg = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        flg = false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return flg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-死锁如何避免\"><a href=\"#四-死锁如何避免\" class=\"headerlink\" title=\"四.死锁如何避免\"></a>四.死锁如何避免</h1><p>1.死锁造成的条件</p>\n<p>1）一个资源只能被一个线程使用</p>\n<p>2）一个线程在阻塞等待某个资源，不释放占有资源</p>\n<p>3）一个线程已经获得的资源，在未使用之前，不能强行进行剥夺</p>\n<p>4）线程头尾形成循环等待资源关系</p>\n<p>只要不满足其中一个条件，就不会发生死锁</p>\n<p>2.在开发过程中，要注意：</p>\n<p>1）注意加锁顺序，保证每个线程按照同样的顺序加锁</p>\n<p>2）注意加锁时间，对锁设置超时时间</p>\n<p>3）检查死锁，预防机制，确保第一时间解决</p>\n<h1 id=\"五-线程池的实现原理\"><a href=\"#五-线程池的实现原理\" class=\"headerlink\" title=\"五.线程池的实现原理\"></a>五.线程池的实现原理</h1><p>提交一个任务到线程池中，线程池的处理流程如下： </p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpeg\" alt=\"线程池的处理流程\"></p>\n<p>1）判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。 </p>\n<p>2）线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。 </p>\n<p>3）判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。</p>\n<h1 id=\"六-线程池的使用\"><a href=\"#六-线程池的使用\" class=\"headerlink\" title=\"六.线程池的使用\"></a>六.线程池的使用</h1><h2 id=\"1-线程池的创建\"><a href=\"#1-线程池的创建\" class=\"headerlink\" title=\"1.线程池的创建\"></a>1.线程池的创建</h2><p>查看源码，线程池有七个参数</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0.png\" alt=\"线程池参数\"></p>\n<h3 id=\"1）corePoolSize\"><a href=\"#1）corePoolSize\" class=\"headerlink\" title=\"1）corePoolSize\"></a>1）corePoolSize</h3><p>线程池核心线程大小</p>\n<p>线程池中会维护一个最小的线程数量，即使这些线程处理空闲状态，他们也不会被销毁，除非设置了allowCoreThreadTimeOut。这里的最小线程数量即是corePoolSize。任务提交到线程池后，首先会检查当前线程数是否达到了corePoolSize，如果没有达到的话，则会创建一个新线程来处理这个任务。</p>\n<h3 id=\"2）maximumPoolSize\"><a href=\"#2）maximumPoolSize\" class=\"headerlink\" title=\"2）maximumPoolSize\"></a>2）maximumPoolSize</h3><p>线程池最大线程数量</p>\n<p>当前线程数达到corePoolSize后，如果继续有任务被提交到线程池，会将任务缓存到工作队列（后面会介绍）中。如果队列也已满，则会去创建一个新线程来出来这个处理。线程池不会无限制的去创建新线程，它会有一个最大线程数量的限制，这个数量即由maximunPoolSize指定。</p>\n<h3 id=\"3）keepAliveTime\"><a href=\"#3）keepAliveTime\" class=\"headerlink\" title=\"3）keepAliveTime\"></a>3）keepAliveTime</h3><p>空闲线程存活时间</p>\n<p>一个线程如果处于空闲状态，并且当前的线程数量大于corePoolSize，那么在指定时间后，这个空闲线程会被销毁，这里的指定时间由keepAliveTime来设定</p>\n<h3 id=\"4）unit\"><a href=\"#4）unit\" class=\"headerlink\" title=\"4）unit\"></a>4）unit</h3><p>空闲线程存活时间单位</p>\n<p>keepAliveTime的计量单位</p>\n<h3 id=\"5）workQueue\"><a href=\"#5）workQueue\" class=\"headerlink\" title=\"5）workQueue\"></a>5）workQueue</h3><p>工作队列</p>\n<p>新任务被提交后，会先进入到此工作队列中，任务调度时再从队列中取出任务。jdk中提供了四种工作队列：</p>\n<h4 id=\"①ArrayBlockingQueue\"><a href=\"#①ArrayBlockingQueue\" class=\"headerlink\" title=\"①ArrayBlockingQueue\"></a>①ArrayBlockingQueue</h4><p>基于数组的有界阻塞队列，按FIFO排序。新任务进来后，会放到该队列的队尾，有界的数组可以防止资源耗尽问题。当线程池中线程数量达到corePoolSize后，再有新任务进来，则会将任务放入该队列的队尾，等待被调度。如果队列已经是满的，则创建一个新线程，如果线程数量已经达到maxPoolSize，则会执行拒绝策略。</p>\n<h4 id=\"②LinkedBlockingQuene\"><a href=\"#②LinkedBlockingQuene\" class=\"headerlink\" title=\"②LinkedBlockingQuene\"></a>②LinkedBlockingQuene</h4><p>基于链表的无界阻塞队列（其实最大容量为Interger.MAX），按照FIFO排序。由于该队列的近似无界性，当线程池中线程数量达到corePoolSize后，再有新任务进来，会一直存入该队列，而基本不会去创建新线程直到maxPoolSize（很难达到Interger.MAX这个数），因此使用该工作队列时，参数maxPoolSize其实是不起作用的。</p>\n<h4 id=\"③SynchronousQuene\"><a href=\"#③SynchronousQuene\" class=\"headerlink\" title=\"③SynchronousQuene\"></a>③SynchronousQuene</h4><p>一个不缓存任务的阻塞队列，生产者放入一个任务必须等到消费者取出这个任务。也就是说新任务进来时，不会缓存，而是直接被调度执行该任务，如果没有可用线程，则创建新线程，如果线程数量达到maxPoolSize，则执行拒绝策略。</p>\n<h4 id=\"④PriorityBlockingQueue\"><a href=\"#④PriorityBlockingQueue\" class=\"headerlink\" title=\"④PriorityBlockingQueue\"></a>④PriorityBlockingQueue</h4><p>具有优先级的无界阻塞队列，优先级通过参数Comparator实现。</p>\n<h3 id=\"6）threadFactory\"><a href=\"#6）threadFactory\" class=\"headerlink\" title=\"6）threadFactory\"></a>6）threadFactory</h3><p>线程工厂</p>\n<p>创建一个新线程时使用的工厂，可以用来设定线程名、是否为daemon线程等等</p>\n<h3 id=\"7）handler\"><a href=\"#7）handler\" class=\"headerlink\" title=\"7）handler\"></a>7）handler</h3><p>拒绝策略</p>\n<p>当工作队列中的任务已到达最大限制，并且线程池中的线程数量也达到最大限制，这时如果有新任务提交进来，该如何处理呢。这里的拒绝策略，就是解决这个问题的，jdk中提供了4中拒绝策略：</p>\n<h4 id=\"①CallerRunsPolicy\"><a href=\"#①CallerRunsPolicy\" class=\"headerlink\" title=\"①CallerRunsPolicy\"></a>①CallerRunsPolicy</h4><p>该策略下，在调用者线程中直接执行被拒绝任务的run方法，除非线程池已经shutdown，则直接抛弃任务。</p>\n<h4 id=\"②AbortPolicy\"><a href=\"#②AbortPolicy\" class=\"headerlink\" title=\"②AbortPolicy\"></a>②AbortPolicy</h4><p>该策略下，直接丢弃任务，并抛出RejectedExecutionException异常。</p>\n<h4 id=\"③DiscardPolicy\"><a href=\"#③DiscardPolicy\" class=\"headerlink\" title=\"③DiscardPolicy\"></a>③DiscardPolicy</h4><p>该策略下，直接丢弃任务，什么都不做。</p>\n<h4 id=\"④DiscardOldestPolicy\"><a href=\"#④DiscardOldestPolicy\" class=\"headerlink\" title=\"④DiscardOldestPolicy\"></a>④DiscardOldestPolicy</h4><p>该策略下，抛弃进入队列最早的那个任务，然后尝试把这次拒绝的任务放入队列</p>\n<h2 id=\"2-向线程池提交任务\"><a href=\"#2-向线程池提交任务\" class=\"headerlink\" title=\"2.向线程池提交任务\"></a>2.向线程池提交任务</h2><p>可以使用两个方法向线程池提交任务，分别为execute()和submit()方法。</p>\n<p>execute()方法用于提交不需要返回值的任务，所以无法判断任务被线程池执行成功。</p>\n<p>submit方法用于提交需要返回值的任务。线程池会返回一个Future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用get(long timeout, TimeUnit unit)方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完成。</p>\n<h2 id=\"3、关闭线程池\"><a href=\"#3、关闭线程池\" class=\"headerlink\" title=\"3、关闭线程池\"></a>3、关闭线程池</h2><p>可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。</p>\n<p>它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以<strong>无法响应中断的任务可能永远无法终止</strong>。但是它们存在一定的区别，shutdownNow首先将线程池状态设置成STOP，然后尝试停止所有的正在执行或暂停任务线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p>\n<p>只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于应该调用哪种方法来关闭线程池，应该由线程池的任务特性决定，通常调用shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法（通俗的理解，shutdownNow是强制关闭，返回为未执行任务列表；而shutdown会等待当前任务执行完毕才真正关闭）。</p>\n<h2 id=\"4、合理地配置线程池\"><a href=\"#4、合理地配置线程池\" class=\"headerlink\" title=\"4、合理地配置线程池\"></a>4、合理地配置线程池</h2><p>要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析。</p>\n<ul>\n<li>任务的性质：CPU密集型任务、IO密集型任务和混合型任务。</li>\n<li>任务的优先级：高、中和低。</li>\n<li>任务的执行时间：长、中和短。</li>\n<li>任务的依赖性：是否依赖其他系统资源，如数据库连接。</li>\n</ul>\n<p>性质不同的任务可以用不同规模的线程池分开处理。CPU密集性任务应配置尽可能小的线程，如配置N(cpu) + 1个线程的线程池。由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如2 × N(cpu)。混合型任务，如果可以拆分，将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。如果这两个任务执行时间相差不是很大，则没必要进行分解。可以通过Runtime.getRuntime().availableProcessors()方法获取当前设备的CPU个数。</p>\n<p>优先级不同的任务可以使用优先级队列PriorityBlockingQueue来处理。他可以让优先级高的任务先执行。</p>\n<p>执行时间不同的任务可以交给不同规模的线程池来处理，或者可以使用优先级队列，让执行时间短的任务先执行。</p>\n<p>依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，等待的时间越长，则CPU空闲的时间就越长，那么线程数应该设置得越大，这样才能更好地利用CPU。</p>\n<p><strong>建议使用有界队列</strong>。有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。</p>\n<h2 id=\"5、线程池的监控\"><a href=\"#5、线程池的监控\" class=\"headerlink\" title=\"5、线程池的监控\"></a>5、线程池的监控</h2><p>如果在系统中大量使用线程池，则有必要对线程池进行监控，方便在出现问题时，可以根据线程池的使用状况快速定位问题。可以通过线程池提供的参数进行监控，在监控线程池的时候可以使用以下属性。</p>\n<ul>\n<li>taskCount：线程池需要执行的任务数量。</li>\n<li>completedTaskCount：线程池在运行过程中已完成的任务数量，小于或等于taskCount。</li>\n<li>largestPoolSize：线程池曾经创建过的最大线程数量。通过这个数据可以知道线程是否曾经满过。如该数值等于线程池的最大大小，则表示线程池曾经满过。</li>\n<li>getPoolSize：线程池的线程数量。如果线程池不销毁的话，线程池里的线程不会自动销毁，所以这个值只增不减。</li>\n<li>getActiveCount：获取活动的线程数。</li>\n</ul>\n<p>通过扩展线程池进行监控。可以通过继承线程池来自定义线程池，重写线程池的beforeExecute、afterExecute和terminated方法，也可以在任务执行前、执行后和线程池关闭前执行一些代码来进行监控。例如，监控任务的平均执行时间、最大执行时间和最小执行时间等。这几个方法在线程池里都是空方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-问题\"><a href=\"#一-问题\" class=\"headerlink\" title=\"一.问题\"></a>一.问题</h1><p>Process.waitFor导致死锁</p>\n<h1 id=\"二-产生原因\"><a href=\"#二-产生原因\" class=\"headerlink\" title=\"二.产生原因\"></a>二.产生原因</h1><p>使用Runtime.exec执行命令时，JAVA的线程会创建一个子进程，用于执行命令，而且子进程和JAVA线程会分别独立运行。主线程需要等待脚本进程，即子进程的返回结果和日志信息，在JAVA线程中调用Process.waitFor挂起来等待子进程完成。</p>\n<p>子进程执行时，不断的打印日志信息，我们通过Process.getInputStream和 Process.getErrorStream进行获取正常输出日志和错误日志进行处理。</p>\n<p>这个时候子进程不断的向JAVA线程写入数据，而JAVA线程调用Process.waitFor后已经阻塞挂起，而子进程在不断的向JAVA线程进行写入数据，当我们的Process.getInputStream的buffer缓冲区被写满，而JAVA线程依然挂起并未消费buffer中的数据，导致子进程无法继续向buffer缓冲区中继续写入数据，导致子进程也挂起。 </p>\n<p>JAVA线程和子进程都处于挂起的状态，JAVA线程等待子进程的结束，子进程等待JAVA线程对buffer缓冲区中的数据进行消费。两者在相互等待导致死锁。</p>\n<p>综上：由于缓存区的日志信息无法消费，导致线程相互等待，从而发生死锁</p>\n<h1 id=\"三-解决方案\"><a href=\"#三-解决方案\" class=\"headerlink\" title=\"三.解决方案\"></a>三.解决方案</h1><p>创建线程池，每次使用一个线程处理缓存区的日志</p>\n<p>&#96;&#96;</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static ThreadPoolExecutor executor;</span><br><span class=\"line\"> </span><br><span class=\"line\">static &#123;</span><br><span class=\"line\">    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()</span><br><span class=\"line\">            .setNameFormat(&quot;cmd-pool-%d&quot;).build();</span><br><span class=\"line\">    //根据实际情况创建线程池</span><br><span class=\"line\">    executor = new ThreadPoolExecutor(6, 10, 5,</span><br><span class=\"line\">            TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(1024),</span><br><span class=\"line\">            namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 流处理</span><br><span class=\"line\"> * @param stream</span><br><span class=\"line\"> */</span><br><span class=\"line\">private static void clearStream(InputStream stream) &#123;</span><br><span class=\"line\">    //处理buffer的线程</span><br><span class=\"line\">    executor.execute(new Runnable() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            String line = null;</span><br><span class=\"line\"> </span><br><span class=\"line\">            try (BufferedReader in = new BufferedReader(new InputStreamReader(stream));) &#123;</span><br><span class=\"line\">                while ((line = in.readLine()) != null) &#123;</span><br><span class=\"line\">                    LoggerUtils.debug(CmdExecUtils.class,line);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                LoggerUtils.error(CmdExecUtils.class,&quot;exec error : &#123;&#125;&quot;, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public static boolean execCommond(String... args) &#123;</span><br><span class=\"line\">    boolean flg = true;</span><br><span class=\"line\">    Runtime run = Runtime.getRuntime();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Process p;</span><br><span class=\"line\">        if (args != null &amp;&amp; args.length == 1) &#123;</span><br><span class=\"line\">            p = run.exec(args[0]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            p = run.exec(args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        InputStream stream=p.getInputStream();</span><br><span class=\"line\">        LoggerUtils.info(CmdExecUtils.class, stream + &quot;....getInputStream..&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        //消费正常日志</span><br><span class=\"line\">        clearStream(stream);</span><br><span class=\"line\">        //消费错误日志</span><br><span class=\"line\">        clearStream(p.getErrorStream());</span><br><span class=\"line\"> </span><br><span class=\"line\">        if (p.waitFor() != 0) &#123;</span><br><span class=\"line\">            if (p.exitValue() == 1) &#123;</span><br><span class=\"line\">                LoggerUtils.info(CmdExecUtils.class,&quot;=============exec=====================命令执行失败!&quot;);</span><br><span class=\"line\">                flg = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        flg = false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return flg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-死锁如何避免\"><a href=\"#四-死锁如何避免\" class=\"headerlink\" title=\"四.死锁如何避免\"></a>四.死锁如何避免</h1><p>1.死锁造成的条件</p>\n<p>1）一个资源只能被一个线程使用</p>\n<p>2）一个线程在阻塞等待某个资源，不释放占有资源</p>\n<p>3）一个线程已经获得的资源，在未使用之前，不能强行进行剥夺</p>\n<p>4）线程头尾形成循环等待资源关系</p>\n<p>只要不满足其中一个条件，就不会发生死锁</p>\n<p>2.在开发过程中，要注意：</p>\n<p>1）注意加锁顺序，保证每个线程按照同样的顺序加锁</p>\n<p>2）注意加锁时间，对锁设置超时时间</p>\n<p>3）检查死锁，预防机制，确保第一时间解决</p>\n<h1 id=\"五-线程池的实现原理\"><a href=\"#五-线程池的实现原理\" class=\"headerlink\" title=\"五.线程池的实现原理\"></a>五.线程池的实现原理</h1><p>提交一个任务到线程池中，线程池的处理流程如下： </p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpeg\" alt=\"线程池的处理流程\"></p>\n<p>1）判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。 </p>\n<p>2）线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。 </p>\n<p>3）判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。</p>\n<h1 id=\"六-线程池的使用\"><a href=\"#六-线程池的使用\" class=\"headerlink\" title=\"六.线程池的使用\"></a>六.线程池的使用</h1><h2 id=\"1-线程池的创建\"><a href=\"#1-线程池的创建\" class=\"headerlink\" title=\"1.线程池的创建\"></a>1.线程池的创建</h2><p>查看源码，线程池有七个参数</p>\n<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0.png\" alt=\"线程池参数\"></p>\n<h3 id=\"1）corePoolSize\"><a href=\"#1）corePoolSize\" class=\"headerlink\" title=\"1）corePoolSize\"></a>1）corePoolSize</h3><p>线程池核心线程大小</p>\n<p>线程池中会维护一个最小的线程数量，即使这些线程处理空闲状态，他们也不会被销毁，除非设置了allowCoreThreadTimeOut。这里的最小线程数量即是corePoolSize。任务提交到线程池后，首先会检查当前线程数是否达到了corePoolSize，如果没有达到的话，则会创建一个新线程来处理这个任务。</p>\n<h3 id=\"2）maximumPoolSize\"><a href=\"#2）maximumPoolSize\" class=\"headerlink\" title=\"2）maximumPoolSize\"></a>2）maximumPoolSize</h3><p>线程池最大线程数量</p>\n<p>当前线程数达到corePoolSize后，如果继续有任务被提交到线程池，会将任务缓存到工作队列（后面会介绍）中。如果队列也已满，则会去创建一个新线程来出来这个处理。线程池不会无限制的去创建新线程，它会有一个最大线程数量的限制，这个数量即由maximunPoolSize指定。</p>\n<h3 id=\"3）keepAliveTime\"><a href=\"#3）keepAliveTime\" class=\"headerlink\" title=\"3）keepAliveTime\"></a>3）keepAliveTime</h3><p>空闲线程存活时间</p>\n<p>一个线程如果处于空闲状态，并且当前的线程数量大于corePoolSize，那么在指定时间后，这个空闲线程会被销毁，这里的指定时间由keepAliveTime来设定</p>\n<h3 id=\"4）unit\"><a href=\"#4）unit\" class=\"headerlink\" title=\"4）unit\"></a>4）unit</h3><p>空闲线程存活时间单位</p>\n<p>keepAliveTime的计量单位</p>\n<h3 id=\"5）workQueue\"><a href=\"#5）workQueue\" class=\"headerlink\" title=\"5）workQueue\"></a>5）workQueue</h3><p>工作队列</p>\n<p>新任务被提交后，会先进入到此工作队列中，任务调度时再从队列中取出任务。jdk中提供了四种工作队列：</p>\n<h4 id=\"①ArrayBlockingQueue\"><a href=\"#①ArrayBlockingQueue\" class=\"headerlink\" title=\"①ArrayBlockingQueue\"></a>①ArrayBlockingQueue</h4><p>基于数组的有界阻塞队列，按FIFO排序。新任务进来后，会放到该队列的队尾，有界的数组可以防止资源耗尽问题。当线程池中线程数量达到corePoolSize后，再有新任务进来，则会将任务放入该队列的队尾，等待被调度。如果队列已经是满的，则创建一个新线程，如果线程数量已经达到maxPoolSize，则会执行拒绝策略。</p>\n<h4 id=\"②LinkedBlockingQuene\"><a href=\"#②LinkedBlockingQuene\" class=\"headerlink\" title=\"②LinkedBlockingQuene\"></a>②LinkedBlockingQuene</h4><p>基于链表的无界阻塞队列（其实最大容量为Interger.MAX），按照FIFO排序。由于该队列的近似无界性，当线程池中线程数量达到corePoolSize后，再有新任务进来，会一直存入该队列，而基本不会去创建新线程直到maxPoolSize（很难达到Interger.MAX这个数），因此使用该工作队列时，参数maxPoolSize其实是不起作用的。</p>\n<h4 id=\"③SynchronousQuene\"><a href=\"#③SynchronousQuene\" class=\"headerlink\" title=\"③SynchronousQuene\"></a>③SynchronousQuene</h4><p>一个不缓存任务的阻塞队列，生产者放入一个任务必须等到消费者取出这个任务。也就是说新任务进来时，不会缓存，而是直接被调度执行该任务，如果没有可用线程，则创建新线程，如果线程数量达到maxPoolSize，则执行拒绝策略。</p>\n<h4 id=\"④PriorityBlockingQueue\"><a href=\"#④PriorityBlockingQueue\" class=\"headerlink\" title=\"④PriorityBlockingQueue\"></a>④PriorityBlockingQueue</h4><p>具有优先级的无界阻塞队列，优先级通过参数Comparator实现。</p>\n<h3 id=\"6）threadFactory\"><a href=\"#6）threadFactory\" class=\"headerlink\" title=\"6）threadFactory\"></a>6）threadFactory</h3><p>线程工厂</p>\n<p>创建一个新线程时使用的工厂，可以用来设定线程名、是否为daemon线程等等</p>\n<h3 id=\"7）handler\"><a href=\"#7）handler\" class=\"headerlink\" title=\"7）handler\"></a>7）handler</h3><p>拒绝策略</p>\n<p>当工作队列中的任务已到达最大限制，并且线程池中的线程数量也达到最大限制，这时如果有新任务提交进来，该如何处理呢。这里的拒绝策略，就是解决这个问题的，jdk中提供了4中拒绝策略：</p>\n<h4 id=\"①CallerRunsPolicy\"><a href=\"#①CallerRunsPolicy\" class=\"headerlink\" title=\"①CallerRunsPolicy\"></a>①CallerRunsPolicy</h4><p>该策略下，在调用者线程中直接执行被拒绝任务的run方法，除非线程池已经shutdown，则直接抛弃任务。</p>\n<h4 id=\"②AbortPolicy\"><a href=\"#②AbortPolicy\" class=\"headerlink\" title=\"②AbortPolicy\"></a>②AbortPolicy</h4><p>该策略下，直接丢弃任务，并抛出RejectedExecutionException异常。</p>\n<h4 id=\"③DiscardPolicy\"><a href=\"#③DiscardPolicy\" class=\"headerlink\" title=\"③DiscardPolicy\"></a>③DiscardPolicy</h4><p>该策略下，直接丢弃任务，什么都不做。</p>\n<h4 id=\"④DiscardOldestPolicy\"><a href=\"#④DiscardOldestPolicy\" class=\"headerlink\" title=\"④DiscardOldestPolicy\"></a>④DiscardOldestPolicy</h4><p>该策略下，抛弃进入队列最早的那个任务，然后尝试把这次拒绝的任务放入队列</p>\n<h2 id=\"2-向线程池提交任务\"><a href=\"#2-向线程池提交任务\" class=\"headerlink\" title=\"2.向线程池提交任务\"></a>2.向线程池提交任务</h2><p>可以使用两个方法向线程池提交任务，分别为execute()和submit()方法。</p>\n<p>execute()方法用于提交不需要返回值的任务，所以无法判断任务被线程池执行成功。</p>\n<p>submit方法用于提交需要返回值的任务。线程池会返回一个Future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用get(long timeout, TimeUnit unit)方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完成。</p>\n<h2 id=\"3、关闭线程池\"><a href=\"#3、关闭线程池\" class=\"headerlink\" title=\"3、关闭线程池\"></a>3、关闭线程池</h2><p>可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。</p>\n<p>它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以<strong>无法响应中断的任务可能永远无法终止</strong>。但是它们存在一定的区别，shutdownNow首先将线程池状态设置成STOP，然后尝试停止所有的正在执行或暂停任务线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p>\n<p>只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于应该调用哪种方法来关闭线程池，应该由线程池的任务特性决定，通常调用shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法（通俗的理解，shutdownNow是强制关闭，返回为未执行任务列表；而shutdown会等待当前任务执行完毕才真正关闭）。</p>\n<h2 id=\"4、合理地配置线程池\"><a href=\"#4、合理地配置线程池\" class=\"headerlink\" title=\"4、合理地配置线程池\"></a>4、合理地配置线程池</h2><p>要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析。</p>\n<ul>\n<li>任务的性质：CPU密集型任务、IO密集型任务和混合型任务。</li>\n<li>任务的优先级：高、中和低。</li>\n<li>任务的执行时间：长、中和短。</li>\n<li>任务的依赖性：是否依赖其他系统资源，如数据库连接。</li>\n</ul>\n<p>性质不同的任务可以用不同规模的线程池分开处理。CPU密集性任务应配置尽可能小的线程，如配置N(cpu) + 1个线程的线程池。由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如2 × N(cpu)。混合型任务，如果可以拆分，将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。如果这两个任务执行时间相差不是很大，则没必要进行分解。可以通过Runtime.getRuntime().availableProcessors()方法获取当前设备的CPU个数。</p>\n<p>优先级不同的任务可以使用优先级队列PriorityBlockingQueue来处理。他可以让优先级高的任务先执行。</p>\n<p>执行时间不同的任务可以交给不同规模的线程池来处理，或者可以使用优先级队列，让执行时间短的任务先执行。</p>\n<p>依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，等待的时间越长，则CPU空闲的时间就越长，那么线程数应该设置得越大，这样才能更好地利用CPU。</p>\n<p><strong>建议使用有界队列</strong>。有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。</p>\n<h2 id=\"5、线程池的监控\"><a href=\"#5、线程池的监控\" class=\"headerlink\" title=\"5、线程池的监控\"></a>5、线程池的监控</h2><p>如果在系统中大量使用线程池，则有必要对线程池进行监控，方便在出现问题时，可以根据线程池的使用状况快速定位问题。可以通过线程池提供的参数进行监控，在监控线程池的时候可以使用以下属性。</p>\n<ul>\n<li>taskCount：线程池需要执行的任务数量。</li>\n<li>completedTaskCount：线程池在运行过程中已完成的任务数量，小于或等于taskCount。</li>\n<li>largestPoolSize：线程池曾经创建过的最大线程数量。通过这个数据可以知道线程是否曾经满过。如该数值等于线程池的最大大小，则表示线程池曾经满过。</li>\n<li>getPoolSize：线程池的线程数量。如果线程池不销毁的话，线程池里的线程不会自动销毁，所以这个值只增不减。</li>\n<li>getActiveCount：获取活动的线程数。</li>\n</ul>\n<p>通过扩展线程池进行监控。可以通过继承线程池来自定义线程池，重写线程池的beforeExecute、afterExecute和terminated方法，也可以在任务执行前、执行后和线程池关闭前执行一些代码来进行监控。例如，监控任务的平均执行时间、最大执行时间和最小执行时间等。这几个方法在线程池里都是空方法。</p>\n"},{"title":"输入n打印菱形","date":"2021-01-30T03:36:50.000Z","_content":"\n![打印菱形](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240228113723.png)\n\n```\nclass Solution {\n    public int demo(int n) {\n        for (int i = 0; i < n; i++) {\n            for (int a = 0; a < n-i-1; a++){\n                System.out.print(\" \");\n            }\n            for (int b = 0; b < 2 * i + 1; b++) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n\n        for (int i = 1; i < n; i++){\n            for (int a = 0; a < i; a++){\n                System.out.print(\" \");\n            }\n            for (int b = 0; b < 2*(n-i-1)+1; b++){\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n```\n\n","source":"_posts/输入n打印菱形.md","raw":"---\ntitle: 输入n打印菱形\ndate: 2021-01-30 11:36:50\ntags: [算法, JAVA]\ncategories:\n- [技术, JAVA]\n---\n\n![打印菱形](https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240228113723.png)\n\n```\nclass Solution {\n    public int demo(int n) {\n        for (int i = 0; i < n; i++) {\n            for (int a = 0; a < n-i-1; a++){\n                System.out.print(\" \");\n            }\n            for (int b = 0; b < 2 * i + 1; b++) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n\n        for (int i = 1; i < n; i++){\n            for (int a = 0; a < i; a++){\n                System.out.print(\" \");\n            }\n            for (int b = 0; b < 2*(n-i-1)+1; b++){\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n```\n\n","slug":"输入n打印菱形","published":1,"updated":"2024-04-24T07:34:25.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdj9952001va4ue10jj4bkl","content":"<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240228113723.png\" alt=\"打印菱形\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int demo(int n) &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">            for (int a = 0; a &lt; n-i-1; a++)&#123;</span><br><span class=\"line\">                System.out.print(&quot; &quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int b = 0; b &lt; 2 * i + 1; b++) &#123;</span><br><span class=\"line\">                System.out.print(&quot;*&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 1; i &lt; n; i++)&#123;</span><br><span class=\"line\">            for (int a = 0; a &lt; i; a++)&#123;</span><br><span class=\"line\">                System.out.print(&quot; &quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int b = 0; b &lt; 2*(n-i-1)+1; b++)&#123;</span><br><span class=\"line\">                System.out.print(&quot;*&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/liujing23/FigureBed/main/blog/img/20240228113723.png\" alt=\"打印菱形\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int demo(int n) &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">            for (int a = 0; a &lt; n-i-1; a++)&#123;</span><br><span class=\"line\">                System.out.print(&quot; &quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int b = 0; b &lt; 2 * i + 1; b++) &#123;</span><br><span class=\"line\">                System.out.print(&quot;*&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 1; i &lt; n; i++)&#123;</span><br><span class=\"line\">            for (int a = 0; a &lt; i; a++)&#123;</span><br><span class=\"line\">                System.out.print(&quot; &quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int b = 0; b &lt; 2*(n-i-1)+1; b++)&#123;</span><br><span class=\"line\">                System.out.print(&quot;*&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clpw15s53000148apc27tb714","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpw28zfd0005rgap52xkhtpy"},{"post_id":"clpw1tc5x0000z0ap1wzr26vf","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpw295m70007rgapenal7v4h"},{"post_id":"clpw1tc5x0000z0ap1wzr26vf","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpw2jb330005x0apgkya2223"},{"post_id":"clpw15s53000148apc27tb714","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpw2kf770006x0ap55r2h2i0"},{"post_id":"clpw98x200000cgap906u46l1","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpw98x240004cgapar2s3wf0"},{"post_id":"clpw98x200000cgap906u46l1","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpw98x270005cgapasuog6t5"},{"post_id":"clpw98x210001cgapd9yz3p87","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpw98x270006cgaph9ba9uas"},{"post_id":"clpw98x210001cgapd9yz3p87","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clpw98x2d0009cgapas9m6b3x"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","category_id":"clpw220bl0000csapc98m2wdc","_id":"clpwbvwjl000duoap9eu96l96"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","category_id":"clpwbvwjj0004uoapcx0qgsqw","_id":"clpwbvwjm000guoapd4b1glmw"},{"post_id":"clq0buvwx0000b4apg24d4llf","category_id":"clpw220bl0000csapc98m2wdc","_id":"clq0buvx70005b4ap9k3n3qsm"},{"post_id":"clq0buvwx0000b4apg24d4llf","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clq0buvx80007b4apd6tvf2wn"},{"post_id":"clq0buvx10001b4ap2ovk3rzh","category_id":"clpw220bl0000csapc98m2wdc","_id":"clq0buvxc000bb4ap8hmwfwp8"},{"post_id":"clq0buvx10001b4ap2ovk3rzh","category_id":"clq0buvx60003b4ap490q5cvt","_id":"clq0buvxe000db4apawdleidw"},{"post_id":"clswk55810000lcap691380s8","category_id":"clpw220bl0000csapc98m2wdc","_id":"clswkax60000310ap05e341og"},{"post_id":"clswk55810000lcap691380s8","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clswkax60000410apf0tveidb"},{"post_id":"clswmim4n000070apfe2m6c7f","category_id":"clpw220bl0000csapc98m2wdc","_id":"clswmim50000470ap948qfsx9"},{"post_id":"clswmim4n000070apfe2m6c7f","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clswmim51000570ap32xngia0"},{"post_id":"clvdj99390000a4ue11hvaeyf","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj993m0004a4ue3qopcdxw"},{"post_id":"clvdj99390000a4ue11hvaeyf","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj993q0007a4ue357aboch"},{"post_id":"clvdj993k0002a4ueevh53tqi","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj9940000da4ue5idud2pz"},{"post_id":"clvdj993k0002a4ueevh53tqi","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj9942000ga4ue22c905v8"},{"post_id":"clvdj993l0003a4ue7w185e85","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj9944000ja4uedodr56fs"},{"post_id":"clvdj993l0003a4ue7w185e85","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj9946000la4uehg8uh0ri"},{"post_id":"clvdj993n0006a4ue4d5w0rpj","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj9948000pa4uedm0cgd3u"},{"post_id":"clvdj993n0006a4ue4d5w0rpj","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994c000sa4ue9aza78so"},{"post_id":"clvdj993r0009a4ue1cjqfh90","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj994e000ua4ue70w00rij"},{"post_id":"clvdj993r0009a4ue1cjqfh90","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994g000wa4uegctbhy17"},{"post_id":"clvdj993z000ca4uegjma43kw","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj994j000za4ue03tedmf7"},{"post_id":"clvdj993z000ca4uegjma43kw","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994l0011a4uedh75apda"},{"post_id":"clvdj9940000fa4ue8onv4bp5","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj994o0014a4ueb0293g7t"},{"post_id":"clvdj9940000fa4ue8onv4bp5","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994q0017a4ue15tf1hji"},{"post_id":"clvdj9946000na4ue92k55xaq","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj994r001aa4uefgvvd4pp"},{"post_id":"clvdj9946000na4ue92k55xaq","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994r001ca4uegfswa7xn"},{"post_id":"clvdj994b000ra4ueghupevnu","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj994u001fa4uef1j5c8gk"},{"post_id":"clvdj994b000ra4ueghupevnu","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994v001ha4ue496n01k8"},{"post_id":"clvdj994b000ra4ueghupevnu","category_id":"clvdj994h000xa4ueestx5dre","_id":"clvdj994v001ja4uedn938rf9"},{"post_id":"clvdj994m0013a4ue8y3k4qx0","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj994v001la4ue24kd07zd"},{"post_id":"clvdj994m0013a4ue8y3k4qx0","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994v001na4uebdsdgdhm"},{"post_id":"clvdj994m0013a4ue8y3k4qx0","category_id":"clvdj994h000xa4ueestx5dre","_id":"clvdj994w001pa4ue2elffxv6"},{"post_id":"clvdj994p0016a4uec5pr6gw9","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj994x001ra4ueg2hk5njg"},{"post_id":"clvdj994p0016a4uec5pr6gw9","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj994x001sa4ueh8s6bb8p"},{"post_id":"clvdj994z001ta4uefoit4juy","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj9953001xa4ue4030by2h"},{"post_id":"clvdj994z001ta4uefoit4juy","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj9953001za4ue3ofqf3k1"},{"post_id":"clvdj9952001va4ue10jj4bkl","category_id":"clpw220bl0000csapc98m2wdc","_id":"clvdj99540021a4ueb0cecaxs"},{"post_id":"clvdj9952001va4ue10jj4bkl","category_id":"clpw2jb320004x0apf0am8b8u","_id":"clvdj99550023a4ue5h2s6ini"}],"PostTag":[{"post_id":"clpw1tc5x0000z0ap1wzr26vf","tag_id":"clpw15s55000248ap59jqad4c","_id":"clpw1tc640001z0apbodg5xyh"},{"post_id":"clpw15s53000148apc27tb714","tag_id":"clpw15s55000248ap59jqad4c","_id":"clpw2enn80001x0apb6feglfa"},{"post_id":"clpw15s53000148apc27tb714","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpw2enn80002x0apbjhx10w7"},{"post_id":"clpw1tc5x0000z0ap1wzr26vf","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpw2fx7i0003x0apg0pjb5y9"},{"post_id":"clpw98x200000cgap906u46l1","tag_id":"clpw98x220002cgapf6ubak3y","_id":"clpw98x2d0008cgapafpc4akk"},{"post_id":"clpw98x200000cgap906u46l1","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpw98x2d000acgap5t1ka4sw"},{"post_id":"clpw98x200000cgap906u46l1","tag_id":"clpw98x240003cgap2kzk3q3n","_id":"clpw98x2d000ccgap9bod956n"},{"post_id":"clpw98x210001cgapd9yz3p87","tag_id":"clpw98x220002cgapf6ubak3y","_id":"clpw98x2e000ecgapcv6ngpy5"},{"post_id":"clpw98x210001cgapd9yz3p87","tag_id":"clpw98x2d000bcgaphjcb6znf","_id":"clpw98x2e000fcgap53zk2qlb"},{"post_id":"clpw98x210001cgapd9yz3p87","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clpw98x2e000gcgap264vbokt"},{"post_id":"clpw98x210001cgapd9yz3p87","tag_id":"clpw98x240003cgap2kzk3q3n","_id":"clpw98x2e000hcgap5dcza2kl"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","tag_id":"clpwbvwjl000euoap73ab7ohy","_id":"clpwbvwjn000kuoap5sajd6q9"},{"post_id":"clpwbvwjf0001uoaphfhybpfv","tag_id":"clpwbvwjm000huoap70yhaj8j","_id":"clpwbvwjo000muoap0mv969z7"},{"post_id":"clq0buvwx0000b4apg24d4llf","tag_id":"clq0buvx20002b4apgvxcfhdw","_id":"clq0buvx80006b4apdyuc37hv"},{"post_id":"clq0buvwx0000b4apg24d4llf","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clq0buvx80008b4aph1ziabr5"},{"post_id":"clq0buvwx0000b4apg24d4llf","tag_id":"clpwbvwjk0005uoapcxu8cq27","_id":"clq0buvxc000ab4apez50f0ar"},{"post_id":"clq0buvx10001b4ap2ovk3rzh","tag_id":"clq0buvx70004b4ap5pe08sx6","_id":"clq0buvxe000eb4ap5lu39qix"},{"post_id":"clq0buvx10001b4ap2ovk3rzh","tag_id":"clq0buvx80009b4apcaqsbrhc","_id":"clq0buvxe000fb4ap15t710yg"},{"post_id":"clq0buvx10001b4ap2ovk3rzh","tag_id":"clq0buvx20002b4apgvxcfhdw","_id":"clq0buvxe000gb4ap4auc3nm6"},{"post_id":"clswk55810000lcap691380s8","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clswkax60000110ap6651fym8"},{"post_id":"clswmim4n000070apfe2m6c7f","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clswmim52000670apagfi62wn"},{"post_id":"clswmim4n000070apfe2m6c7f","tag_id":"clswmlkmj0000mgap53nld0bd","_id":"clswmlkmk0002mgap0p4v98es"},{"post_id":"clswmim4n000070apfe2m6c7f","tag_id":"clswmlkmk0001mgapbza3b0z4","_id":"clswmlkmk0003mgap197k3kih"},{"post_id":"clswk55810000lcap691380s8","tag_id":"clswmlkmj0000mgap53nld0bd","_id":"clswmlpdy0004mgap4ec054hm"},{"post_id":"clswk55810000lcap691380s8","tag_id":"clswmlkmk0001mgapbza3b0z4","_id":"clswmlpdy0005mgap30aqfo9u"},{"post_id":"clvdj99390000a4ue11hvaeyf","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj993h0001a4ue17er0ho6"},{"post_id":"clvdj993k0002a4ueevh53tqi","tag_id":"clpwbvwjh0002uoap6lm45em4","_id":"clvdj993n0005a4ueghqm4gbj"},{"post_id":"clvdj993k0002a4ueevh53tqi","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj993q0008a4ue8lo01b12"},{"post_id":"clvdj993k0002a4ueevh53tqi","tag_id":"clpwbvwjk0005uoapcxu8cq27","_id":"clvdj993y000ba4ue08a13wbp"},{"post_id":"clvdj993l0003a4ue7w185e85","tag_id":"clpwbvwjh0002uoap6lm45em4","_id":"clvdj9940000ea4uegcjab5mp"},{"post_id":"clvdj993l0003a4ue7w185e85","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj9942000ha4ueggzj92ux"},{"post_id":"clvdj993l0003a4ue7w185e85","tag_id":"clpwbvwjk0005uoapcxu8cq27","_id":"clvdj9944000ka4ue1pxchpel"},{"post_id":"clvdj9940000fa4ue8onv4bp5","tag_id":"clpw15s55000248ap59jqad4c","_id":"clvdj9946000ma4ueajmsc9qg"},{"post_id":"clvdj9940000fa4ue8onv4bp5","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj994b000qa4ue8p5jb3rf"},{"post_id":"clvdj993n0006a4ue4d5w0rpj","tag_id":"clvdj993t000aa4uefbvx2fk7","_id":"clvdj994d000ta4ue42o866ig"},{"post_id":"clvdj993n0006a4ue4d5w0rpj","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj994f000va4ue528q6vpe"},{"post_id":"clvdj993r0009a4ue1cjqfh90","tag_id":"clvdj9943000ia4ue6p066pk6","_id":"clvdj994i000ya4ue47xv9sg7"},{"post_id":"clvdj993r0009a4ue1cjqfh90","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj994k0010a4ued4gk59ru"},{"post_id":"clvdj9946000na4ue92k55xaq","tag_id":"clpw15s55000248ap59jqad4c","_id":"clvdj994m0012a4ue6lkyhw8l"},{"post_id":"clvdj9946000na4ue92k55xaq","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj994o0015a4uegov59god"},{"post_id":"clvdj994b000ra4ueghupevnu","tag_id":"clpw15s55000248ap59jqad4c","_id":"clvdj994r0019a4uecek0gqto"},{"post_id":"clvdj994b000ra4ueghupevnu","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj994r001ba4ueanto6vwn"},{"post_id":"clvdj993z000ca4uegjma43kw","tag_id":"clvdj9943000ia4ue6p066pk6","_id":"clvdj994r001da4ue4pz7h7cb"},{"post_id":"clvdj993z000ca4uegjma43kw","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj994v001ga4uegrkofqj6"},{"post_id":"clvdj994m0013a4ue8y3k4qx0","tag_id":"clvdj994q0018a4ueeqj0g1yz","_id":"clvdj994v001ia4uehpe587ih"},{"post_id":"clvdj994m0013a4ue8y3k4qx0","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj994v001ka4ueg7tz9sgz"},{"post_id":"clvdj994m0013a4ue8y3k4qx0","tag_id":"clpwbvwjh0002uoap6lm45em4","_id":"clvdj994v001ma4ued19a9wc0"},{"post_id":"clvdj994p0016a4uec5pr6gw9","tag_id":"clvdj994s001ea4ue175yh3k5","_id":"clvdj994w001oa4uehj9w7bw6"},{"post_id":"clvdj994p0016a4uec5pr6gw9","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj994w001qa4ueha5w7thl"},{"post_id":"clvdj9952001va4ue10jj4bkl","tag_id":"clvdj994s001ea4ue175yh3k5","_id":"clvdj9952001wa4ue156u0hol"},{"post_id":"clvdj9952001va4ue10jj4bkl","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj9953001ya4ue44ml0lr9"},{"post_id":"clvdj994z001ta4uefoit4juy","tag_id":"clvdj9951001ua4uedb334z2s","_id":"clvdj99540020a4ue9ie07g4h"},{"post_id":"clvdj994z001ta4uefoit4juy","tag_id":"clpw2enn70000x0apdzinh8l1","_id":"clvdj99540022a4ue6iqa0qr5"}],"Tag":[{"name":"he","_id":"clpv5xn790001z4ap2zh5fvmh"},{"name":"Spring","_id":"clpw15s55000248ap59jqad4c"},{"name":"Spring，JAVA","_id":"clpw28zfc0004rgap7kqhexg3"},{"name":"Spring JAVA","_id":"clpw2al0j00006kap7b8i410u"},{"name":"JAVA","_id":"clpw2enn70000x0apdzinh8l1"},{"name":"hutool","_id":"clpw98x220002cgapf6ubak3y"},{"name":"工具类","_id":"clpw98x240003cgap2kzk3q3n"},{"name":"fastjson","_id":"clpw98x2d000bcgaphjcb6znf"},{"name":"maven","_id":"clpwbvwjh0002uoap6lm45em4"},{"name":"项目管理","_id":"clpwbvwjk0005uoapcxu8cq27"},{"name":"请求头","_id":"clpwbvwjl0009uoapgxde4pag"},{"name":"request","_id":"clpwbvwjl000euoap73ab7ohy"},{"name":"前端","_id":"clpwbvwjm000huoap70yhaj8j"},{"name":"gitee","_id":"clq0buvx20002b4apgvxcfhdw"},{"name":"hexo","_id":"clq0buvx70004b4ap5pe08sx6"},{"name":"博客","_id":"clq0buvx80009b4apcaqsbrhc"},{"name":"底层， 数据结构","_id":"clswmim4p000170apf6v95u3x"},{"name":"底层，数据结构","_id":"clswmim4z000270ap4pdz67gj"},{"name":"底层","_id":"clswmlkmj0000mgap53nld0bd"},{"name":"数据结构","_id":"clswmlkmk0001mgapbza3b0z4"},{"name":"Mysql","_id":"clvdj993t000aa4uefbvx2fk7"},{"name":"mysql","_id":"clvdj9943000ia4ue6p066pk6"},{"name":"bug","_id":"clvdj994q0018a4ueeqj0g1yz"},{"name":"算法","_id":"clvdj994s001ea4ue175yh3k5"},{"name":"多线程","_id":"clvdj9951001ua4uedb334z2s"}]}}